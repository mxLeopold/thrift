/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class StuAnswerDetail implements org.apache.thrift.TBase<StuAnswerDetail, StuAnswerDetail._Fields>, java.io.Serializable, Cloneable, Comparable<StuAnswerDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StuAnswerDetail");

  private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STU_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stuName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CORRECT_QUESTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("correctQuestionCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WRONG_QUESTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("wrongQuestionCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACCURACY_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("accuracyRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordId", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StuAnswerDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StuAnswerDetailTupleSchemeFactory());
  }

  public int stuId; // required
  public String stuName; // required
  public int totalTime; // required
  public int correctQuestionCount; // required
  public int wrongQuestionCount; // required
  public double accuracyRate; // required
  public int recordId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STU_ID((short)1, "stuId"),
    STU_NAME((short)2, "stuName"),
    TOTAL_TIME((short)3, "totalTime"),
    CORRECT_QUESTION_COUNT((short)4, "correctQuestionCount"),
    WRONG_QUESTION_COUNT((short)5, "wrongQuestionCount"),
    ACCURACY_RATE((short)6, "accuracyRate"),
    RECORD_ID((short)7, "recordId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STU_ID
          return STU_ID;
        case 2: // STU_NAME
          return STU_NAME;
        case 3: // TOTAL_TIME
          return TOTAL_TIME;
        case 4: // CORRECT_QUESTION_COUNT
          return CORRECT_QUESTION_COUNT;
        case 5: // WRONG_QUESTION_COUNT
          return WRONG_QUESTION_COUNT;
        case 6: // ACCURACY_RATE
          return ACCURACY_RATE;
        case 7: // RECORD_ID
          return RECORD_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STUID_ISSET_ID = 0;
  private static final int __TOTALTIME_ISSET_ID = 1;
  private static final int __CORRECTQUESTIONCOUNT_ISSET_ID = 2;
  private static final int __WRONGQUESTIONCOUNT_ISSET_ID = 3;
  private static final int __ACCURACYRATE_ISSET_ID = 4;
  private static final int __RECORDID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STU_NAME, new org.apache.thrift.meta_data.FieldMetaData("stuName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("totalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_QUESTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("correctQuestionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRONG_QUESTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("wrongQuestionCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCURACY_RATE, new org.apache.thrift.meta_data.FieldMetaData("accuracyRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StuAnswerDetail.class, metaDataMap);
  }

  public StuAnswerDetail() {
  }

  public StuAnswerDetail(
    int stuId,
    String stuName,
    int totalTime,
    int correctQuestionCount,
    int wrongQuestionCount,
    double accuracyRate,
    int recordId)
  {
    this();
    this.stuId = stuId;
    setStuIdIsSet(true);
    this.stuName = stuName;
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    this.correctQuestionCount = correctQuestionCount;
    setCorrectQuestionCountIsSet(true);
    this.wrongQuestionCount = wrongQuestionCount;
    setWrongQuestionCountIsSet(true);
    this.accuracyRate = accuracyRate;
    setAccuracyRateIsSet(true);
    this.recordId = recordId;
    setRecordIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StuAnswerDetail(StuAnswerDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.stuId = other.stuId;
    if (other.isSetStuName()) {
      this.stuName = other.stuName;
    }
    this.totalTime = other.totalTime;
    this.correctQuestionCount = other.correctQuestionCount;
    this.wrongQuestionCount = other.wrongQuestionCount;
    this.accuracyRate = other.accuracyRate;
    this.recordId = other.recordId;
  }

  public StuAnswerDetail deepCopy() {
    return new StuAnswerDetail(this);
  }

  @Override
  public void clear() {
    setStuIdIsSet(false);
    this.stuId = 0;
    this.stuName = null;
    setTotalTimeIsSet(false);
    this.totalTime = 0;
    setCorrectQuestionCountIsSet(false);
    this.correctQuestionCount = 0;
    setWrongQuestionCountIsSet(false);
    this.wrongQuestionCount = 0;
    setAccuracyRateIsSet(false);
    this.accuracyRate = 0.0;
    setRecordIdIsSet(false);
    this.recordId = 0;
  }

  public int getStuId() {
    return this.stuId;
  }

  public StuAnswerDetail setStuId(int stuId) {
    this.stuId = stuId;
    setStuIdIsSet(true);
    return this;
  }

  public void unsetStuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
  public boolean isSetStuId() {
    return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  public void setStuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
  }

  public String getStuName() {
    return this.stuName;
  }

  public StuAnswerDetail setStuName(String stuName) {
    this.stuName = stuName;
    return this;
  }

  public void unsetStuName() {
    this.stuName = null;
  }

  /** Returns true if field stuName is set (has been assigned a value) and false otherwise */
  public boolean isSetStuName() {
    return this.stuName != null;
  }

  public void setStuNameIsSet(boolean value) {
    if (!value) {
      this.stuName = null;
    }
  }

  public int getTotalTime() {
    return this.totalTime;
  }

  public StuAnswerDetail setTotalTime(int totalTime) {
    this.totalTime = totalTime;
    setTotalTimeIsSet(true);
    return this;
  }

  public void unsetTotalTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  /** Returns true if field totalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTIME_ISSET_ID);
  }

  public void setTotalTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTIME_ISSET_ID, value);
  }

  public int getCorrectQuestionCount() {
    return this.correctQuestionCount;
  }

  public StuAnswerDetail setCorrectQuestionCount(int correctQuestionCount) {
    this.correctQuestionCount = correctQuestionCount;
    setCorrectQuestionCountIsSet(true);
    return this;
  }

  public void unsetCorrectQuestionCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTQUESTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field correctQuestionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectQuestionCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTQUESTIONCOUNT_ISSET_ID);
  }

  public void setCorrectQuestionCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTQUESTIONCOUNT_ISSET_ID, value);
  }

  public int getWrongQuestionCount() {
    return this.wrongQuestionCount;
  }

  public StuAnswerDetail setWrongQuestionCount(int wrongQuestionCount) {
    this.wrongQuestionCount = wrongQuestionCount;
    setWrongQuestionCountIsSet(true);
    return this;
  }

  public void unsetWrongQuestionCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRONGQUESTIONCOUNT_ISSET_ID);
  }

  /** Returns true if field wrongQuestionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWrongQuestionCount() {
    return EncodingUtils.testBit(__isset_bitfield, __WRONGQUESTIONCOUNT_ISSET_ID);
  }

  public void setWrongQuestionCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRONGQUESTIONCOUNT_ISSET_ID, value);
  }

  public double getAccuracyRate() {
    return this.accuracyRate;
  }

  public StuAnswerDetail setAccuracyRate(double accuracyRate) {
    this.accuracyRate = accuracyRate;
    setAccuracyRateIsSet(true);
    return this;
  }

  public void unsetAccuracyRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCURACYRATE_ISSET_ID);
  }

  /** Returns true if field accuracyRate is set (has been assigned a value) and false otherwise */
  public boolean isSetAccuracyRate() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCURACYRATE_ISSET_ID);
  }

  public void setAccuracyRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCURACYRATE_ISSET_ID, value);
  }

  public int getRecordId() {
    return this.recordId;
  }

  public StuAnswerDetail setRecordId(int recordId) {
    this.recordId = recordId;
    setRecordIdIsSet(true);
    return this;
  }

  public void unsetRecordId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  /** Returns true if field recordId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  public void setRecordIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STU_ID:
      if (value == null) {
        unsetStuId();
      } else {
        setStuId((Integer)value);
      }
      break;

    case STU_NAME:
      if (value == null) {
        unsetStuName();
      } else {
        setStuName((String)value);
      }
      break;

    case TOTAL_TIME:
      if (value == null) {
        unsetTotalTime();
      } else {
        setTotalTime((Integer)value);
      }
      break;

    case CORRECT_QUESTION_COUNT:
      if (value == null) {
        unsetCorrectQuestionCount();
      } else {
        setCorrectQuestionCount((Integer)value);
      }
      break;

    case WRONG_QUESTION_COUNT:
      if (value == null) {
        unsetWrongQuestionCount();
      } else {
        setWrongQuestionCount((Integer)value);
      }
      break;

    case ACCURACY_RATE:
      if (value == null) {
        unsetAccuracyRate();
      } else {
        setAccuracyRate((Double)value);
      }
      break;

    case RECORD_ID:
      if (value == null) {
        unsetRecordId();
      } else {
        setRecordId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STU_ID:
      return getStuId();

    case STU_NAME:
      return getStuName();

    case TOTAL_TIME:
      return getTotalTime();

    case CORRECT_QUESTION_COUNT:
      return getCorrectQuestionCount();

    case WRONG_QUESTION_COUNT:
      return getWrongQuestionCount();

    case ACCURACY_RATE:
      return getAccuracyRate();

    case RECORD_ID:
      return getRecordId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STU_ID:
      return isSetStuId();
    case STU_NAME:
      return isSetStuName();
    case TOTAL_TIME:
      return isSetTotalTime();
    case CORRECT_QUESTION_COUNT:
      return isSetCorrectQuestionCount();
    case WRONG_QUESTION_COUNT:
      return isSetWrongQuestionCount();
    case ACCURACY_RATE:
      return isSetAccuracyRate();
    case RECORD_ID:
      return isSetRecordId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StuAnswerDetail)
      return this.equals((StuAnswerDetail)that);
    return false;
  }

  public boolean equals(StuAnswerDetail that) {
    if (that == null)
      return false;

    boolean this_present_stuId = true;
    boolean that_present_stuId = true;
    if (this_present_stuId || that_present_stuId) {
      if (!(this_present_stuId && that_present_stuId))
        return false;
      if (this.stuId != that.stuId)
        return false;
    }

    boolean this_present_stuName = true && this.isSetStuName();
    boolean that_present_stuName = true && that.isSetStuName();
    if (this_present_stuName || that_present_stuName) {
      if (!(this_present_stuName && that_present_stuName))
        return false;
      if (!this.stuName.equals(that.stuName))
        return false;
    }

    boolean this_present_totalTime = true;
    boolean that_present_totalTime = true;
    if (this_present_totalTime || that_present_totalTime) {
      if (!(this_present_totalTime && that_present_totalTime))
        return false;
      if (this.totalTime != that.totalTime)
        return false;
    }

    boolean this_present_correctQuestionCount = true;
    boolean that_present_correctQuestionCount = true;
    if (this_present_correctQuestionCount || that_present_correctQuestionCount) {
      if (!(this_present_correctQuestionCount && that_present_correctQuestionCount))
        return false;
      if (this.correctQuestionCount != that.correctQuestionCount)
        return false;
    }

    boolean this_present_wrongQuestionCount = true;
    boolean that_present_wrongQuestionCount = true;
    if (this_present_wrongQuestionCount || that_present_wrongQuestionCount) {
      if (!(this_present_wrongQuestionCount && that_present_wrongQuestionCount))
        return false;
      if (this.wrongQuestionCount != that.wrongQuestionCount)
        return false;
    }

    boolean this_present_accuracyRate = true;
    boolean that_present_accuracyRate = true;
    if (this_present_accuracyRate || that_present_accuracyRate) {
      if (!(this_present_accuracyRate && that_present_accuracyRate))
        return false;
      if (this.accuracyRate != that.accuracyRate)
        return false;
    }

    boolean this_present_recordId = true;
    boolean that_present_recordId = true;
    if (this_present_recordId || that_present_recordId) {
      if (!(this_present_recordId && that_present_recordId))
        return false;
      if (this.recordId != that.recordId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stuId = true;
    list.add(present_stuId);
    if (present_stuId)
      list.add(stuId);

    boolean present_stuName = true && (isSetStuName());
    list.add(present_stuName);
    if (present_stuName)
      list.add(stuName);

    boolean present_totalTime = true;
    list.add(present_totalTime);
    if (present_totalTime)
      list.add(totalTime);

    boolean present_correctQuestionCount = true;
    list.add(present_correctQuestionCount);
    if (present_correctQuestionCount)
      list.add(correctQuestionCount);

    boolean present_wrongQuestionCount = true;
    list.add(present_wrongQuestionCount);
    if (present_wrongQuestionCount)
      list.add(wrongQuestionCount);

    boolean present_accuracyRate = true;
    list.add(present_accuracyRate);
    if (present_accuracyRate)
      list.add(accuracyRate);

    boolean present_recordId = true;
    list.add(present_recordId);
    if (present_recordId)
      list.add(recordId);

    return list.hashCode();
  }

  @Override
  public int compareTo(StuAnswerDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStuName()).compareTo(other.isSetStuName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuName, other.stuName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTime()).compareTo(other.isSetTotalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTime, other.totalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectQuestionCount()).compareTo(other.isSetCorrectQuestionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectQuestionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctQuestionCount, other.correctQuestionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrongQuestionCount()).compareTo(other.isSetWrongQuestionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrongQuestionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrongQuestionCount, other.wrongQuestionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccuracyRate()).compareTo(other.isSetAccuracyRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccuracyRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accuracyRate, other.accuracyRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordId()).compareTo(other.isSetRecordId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordId, other.recordId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StuAnswerDetail(");
    boolean first = true;

    sb.append("stuId:");
    sb.append(this.stuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stuName:");
    if (this.stuName == null) {
      sb.append("null");
    } else {
      sb.append(this.stuName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTime:");
    sb.append(this.totalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctQuestionCount:");
    sb.append(this.correctQuestionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wrongQuestionCount:");
    sb.append(this.wrongQuestionCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accuracyRate:");
    sb.append(this.accuracyRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recordId:");
    sb.append(this.recordId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StuAnswerDetailStandardSchemeFactory implements SchemeFactory {
    public StuAnswerDetailStandardScheme getScheme() {
      return new StuAnswerDetailStandardScheme();
    }
  }

  private static class StuAnswerDetailStandardScheme extends StandardScheme<StuAnswerDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StuAnswerDetail struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuId = iprot.readI32();
              struct.setStuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STU_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stuName = iprot.readString();
              struct.setStuNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalTime = iprot.readI32();
              struct.setTotalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CORRECT_QUESTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correctQuestionCount = iprot.readI32();
              struct.setCorrectQuestionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WRONG_QUESTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wrongQuestionCount = iprot.readI32();
              struct.setWrongQuestionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCURACY_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accuracyRate = iprot.readDouble();
              struct.setAccuracyRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordId = iprot.readI32();
              struct.setRecordIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StuAnswerDetail struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STU_ID_FIELD_DESC);
      oprot.writeI32(struct.stuId);
      oprot.writeFieldEnd();
      if (struct.stuName != null) {
        oprot.writeFieldBegin(STU_NAME_FIELD_DESC);
        oprot.writeString(struct.stuName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_TIME_FIELD_DESC);
      oprot.writeI32(struct.totalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_QUESTION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.correctQuestionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRONG_QUESTION_COUNT_FIELD_DESC);
      oprot.writeI32(struct.wrongQuestionCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCURACY_RATE_FIELD_DESC);
      oprot.writeDouble(struct.accuracyRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
      oprot.writeI32(struct.recordId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StuAnswerDetailTupleSchemeFactory implements SchemeFactory {
    public StuAnswerDetailTupleScheme getScheme() {
      return new StuAnswerDetailTupleScheme();
    }
  }

  private static class StuAnswerDetailTupleScheme extends TupleScheme<StuAnswerDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StuAnswerDetail struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStuId()) {
        optionals.set(0);
      }
      if (struct.isSetStuName()) {
        optionals.set(1);
      }
      if (struct.isSetTotalTime()) {
        optionals.set(2);
      }
      if (struct.isSetCorrectQuestionCount()) {
        optionals.set(3);
      }
      if (struct.isSetWrongQuestionCount()) {
        optionals.set(4);
      }
      if (struct.isSetAccuracyRate()) {
        optionals.set(5);
      }
      if (struct.isSetRecordId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStuId()) {
        oprot.writeI32(struct.stuId);
      }
      if (struct.isSetStuName()) {
        oprot.writeString(struct.stuName);
      }
      if (struct.isSetTotalTime()) {
        oprot.writeI32(struct.totalTime);
      }
      if (struct.isSetCorrectQuestionCount()) {
        oprot.writeI32(struct.correctQuestionCount);
      }
      if (struct.isSetWrongQuestionCount()) {
        oprot.writeI32(struct.wrongQuestionCount);
      }
      if (struct.isSetAccuracyRate()) {
        oprot.writeDouble(struct.accuracyRate);
      }
      if (struct.isSetRecordId()) {
        oprot.writeI32(struct.recordId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StuAnswerDetail struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.stuId = iprot.readI32();
        struct.setStuIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stuName = iprot.readString();
        struct.setStuNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalTime = iprot.readI32();
        struct.setTotalTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.correctQuestionCount = iprot.readI32();
        struct.setCorrectQuestionCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.wrongQuestionCount = iprot.readI32();
        struct.setWrongQuestionCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accuracyRate = iprot.readDouble();
        struct.setAccuracyRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recordId = iprot.readI32();
        struct.setRecordIdIsSet(true);
      }
    }
  }

}

