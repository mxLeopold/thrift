/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-28")
public class Option implements org.apache.thrift.TBase<Option, Option._Fields>, java.io.Serializable, Cloneable, Comparable<Option> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Option");

  private static final org.apache.thrift.protocol.TField RIGHT_ANSWER_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("rightAnswerFlag", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_ORDER_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortOrderStr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPTIONCOL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("optioncolContent", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OptionTupleSchemeFactory());
  }

  public int rightAnswerFlag; // required
  public String sortOrderStr; // required
  public String optioncolContent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RIGHT_ANSWER_FLAG((short)1, "rightAnswerFlag"),
    SORT_ORDER_STR((short)2, "sortOrderStr"),
    OPTIONCOL_CONTENT((short)3, "optioncolContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RIGHT_ANSWER_FLAG
          return RIGHT_ANSWER_FLAG;
        case 2: // SORT_ORDER_STR
          return SORT_ORDER_STR;
        case 3: // OPTIONCOL_CONTENT
          return OPTIONCOL_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RIGHTANSWERFLAG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RIGHT_ANSWER_FLAG, new org.apache.thrift.meta_data.FieldMetaData("rightAnswerFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_ORDER_STR, new org.apache.thrift.meta_data.FieldMetaData("sortOrderStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTIONCOL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("optioncolContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Option.class, metaDataMap);
  }

  public Option() {
  }

  public Option(
    int rightAnswerFlag,
    String sortOrderStr,
    String optioncolContent)
  {
    this();
    this.rightAnswerFlag = rightAnswerFlag;
    setRightAnswerFlagIsSet(true);
    this.sortOrderStr = sortOrderStr;
    this.optioncolContent = optioncolContent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Option(Option other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rightAnswerFlag = other.rightAnswerFlag;
    if (other.isSetSortOrderStr()) {
      this.sortOrderStr = other.sortOrderStr;
    }
    if (other.isSetOptioncolContent()) {
      this.optioncolContent = other.optioncolContent;
    }
  }

  public Option deepCopy() {
    return new Option(this);
  }

  @Override
  public void clear() {
    setRightAnswerFlagIsSet(false);
    this.rightAnswerFlag = 0;
    this.sortOrderStr = null;
    this.optioncolContent = null;
  }

  public int getRightAnswerFlag() {
    return this.rightAnswerFlag;
  }

  public Option setRightAnswerFlag(int rightAnswerFlag) {
    this.rightAnswerFlag = rightAnswerFlag;
    setRightAnswerFlagIsSet(true);
    return this;
  }

  public void unsetRightAnswerFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHTANSWERFLAG_ISSET_ID);
  }

  /** Returns true if field rightAnswerFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetRightAnswerFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHTANSWERFLAG_ISSET_ID);
  }

  public void setRightAnswerFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHTANSWERFLAG_ISSET_ID, value);
  }

  public String getSortOrderStr() {
    return this.sortOrderStr;
  }

  public Option setSortOrderStr(String sortOrderStr) {
    this.sortOrderStr = sortOrderStr;
    return this;
  }

  public void unsetSortOrderStr() {
    this.sortOrderStr = null;
  }

  /** Returns true if field sortOrderStr is set (has been assigned a value) and false otherwise */
  public boolean isSetSortOrderStr() {
    return this.sortOrderStr != null;
  }

  public void setSortOrderStrIsSet(boolean value) {
    if (!value) {
      this.sortOrderStr = null;
    }
  }

  public String getOptioncolContent() {
    return this.optioncolContent;
  }

  public Option setOptioncolContent(String optioncolContent) {
    this.optioncolContent = optioncolContent;
    return this;
  }

  public void unsetOptioncolContent() {
    this.optioncolContent = null;
  }

  /** Returns true if field optioncolContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOptioncolContent() {
    return this.optioncolContent != null;
  }

  public void setOptioncolContentIsSet(boolean value) {
    if (!value) {
      this.optioncolContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RIGHT_ANSWER_FLAG:
      if (value == null) {
        unsetRightAnswerFlag();
      } else {
        setRightAnswerFlag((Integer)value);
      }
      break;

    case SORT_ORDER_STR:
      if (value == null) {
        unsetSortOrderStr();
      } else {
        setSortOrderStr((String)value);
      }
      break;

    case OPTIONCOL_CONTENT:
      if (value == null) {
        unsetOptioncolContent();
      } else {
        setOptioncolContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RIGHT_ANSWER_FLAG:
      return getRightAnswerFlag();

    case SORT_ORDER_STR:
      return getSortOrderStr();

    case OPTIONCOL_CONTENT:
      return getOptioncolContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RIGHT_ANSWER_FLAG:
      return isSetRightAnswerFlag();
    case SORT_ORDER_STR:
      return isSetSortOrderStr();
    case OPTIONCOL_CONTENT:
      return isSetOptioncolContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Option)
      return this.equals((Option)that);
    return false;
  }

  public boolean equals(Option that) {
    if (that == null)
      return false;

    boolean this_present_rightAnswerFlag = true;
    boolean that_present_rightAnswerFlag = true;
    if (this_present_rightAnswerFlag || that_present_rightAnswerFlag) {
      if (!(this_present_rightAnswerFlag && that_present_rightAnswerFlag))
        return false;
      if (this.rightAnswerFlag != that.rightAnswerFlag)
        return false;
    }

    boolean this_present_sortOrderStr = true && this.isSetSortOrderStr();
    boolean that_present_sortOrderStr = true && that.isSetSortOrderStr();
    if (this_present_sortOrderStr || that_present_sortOrderStr) {
      if (!(this_present_sortOrderStr && that_present_sortOrderStr))
        return false;
      if (!this.sortOrderStr.equals(that.sortOrderStr))
        return false;
    }

    boolean this_present_optioncolContent = true && this.isSetOptioncolContent();
    boolean that_present_optioncolContent = true && that.isSetOptioncolContent();
    if (this_present_optioncolContent || that_present_optioncolContent) {
      if (!(this_present_optioncolContent && that_present_optioncolContent))
        return false;
      if (!this.optioncolContent.equals(that.optioncolContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rightAnswerFlag = true;
    list.add(present_rightAnswerFlag);
    if (present_rightAnswerFlag)
      list.add(rightAnswerFlag);

    boolean present_sortOrderStr = true && (isSetSortOrderStr());
    list.add(present_sortOrderStr);
    if (present_sortOrderStr)
      list.add(sortOrderStr);

    boolean present_optioncolContent = true && (isSetOptioncolContent());
    list.add(present_optioncolContent);
    if (present_optioncolContent)
      list.add(optioncolContent);

    return list.hashCode();
  }

  @Override
  public int compareTo(Option other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRightAnswerFlag()).compareTo(other.isSetRightAnswerFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightAnswerFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightAnswerFlag, other.rightAnswerFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortOrderStr()).compareTo(other.isSetSortOrderStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortOrderStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortOrderStr, other.sortOrderStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptioncolContent()).compareTo(other.isSetOptioncolContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptioncolContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optioncolContent, other.optioncolContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Option(");
    boolean first = true;

    sb.append("rightAnswerFlag:");
    sb.append(this.rightAnswerFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortOrderStr:");
    if (this.sortOrderStr == null) {
      sb.append("null");
    } else {
      sb.append(this.sortOrderStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optioncolContent:");
    if (this.optioncolContent == null) {
      sb.append("null");
    } else {
      sb.append(this.optioncolContent);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OptionStandardSchemeFactory implements SchemeFactory {
    public OptionStandardScheme getScheme() {
      return new OptionStandardScheme();
    }
  }

  private static class OptionStandardScheme extends StandardScheme<Option> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Option struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RIGHT_ANSWER_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rightAnswerFlag = iprot.readI32();
              struct.setRightAnswerFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_ORDER_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortOrderStr = iprot.readString();
              struct.setSortOrderStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPTIONCOL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.optioncolContent = iprot.readString();
              struct.setOptioncolContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Option struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RIGHT_ANSWER_FLAG_FIELD_DESC);
      oprot.writeI32(struct.rightAnswerFlag);
      oprot.writeFieldEnd();
      if (struct.sortOrderStr != null) {
        oprot.writeFieldBegin(SORT_ORDER_STR_FIELD_DESC);
        oprot.writeString(struct.sortOrderStr);
        oprot.writeFieldEnd();
      }
      if (struct.optioncolContent != null) {
        oprot.writeFieldBegin(OPTIONCOL_CONTENT_FIELD_DESC);
        oprot.writeString(struct.optioncolContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OptionTupleSchemeFactory implements SchemeFactory {
    public OptionTupleScheme getScheme() {
      return new OptionTupleScheme();
    }
  }

  private static class OptionTupleScheme extends TupleScheme<Option> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Option struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRightAnswerFlag()) {
        optionals.set(0);
      }
      if (struct.isSetSortOrderStr()) {
        optionals.set(1);
      }
      if (struct.isSetOptioncolContent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRightAnswerFlag()) {
        oprot.writeI32(struct.rightAnswerFlag);
      }
      if (struct.isSetSortOrderStr()) {
        oprot.writeString(struct.sortOrderStr);
      }
      if (struct.isSetOptioncolContent()) {
        oprot.writeString(struct.optioncolContent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Option struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.rightAnswerFlag = iprot.readI32();
        struct.setRightAnswerFlagIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sortOrderStr = iprot.readString();
        struct.setSortOrderStrIsSet(true);
      }
      if (incoming.get(2)) {
        struct.optioncolContent = iprot.readString();
        struct.setOptioncolContentIsSet(true);
      }
    }
  }

}

