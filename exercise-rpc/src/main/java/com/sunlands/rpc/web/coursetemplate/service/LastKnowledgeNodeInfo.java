/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-29")
public class LastKnowledgeNodeInfo implements org.apache.thrift.TBase<LastKnowledgeNodeInfo, LastKnowledgeNodeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LastKnowledgeNodeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LastKnowledgeNodeInfo");

  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_LEVEL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLevelFlag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_LEVEL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLevelIds", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LastKnowledgeNodeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LastKnowledgeNodeInfoTupleSchemeFactory());
  }

  public int knowledgeNodeId; // required
  public String knowledgeNodeName; // required
  public int level; // required
  public int lastLevelFlag; // required
  public String lastLevelIds; // required
  public int frequency; // required
  public List<LastKnowledgeNodeInfo> knowledgeNodeList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KNOWLEDGE_NODE_ID((short)1, "knowledgeNodeId"),
    KNOWLEDGE_NODE_NAME((short)2, "knowledgeNodeName"),
    LEVEL((short)3, "level"),
    LAST_LEVEL_FLAG((short)4, "lastLevelFlag"),
    LAST_LEVEL_IDS((short)5, "lastLevelIds"),
    FREQUENCY((short)6, "frequency"),
    KNOWLEDGE_NODE_LIST((short)7, "knowledgeNodeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KNOWLEDGE_NODE_ID
          return KNOWLEDGE_NODE_ID;
        case 2: // KNOWLEDGE_NODE_NAME
          return KNOWLEDGE_NODE_NAME;
        case 3: // LEVEL
          return LEVEL;
        case 4: // LAST_LEVEL_FLAG
          return LAST_LEVEL_FLAG;
        case 5: // LAST_LEVEL_IDS
          return LAST_LEVEL_IDS;
        case 6: // FREQUENCY
          return FREQUENCY;
        case 7: // KNOWLEDGE_NODE_LIST
          return KNOWLEDGE_NODE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KNOWLEDGENODEID_ISSET_ID = 0;
  private static final int __LEVEL_ISSET_ID = 1;
  private static final int __LASTLEVELFLAG_ISSET_ID = 2;
  private static final int __FREQUENCY_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KNOWLEDGE_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNOWLEDGE_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LEVEL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("lastLevelFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LEVEL_IDS, new org.apache.thrift.meta_data.FieldMetaData("lastLevelIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNOWLEDGE_NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "LastKnowledgeNodeInfo"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LastKnowledgeNodeInfo.class, metaDataMap);
  }

  public LastKnowledgeNodeInfo() {
  }

  public LastKnowledgeNodeInfo(
    int knowledgeNodeId,
    String knowledgeNodeName,
    int level,
    int lastLevelFlag,
    String lastLevelIds,
    int frequency,
    List<LastKnowledgeNodeInfo> knowledgeNodeList)
  {
    this();
    this.knowledgeNodeId = knowledgeNodeId;
    setKnowledgeNodeIdIsSet(true);
    this.knowledgeNodeName = knowledgeNodeName;
    this.level = level;
    setLevelIsSet(true);
    this.lastLevelFlag = lastLevelFlag;
    setLastLevelFlagIsSet(true);
    this.lastLevelIds = lastLevelIds;
    this.frequency = frequency;
    setFrequencyIsSet(true);
    this.knowledgeNodeList = knowledgeNodeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LastKnowledgeNodeInfo(LastKnowledgeNodeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.knowledgeNodeId = other.knowledgeNodeId;
    if (other.isSetKnowledgeNodeName()) {
      this.knowledgeNodeName = other.knowledgeNodeName;
    }
    this.level = other.level;
    this.lastLevelFlag = other.lastLevelFlag;
    if (other.isSetLastLevelIds()) {
      this.lastLevelIds = other.lastLevelIds;
    }
    this.frequency = other.frequency;
    if (other.isSetKnowledgeNodeList()) {
      List<LastKnowledgeNodeInfo> __this__knowledgeNodeList = new ArrayList<LastKnowledgeNodeInfo>(other.knowledgeNodeList.size());
      for (LastKnowledgeNodeInfo other_element : other.knowledgeNodeList) {
        __this__knowledgeNodeList.add(other_element);
      }
      this.knowledgeNodeList = __this__knowledgeNodeList;
    }
  }

  public LastKnowledgeNodeInfo deepCopy() {
    return new LastKnowledgeNodeInfo(this);
  }

  @Override
  public void clear() {
    setKnowledgeNodeIdIsSet(false);
    this.knowledgeNodeId = 0;
    this.knowledgeNodeName = null;
    setLevelIsSet(false);
    this.level = 0;
    setLastLevelFlagIsSet(false);
    this.lastLevelFlag = 0;
    this.lastLevelIds = null;
    setFrequencyIsSet(false);
    this.frequency = 0;
    this.knowledgeNodeList = null;
  }

  public int getKnowledgeNodeId() {
    return this.knowledgeNodeId;
  }

  public LastKnowledgeNodeInfo setKnowledgeNodeId(int knowledgeNodeId) {
    this.knowledgeNodeId = knowledgeNodeId;
    setKnowledgeNodeIdIsSet(true);
    return this;
  }

  public void unsetKnowledgeNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID);
  }

  /** Returns true if field knowledgeNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID);
  }

  public void setKnowledgeNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID, value);
  }

  public String getKnowledgeNodeName() {
    return this.knowledgeNodeName;
  }

  public LastKnowledgeNodeInfo setKnowledgeNodeName(String knowledgeNodeName) {
    this.knowledgeNodeName = knowledgeNodeName;
    return this;
  }

  public void unsetKnowledgeNodeName() {
    this.knowledgeNodeName = null;
  }

  /** Returns true if field knowledgeNodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeName() {
    return this.knowledgeNodeName != null;
  }

  public void setKnowledgeNodeNameIsSet(boolean value) {
    if (!value) {
      this.knowledgeNodeName = null;
    }
  }

  public int getLevel() {
    return this.level;
  }

  public LastKnowledgeNodeInfo setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getLastLevelFlag() {
    return this.lastLevelFlag;
  }

  public LastKnowledgeNodeInfo setLastLevelFlag(int lastLevelFlag) {
    this.lastLevelFlag = lastLevelFlag;
    setLastLevelFlagIsSet(true);
    return this;
  }

  public void unsetLastLevelFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLEVELFLAG_ISSET_ID);
  }

  /** Returns true if field lastLevelFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLevelFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLEVELFLAG_ISSET_ID);
  }

  public void setLastLevelFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLEVELFLAG_ISSET_ID, value);
  }

  public String getLastLevelIds() {
    return this.lastLevelIds;
  }

  public LastKnowledgeNodeInfo setLastLevelIds(String lastLevelIds) {
    this.lastLevelIds = lastLevelIds;
    return this;
  }

  public void unsetLastLevelIds() {
    this.lastLevelIds = null;
  }

  /** Returns true if field lastLevelIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLevelIds() {
    return this.lastLevelIds != null;
  }

  public void setLastLevelIdsIsSet(boolean value) {
    if (!value) {
      this.lastLevelIds = null;
    }
  }

  public int getFrequency() {
    return this.frequency;
  }

  public LastKnowledgeNodeInfo setFrequency(int frequency) {
    this.frequency = frequency;
    setFrequencyIsSet(true);
    return this;
  }

  public void unsetFrequency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return EncodingUtils.testBit(__isset_bitfield, __FREQUENCY_ISSET_ID);
  }

  public void setFrequencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREQUENCY_ISSET_ID, value);
  }

  public int getKnowledgeNodeListSize() {
    return (this.knowledgeNodeList == null) ? 0 : this.knowledgeNodeList.size();
  }

  public java.util.Iterator<LastKnowledgeNodeInfo> getKnowledgeNodeListIterator() {
    return (this.knowledgeNodeList == null) ? null : this.knowledgeNodeList.iterator();
  }

  public void addToKnowledgeNodeList(LastKnowledgeNodeInfo elem) {
    if (this.knowledgeNodeList == null) {
      this.knowledgeNodeList = new ArrayList<LastKnowledgeNodeInfo>();
    }
    this.knowledgeNodeList.add(elem);
  }

  public List<LastKnowledgeNodeInfo> getKnowledgeNodeList() {
    return this.knowledgeNodeList;
  }

  public LastKnowledgeNodeInfo setKnowledgeNodeList(List<LastKnowledgeNodeInfo> knowledgeNodeList) {
    this.knowledgeNodeList = knowledgeNodeList;
    return this;
  }

  public void unsetKnowledgeNodeList() {
    this.knowledgeNodeList = null;
  }

  /** Returns true if field knowledgeNodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeList() {
    return this.knowledgeNodeList != null;
  }

  public void setKnowledgeNodeListIsSet(boolean value) {
    if (!value) {
      this.knowledgeNodeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KNOWLEDGE_NODE_ID:
      if (value == null) {
        unsetKnowledgeNodeId();
      } else {
        setKnowledgeNodeId((Integer)value);
      }
      break;

    case KNOWLEDGE_NODE_NAME:
      if (value == null) {
        unsetKnowledgeNodeName();
      } else {
        setKnowledgeNodeName((String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case LAST_LEVEL_FLAG:
      if (value == null) {
        unsetLastLevelFlag();
      } else {
        setLastLevelFlag((Integer)value);
      }
      break;

    case LAST_LEVEL_IDS:
      if (value == null) {
        unsetLastLevelIds();
      } else {
        setLastLevelIds((String)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((Integer)value);
      }
      break;

    case KNOWLEDGE_NODE_LIST:
      if (value == null) {
        unsetKnowledgeNodeList();
      } else {
        setKnowledgeNodeList((List<LastKnowledgeNodeInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KNOWLEDGE_NODE_ID:
      return getKnowledgeNodeId();

    case KNOWLEDGE_NODE_NAME:
      return getKnowledgeNodeName();

    case LEVEL:
      return getLevel();

    case LAST_LEVEL_FLAG:
      return getLastLevelFlag();

    case LAST_LEVEL_IDS:
      return getLastLevelIds();

    case FREQUENCY:
      return getFrequency();

    case KNOWLEDGE_NODE_LIST:
      return getKnowledgeNodeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KNOWLEDGE_NODE_ID:
      return isSetKnowledgeNodeId();
    case KNOWLEDGE_NODE_NAME:
      return isSetKnowledgeNodeName();
    case LEVEL:
      return isSetLevel();
    case LAST_LEVEL_FLAG:
      return isSetLastLevelFlag();
    case LAST_LEVEL_IDS:
      return isSetLastLevelIds();
    case FREQUENCY:
      return isSetFrequency();
    case KNOWLEDGE_NODE_LIST:
      return isSetKnowledgeNodeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LastKnowledgeNodeInfo)
      return this.equals((LastKnowledgeNodeInfo)that);
    return false;
  }

  public boolean equals(LastKnowledgeNodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_knowledgeNodeId = true;
    boolean that_present_knowledgeNodeId = true;
    if (this_present_knowledgeNodeId || that_present_knowledgeNodeId) {
      if (!(this_present_knowledgeNodeId && that_present_knowledgeNodeId))
        return false;
      if (this.knowledgeNodeId != that.knowledgeNodeId)
        return false;
    }

    boolean this_present_knowledgeNodeName = true && this.isSetKnowledgeNodeName();
    boolean that_present_knowledgeNodeName = true && that.isSetKnowledgeNodeName();
    if (this_present_knowledgeNodeName || that_present_knowledgeNodeName) {
      if (!(this_present_knowledgeNodeName && that_present_knowledgeNodeName))
        return false;
      if (!this.knowledgeNodeName.equals(that.knowledgeNodeName))
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_lastLevelFlag = true;
    boolean that_present_lastLevelFlag = true;
    if (this_present_lastLevelFlag || that_present_lastLevelFlag) {
      if (!(this_present_lastLevelFlag && that_present_lastLevelFlag))
        return false;
      if (this.lastLevelFlag != that.lastLevelFlag)
        return false;
    }

    boolean this_present_lastLevelIds = true && this.isSetLastLevelIds();
    boolean that_present_lastLevelIds = true && that.isSetLastLevelIds();
    if (this_present_lastLevelIds || that_present_lastLevelIds) {
      if (!(this_present_lastLevelIds && that_present_lastLevelIds))
        return false;
      if (!this.lastLevelIds.equals(that.lastLevelIds))
        return false;
    }

    boolean this_present_frequency = true;
    boolean that_present_frequency = true;
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (this.frequency != that.frequency)
        return false;
    }

    boolean this_present_knowledgeNodeList = true && this.isSetKnowledgeNodeList();
    boolean that_present_knowledgeNodeList = true && that.isSetKnowledgeNodeList();
    if (this_present_knowledgeNodeList || that_present_knowledgeNodeList) {
      if (!(this_present_knowledgeNodeList && that_present_knowledgeNodeList))
        return false;
      if (!this.knowledgeNodeList.equals(that.knowledgeNodeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_knowledgeNodeId = true;
    list.add(present_knowledgeNodeId);
    if (present_knowledgeNodeId)
      list.add(knowledgeNodeId);

    boolean present_knowledgeNodeName = true && (isSetKnowledgeNodeName());
    list.add(present_knowledgeNodeName);
    if (present_knowledgeNodeName)
      list.add(knowledgeNodeName);

    boolean present_level = true;
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_lastLevelFlag = true;
    list.add(present_lastLevelFlag);
    if (present_lastLevelFlag)
      list.add(lastLevelFlag);

    boolean present_lastLevelIds = true && (isSetLastLevelIds());
    list.add(present_lastLevelIds);
    if (present_lastLevelIds)
      list.add(lastLevelIds);

    boolean present_frequency = true;
    list.add(present_frequency);
    if (present_frequency)
      list.add(frequency);

    boolean present_knowledgeNodeList = true && (isSetKnowledgeNodeList());
    list.add(present_knowledgeNodeList);
    if (present_knowledgeNodeList)
      list.add(knowledgeNodeList);

    return list.hashCode();
  }

  @Override
  public int compareTo(LastKnowledgeNodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKnowledgeNodeId()).compareTo(other.isSetKnowledgeNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeId, other.knowledgeNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeNodeName()).compareTo(other.isSetKnowledgeNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeName, other.knowledgeNodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLevelFlag()).compareTo(other.isSetLastLevelFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLevelFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLevelFlag, other.lastLevelFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLevelIds()).compareTo(other.isSetLastLevelIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLevelIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLevelIds, other.lastLevelIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeNodeList()).compareTo(other.isSetKnowledgeNodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeList, other.knowledgeNodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LastKnowledgeNodeInfo(");
    boolean first = true;

    sb.append("knowledgeNodeId:");
    sb.append(this.knowledgeNodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeNodeName:");
    if (this.knowledgeNodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledgeNodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLevelFlag:");
    sb.append(this.lastLevelFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastLevelIds:");
    if (this.lastLevelIds == null) {
      sb.append("null");
    } else {
      sb.append(this.lastLevelIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequency:");
    sb.append(this.frequency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeNodeList:");
    if (this.knowledgeNodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledgeNodeList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LastKnowledgeNodeInfoStandardSchemeFactory implements SchemeFactory {
    public LastKnowledgeNodeInfoStandardScheme getScheme() {
      return new LastKnowledgeNodeInfoStandardScheme();
    }
  }

  private static class LastKnowledgeNodeInfoStandardScheme extends StandardScheme<LastKnowledgeNodeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LastKnowledgeNodeInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KNOWLEDGE_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knowledgeNodeId = iprot.readI32();
              struct.setKnowledgeNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KNOWLEDGE_NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.knowledgeNodeName = iprot.readString();
              struct.setKnowledgeNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_LEVEL_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastLevelFlag = iprot.readI32();
              struct.setLastLevelFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_LEVEL_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastLevelIds = iprot.readString();
              struct.setLastLevelIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequency = iprot.readI32();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KNOWLEDGE_NODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.knowledgeNodeList = new ArrayList<LastKnowledgeNodeInfo>(_list40.size);
                LastKnowledgeNodeInfo _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new LastKnowledgeNodeInfo();
                  _elem41.read(iprot);
                  struct.knowledgeNodeList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setKnowledgeNodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LastKnowledgeNodeInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KNOWLEDGE_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.knowledgeNodeId);
      oprot.writeFieldEnd();
      if (struct.knowledgeNodeName != null) {
        oprot.writeFieldBegin(KNOWLEDGE_NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.knowledgeNodeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_LEVEL_FLAG_FIELD_DESC);
      oprot.writeI32(struct.lastLevelFlag);
      oprot.writeFieldEnd();
      if (struct.lastLevelIds != null) {
        oprot.writeFieldBegin(LAST_LEVEL_IDS_FIELD_DESC);
        oprot.writeString(struct.lastLevelIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
      oprot.writeI32(struct.frequency);
      oprot.writeFieldEnd();
      if (struct.knowledgeNodeList != null) {
        oprot.writeFieldBegin(KNOWLEDGE_NODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.knowledgeNodeList.size()));
          for (LastKnowledgeNodeInfo _iter43 : struct.knowledgeNodeList)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LastKnowledgeNodeInfoTupleSchemeFactory implements SchemeFactory {
    public LastKnowledgeNodeInfoTupleScheme getScheme() {
      return new LastKnowledgeNodeInfoTupleScheme();
    }
  }

  private static class LastKnowledgeNodeInfoTupleScheme extends TupleScheme<LastKnowledgeNodeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LastKnowledgeNodeInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKnowledgeNodeId()) {
        optionals.set(0);
      }
      if (struct.isSetKnowledgeNodeName()) {
        optionals.set(1);
      }
      if (struct.isSetLevel()) {
        optionals.set(2);
      }
      if (struct.isSetLastLevelFlag()) {
        optionals.set(3);
      }
      if (struct.isSetLastLevelIds()) {
        optionals.set(4);
      }
      if (struct.isSetFrequency()) {
        optionals.set(5);
      }
      if (struct.isSetKnowledgeNodeList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetKnowledgeNodeId()) {
        oprot.writeI32(struct.knowledgeNodeId);
      }
      if (struct.isSetKnowledgeNodeName()) {
        oprot.writeString(struct.knowledgeNodeName);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetLastLevelFlag()) {
        oprot.writeI32(struct.lastLevelFlag);
      }
      if (struct.isSetLastLevelIds()) {
        oprot.writeString(struct.lastLevelIds);
      }
      if (struct.isSetFrequency()) {
        oprot.writeI32(struct.frequency);
      }
      if (struct.isSetKnowledgeNodeList()) {
        {
          oprot.writeI32(struct.knowledgeNodeList.size());
          for (LastKnowledgeNodeInfo _iter44 : struct.knowledgeNodeList)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LastKnowledgeNodeInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.knowledgeNodeId = iprot.readI32();
        struct.setKnowledgeNodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.knowledgeNodeName = iprot.readString();
        struct.setKnowledgeNodeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastLevelFlag = iprot.readI32();
        struct.setLastLevelFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastLevelIds = iprot.readString();
        struct.setLastLevelIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.frequency = iprot.readI32();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.knowledgeNodeList = new ArrayList<LastKnowledgeNodeInfo>(_list45.size);
          LastKnowledgeNodeInfo _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new LastKnowledgeNodeInfo();
            _elem46.read(iprot);
            struct.knowledgeNodeList.add(_elem46);
          }
        }
        struct.setKnowledgeNodeListIsSet(true);
      }
    }
  }

}

