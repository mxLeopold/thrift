/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-27")
public class UnitsStatistic implements org.apache.thrift.TBase<UnitsStatistic, UnitsStatistic._Fields>, java.io.Serializable, Cloneable, Comparable<UnitsStatistic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnitsStatistic");

  private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEACH_UNIT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("teachUnitIds", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HOMEWORK_SCORE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkScoreRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField HOMEWORK_COMPLETE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkCompleteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField QUIZZES_SCORE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesScoreRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField QUIZZES_COMPLETE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesCompleteRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UnitsStatisticStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UnitsStatisticTupleSchemeFactory());
  }

  public int roundId; // required
  public String teachUnitIds; // required
  public int teacherId; // required
  public double homeworkScoreRate; // required
  public double homeworkCompleteRate; // required
  public double quizzesScoreRate; // required
  public double quizzesCompleteRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUND_ID((short)1, "roundId"),
    TEACH_UNIT_IDS((short)2, "teachUnitIds"),
    TEACHER_ID((short)3, "teacherId"),
    HOMEWORK_SCORE_RATE((short)4, "homeworkScoreRate"),
    HOMEWORK_COMPLETE_RATE((short)5, "homeworkCompleteRate"),
    QUIZZES_SCORE_RATE((short)6, "quizzesScoreRate"),
    QUIZZES_COMPLETE_RATE((short)7, "quizzesCompleteRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUND_ID
          return ROUND_ID;
        case 2: // TEACH_UNIT_IDS
          return TEACH_UNIT_IDS;
        case 3: // TEACHER_ID
          return TEACHER_ID;
        case 4: // HOMEWORK_SCORE_RATE
          return HOMEWORK_SCORE_RATE;
        case 5: // HOMEWORK_COMPLETE_RATE
          return HOMEWORK_COMPLETE_RATE;
        case 6: // QUIZZES_SCORE_RATE
          return QUIZZES_SCORE_RATE;
        case 7: // QUIZZES_COMPLETE_RATE
          return QUIZZES_COMPLETE_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROUNDID_ISSET_ID = 0;
  private static final int __TEACHERID_ISSET_ID = 1;
  private static final int __HOMEWORKSCORERATE_ISSET_ID = 2;
  private static final int __HOMEWORKCOMPLETERATE_ISSET_ID = 3;
  private static final int __QUIZZESSCORERATE_ISSET_ID = 4;
  private static final int __QUIZZESCOMPLETERATE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEACH_UNIT_IDS, new org.apache.thrift.meta_data.FieldMetaData("teachUnitIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOMEWORK_SCORE_RATE, new org.apache.thrift.meta_data.FieldMetaData("homeworkScoreRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOMEWORK_COMPLETE_RATE, new org.apache.thrift.meta_data.FieldMetaData("homeworkCompleteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUIZZES_SCORE_RATE, new org.apache.thrift.meta_data.FieldMetaData("quizzesScoreRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUIZZES_COMPLETE_RATE, new org.apache.thrift.meta_data.FieldMetaData("quizzesCompleteRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnitsStatistic.class, metaDataMap);
  }

  public UnitsStatistic() {
  }

  public UnitsStatistic(
    int roundId,
    String teachUnitIds,
    int teacherId,
    double homeworkScoreRate,
    double homeworkCompleteRate,
    double quizzesScoreRate,
    double quizzesCompleteRate)
  {
    this();
    this.roundId = roundId;
    setRoundIdIsSet(true);
    this.teachUnitIds = teachUnitIds;
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.homeworkScoreRate = homeworkScoreRate;
    setHomeworkScoreRateIsSet(true);
    this.homeworkCompleteRate = homeworkCompleteRate;
    setHomeworkCompleteRateIsSet(true);
    this.quizzesScoreRate = quizzesScoreRate;
    setQuizzesScoreRateIsSet(true);
    this.quizzesCompleteRate = quizzesCompleteRate;
    setQuizzesCompleteRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UnitsStatistic(UnitsStatistic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.roundId = other.roundId;
    if (other.isSetTeachUnitIds()) {
      this.teachUnitIds = other.teachUnitIds;
    }
    this.teacherId = other.teacherId;
    this.homeworkScoreRate = other.homeworkScoreRate;
    this.homeworkCompleteRate = other.homeworkCompleteRate;
    this.quizzesScoreRate = other.quizzesScoreRate;
    this.quizzesCompleteRate = other.quizzesCompleteRate;
  }

  public UnitsStatistic deepCopy() {
    return new UnitsStatistic(this);
  }

  @Override
  public void clear() {
    setRoundIdIsSet(false);
    this.roundId = 0;
    this.teachUnitIds = null;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    setHomeworkScoreRateIsSet(false);
    this.homeworkScoreRate = 0.0;
    setHomeworkCompleteRateIsSet(false);
    this.homeworkCompleteRate = 0.0;
    setQuizzesScoreRateIsSet(false);
    this.quizzesScoreRate = 0.0;
    setQuizzesCompleteRateIsSet(false);
    this.quizzesCompleteRate = 0.0;
  }

  public int getRoundId() {
    return this.roundId;
  }

  public UnitsStatistic setRoundId(int roundId) {
    this.roundId = roundId;
    setRoundIdIsSet(true);
    return this;
  }

  public void unsetRoundId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  public void setRoundIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
  }

  public String getTeachUnitIds() {
    return this.teachUnitIds;
  }

  public UnitsStatistic setTeachUnitIds(String teachUnitIds) {
    this.teachUnitIds = teachUnitIds;
    return this;
  }

  public void unsetTeachUnitIds() {
    this.teachUnitIds = null;
  }

  /** Returns true if field teachUnitIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachUnitIds() {
    return this.teachUnitIds != null;
  }

  public void setTeachUnitIdsIsSet(boolean value) {
    if (!value) {
      this.teachUnitIds = null;
    }
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public UnitsStatistic setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public double getHomeworkScoreRate() {
    return this.homeworkScoreRate;
  }

  public UnitsStatistic setHomeworkScoreRate(double homeworkScoreRate) {
    this.homeworkScoreRate = homeworkScoreRate;
    setHomeworkScoreRateIsSet(true);
    return this;
  }

  public void unsetHomeworkScoreRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKSCORERATE_ISSET_ID);
  }

  /** Returns true if field homeworkScoreRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkScoreRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKSCORERATE_ISSET_ID);
  }

  public void setHomeworkScoreRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKSCORERATE_ISSET_ID, value);
  }

  public double getHomeworkCompleteRate() {
    return this.homeworkCompleteRate;
  }

  public UnitsStatistic setHomeworkCompleteRate(double homeworkCompleteRate) {
    this.homeworkCompleteRate = homeworkCompleteRate;
    setHomeworkCompleteRateIsSet(true);
    return this;
  }

  public void unsetHomeworkCompleteRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKCOMPLETERATE_ISSET_ID);
  }

  /** Returns true if field homeworkCompleteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkCompleteRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKCOMPLETERATE_ISSET_ID);
  }

  public void setHomeworkCompleteRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKCOMPLETERATE_ISSET_ID, value);
  }

  public double getQuizzesScoreRate() {
    return this.quizzesScoreRate;
  }

  public UnitsStatistic setQuizzesScoreRate(double quizzesScoreRate) {
    this.quizzesScoreRate = quizzesScoreRate;
    setQuizzesScoreRateIsSet(true);
    return this;
  }

  public void unsetQuizzesScoreRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESSCORERATE_ISSET_ID);
  }

  /** Returns true if field quizzesScoreRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesScoreRate() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESSCORERATE_ISSET_ID);
  }

  public void setQuizzesScoreRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESSCORERATE_ISSET_ID, value);
  }

  public double getQuizzesCompleteRate() {
    return this.quizzesCompleteRate;
  }

  public UnitsStatistic setQuizzesCompleteRate(double quizzesCompleteRate) {
    this.quizzesCompleteRate = quizzesCompleteRate;
    setQuizzesCompleteRateIsSet(true);
    return this;
  }

  public void unsetQuizzesCompleteRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESCOMPLETERATE_ISSET_ID);
  }

  /** Returns true if field quizzesCompleteRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesCompleteRate() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESCOMPLETERATE_ISSET_ID);
  }

  public void setQuizzesCompleteRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESCOMPLETERATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROUND_ID:
      if (value == null) {
        unsetRoundId();
      } else {
        setRoundId((Integer)value);
      }
      break;

    case TEACH_UNIT_IDS:
      if (value == null) {
        unsetTeachUnitIds();
      } else {
        setTeachUnitIds((String)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case HOMEWORK_SCORE_RATE:
      if (value == null) {
        unsetHomeworkScoreRate();
      } else {
        setHomeworkScoreRate((Double)value);
      }
      break;

    case HOMEWORK_COMPLETE_RATE:
      if (value == null) {
        unsetHomeworkCompleteRate();
      } else {
        setHomeworkCompleteRate((Double)value);
      }
      break;

    case QUIZZES_SCORE_RATE:
      if (value == null) {
        unsetQuizzesScoreRate();
      } else {
        setQuizzesScoreRate((Double)value);
      }
      break;

    case QUIZZES_COMPLETE_RATE:
      if (value == null) {
        unsetQuizzesCompleteRate();
      } else {
        setQuizzesCompleteRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUND_ID:
      return getRoundId();

    case TEACH_UNIT_IDS:
      return getTeachUnitIds();

    case TEACHER_ID:
      return getTeacherId();

    case HOMEWORK_SCORE_RATE:
      return getHomeworkScoreRate();

    case HOMEWORK_COMPLETE_RATE:
      return getHomeworkCompleteRate();

    case QUIZZES_SCORE_RATE:
      return getQuizzesScoreRate();

    case QUIZZES_COMPLETE_RATE:
      return getQuizzesCompleteRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROUND_ID:
      return isSetRoundId();
    case TEACH_UNIT_IDS:
      return isSetTeachUnitIds();
    case TEACHER_ID:
      return isSetTeacherId();
    case HOMEWORK_SCORE_RATE:
      return isSetHomeworkScoreRate();
    case HOMEWORK_COMPLETE_RATE:
      return isSetHomeworkCompleteRate();
    case QUIZZES_SCORE_RATE:
      return isSetQuizzesScoreRate();
    case QUIZZES_COMPLETE_RATE:
      return isSetQuizzesCompleteRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UnitsStatistic)
      return this.equals((UnitsStatistic)that);
    return false;
  }

  public boolean equals(UnitsStatistic that) {
    if (that == null)
      return false;

    boolean this_present_roundId = true;
    boolean that_present_roundId = true;
    if (this_present_roundId || that_present_roundId) {
      if (!(this_present_roundId && that_present_roundId))
        return false;
      if (this.roundId != that.roundId)
        return false;
    }

    boolean this_present_teachUnitIds = true && this.isSetTeachUnitIds();
    boolean that_present_teachUnitIds = true && that.isSetTeachUnitIds();
    if (this_present_teachUnitIds || that_present_teachUnitIds) {
      if (!(this_present_teachUnitIds && that_present_teachUnitIds))
        return false;
      if (!this.teachUnitIds.equals(that.teachUnitIds))
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_homeworkScoreRate = true;
    boolean that_present_homeworkScoreRate = true;
    if (this_present_homeworkScoreRate || that_present_homeworkScoreRate) {
      if (!(this_present_homeworkScoreRate && that_present_homeworkScoreRate))
        return false;
      if (this.homeworkScoreRate != that.homeworkScoreRate)
        return false;
    }

    boolean this_present_homeworkCompleteRate = true;
    boolean that_present_homeworkCompleteRate = true;
    if (this_present_homeworkCompleteRate || that_present_homeworkCompleteRate) {
      if (!(this_present_homeworkCompleteRate && that_present_homeworkCompleteRate))
        return false;
      if (this.homeworkCompleteRate != that.homeworkCompleteRate)
        return false;
    }

    boolean this_present_quizzesScoreRate = true;
    boolean that_present_quizzesScoreRate = true;
    if (this_present_quizzesScoreRate || that_present_quizzesScoreRate) {
      if (!(this_present_quizzesScoreRate && that_present_quizzesScoreRate))
        return false;
      if (this.quizzesScoreRate != that.quizzesScoreRate)
        return false;
    }

    boolean this_present_quizzesCompleteRate = true;
    boolean that_present_quizzesCompleteRate = true;
    if (this_present_quizzesCompleteRate || that_present_quizzesCompleteRate) {
      if (!(this_present_quizzesCompleteRate && that_present_quizzesCompleteRate))
        return false;
      if (this.quizzesCompleteRate != that.quizzesCompleteRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_roundId = true;
    list.add(present_roundId);
    if (present_roundId)
      list.add(roundId);

    boolean present_teachUnitIds = true && (isSetTeachUnitIds());
    list.add(present_teachUnitIds);
    if (present_teachUnitIds)
      list.add(teachUnitIds);

    boolean present_teacherId = true;
    list.add(present_teacherId);
    if (present_teacherId)
      list.add(teacherId);

    boolean present_homeworkScoreRate = true;
    list.add(present_homeworkScoreRate);
    if (present_homeworkScoreRate)
      list.add(homeworkScoreRate);

    boolean present_homeworkCompleteRate = true;
    list.add(present_homeworkCompleteRate);
    if (present_homeworkCompleteRate)
      list.add(homeworkCompleteRate);

    boolean present_quizzesScoreRate = true;
    list.add(present_quizzesScoreRate);
    if (present_quizzesScoreRate)
      list.add(quizzesScoreRate);

    boolean present_quizzesCompleteRate = true;
    list.add(present_quizzesCompleteRate);
    if (present_quizzesCompleteRate)
      list.add(quizzesCompleteRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(UnitsStatistic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachUnitIds()).compareTo(other.isSetTeachUnitIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachUnitIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachUnitIds, other.teachUnitIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkScoreRate()).compareTo(other.isSetHomeworkScoreRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkScoreRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkScoreRate, other.homeworkScoreRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkCompleteRate()).compareTo(other.isSetHomeworkCompleteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkCompleteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkCompleteRate, other.homeworkCompleteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesScoreRate()).compareTo(other.isSetQuizzesScoreRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesScoreRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesScoreRate, other.quizzesScoreRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesCompleteRate()).compareTo(other.isSetQuizzesCompleteRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesCompleteRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesCompleteRate, other.quizzesCompleteRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UnitsStatistic(");
    boolean first = true;

    sb.append("roundId:");
    sb.append(this.roundId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachUnitIds:");
    if (this.teachUnitIds == null) {
      sb.append("null");
    } else {
      sb.append(this.teachUnitIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkScoreRate:");
    sb.append(this.homeworkScoreRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkCompleteRate:");
    sb.append(this.homeworkCompleteRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesScoreRate:");
    sb.append(this.quizzesScoreRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesCompleteRate:");
    sb.append(this.quizzesCompleteRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnitsStatisticStandardSchemeFactory implements SchemeFactory {
    public UnitsStatisticStandardScheme getScheme() {
      return new UnitsStatisticStandardScheme();
    }
  }

  private static class UnitsStatisticStandardScheme extends StandardScheme<UnitsStatistic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UnitsStatistic struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roundId = iprot.readI32();
              struct.setRoundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEACH_UNIT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachUnitIds = iprot.readString();
              struct.setTeachUnitIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOMEWORK_SCORE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.homeworkScoreRate = iprot.readDouble();
              struct.setHomeworkScoreRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOMEWORK_COMPLETE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.homeworkCompleteRate = iprot.readDouble();
              struct.setHomeworkCompleteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUIZZES_SCORE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quizzesScoreRate = iprot.readDouble();
              struct.setQuizzesScoreRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUIZZES_COMPLETE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quizzesCompleteRate = iprot.readDouble();
              struct.setQuizzesCompleteRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UnitsStatistic struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
      oprot.writeI32(struct.roundId);
      oprot.writeFieldEnd();
      if (struct.teachUnitIds != null) {
        oprot.writeFieldBegin(TEACH_UNIT_IDS_FIELD_DESC);
        oprot.writeString(struct.teachUnitIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOMEWORK_SCORE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.homeworkScoreRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOMEWORK_COMPLETE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.homeworkCompleteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_SCORE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.quizzesScoreRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_COMPLETE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.quizzesCompleteRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnitsStatisticTupleSchemeFactory implements SchemeFactory {
    public UnitsStatisticTupleScheme getScheme() {
      return new UnitsStatisticTupleScheme();
    }
  }

  private static class UnitsStatisticTupleScheme extends TupleScheme<UnitsStatistic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UnitsStatistic struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoundId()) {
        optionals.set(0);
      }
      if (struct.isSetTeachUnitIds()) {
        optionals.set(1);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(2);
      }
      if (struct.isSetHomeworkScoreRate()) {
        optionals.set(3);
      }
      if (struct.isSetHomeworkCompleteRate()) {
        optionals.set(4);
      }
      if (struct.isSetQuizzesScoreRate()) {
        optionals.set(5);
      }
      if (struct.isSetQuizzesCompleteRate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRoundId()) {
        oprot.writeI32(struct.roundId);
      }
      if (struct.isSetTeachUnitIds()) {
        oprot.writeString(struct.teachUnitIds);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetHomeworkScoreRate()) {
        oprot.writeDouble(struct.homeworkScoreRate);
      }
      if (struct.isSetHomeworkCompleteRate()) {
        oprot.writeDouble(struct.homeworkCompleteRate);
      }
      if (struct.isSetQuizzesScoreRate()) {
        oprot.writeDouble(struct.quizzesScoreRate);
      }
      if (struct.isSetQuizzesCompleteRate()) {
        oprot.writeDouble(struct.quizzesCompleteRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UnitsStatistic struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.roundId = iprot.readI32();
        struct.setRoundIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.teachUnitIds = iprot.readString();
        struct.setTeachUnitIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.homeworkScoreRate = iprot.readDouble();
        struct.setHomeworkScoreRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.homeworkCompleteRate = iprot.readDouble();
        struct.setHomeworkCompleteRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quizzesScoreRate = iprot.readDouble();
        struct.setQuizzesScoreRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.quizzesCompleteRate = iprot.readDouble();
        struct.setQuizzesCompleteRateIsSet(true);
      }
    }
  }

}

