/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-28")
public class KnowledgeNode implements org.apache.thrift.TBase<KnowledgeNode, KnowledgeNode._Fields>, java.io.Serializable, Cloneable, Comparable<KnowledgeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KnowledgeNode");

  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERIAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("serialNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KnowledgeNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KnowledgeNodeTupleSchemeFactory());
  }

  public int knowledgeNodeId; // required
  public String serialNumber; // required
  public String knowledgeNodeName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KNOWLEDGE_NODE_ID((short)1, "knowledgeNodeId"),
    SERIAL_NUMBER((short)2, "serialNumber"),
    KNOWLEDGE_NODE_NAME((short)3, "knowledgeNodeName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KNOWLEDGE_NODE_ID
          return KNOWLEDGE_NODE_ID;
        case 2: // SERIAL_NUMBER
          return SERIAL_NUMBER;
        case 3: // KNOWLEDGE_NODE_NAME
          return KNOWLEDGE_NODE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KNOWLEDGENODEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KNOWLEDGE_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERIAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("serialNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KNOWLEDGE_NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KnowledgeNode.class, metaDataMap);
  }

  public KnowledgeNode() {
  }

  public KnowledgeNode(
    int knowledgeNodeId,
    String serialNumber,
    String knowledgeNodeName)
  {
    this();
    this.knowledgeNodeId = knowledgeNodeId;
    setKnowledgeNodeIdIsSet(true);
    this.serialNumber = serialNumber;
    this.knowledgeNodeName = knowledgeNodeName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KnowledgeNode(KnowledgeNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.knowledgeNodeId = other.knowledgeNodeId;
    if (other.isSetSerialNumber()) {
      this.serialNumber = other.serialNumber;
    }
    if (other.isSetKnowledgeNodeName()) {
      this.knowledgeNodeName = other.knowledgeNodeName;
    }
  }

  public KnowledgeNode deepCopy() {
    return new KnowledgeNode(this);
  }

  @Override
  public void clear() {
    setKnowledgeNodeIdIsSet(false);
    this.knowledgeNodeId = 0;
    this.serialNumber = null;
    this.knowledgeNodeName = null;
  }

  public int getKnowledgeNodeId() {
    return this.knowledgeNodeId;
  }

  public KnowledgeNode setKnowledgeNodeId(int knowledgeNodeId) {
    this.knowledgeNodeId = knowledgeNodeId;
    setKnowledgeNodeIdIsSet(true);
    return this;
  }

  public void unsetKnowledgeNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID);
  }

  /** Returns true if field knowledgeNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID);
  }

  public void setKnowledgeNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KNOWLEDGENODEID_ISSET_ID, value);
  }

  public String getSerialNumber() {
    return this.serialNumber;
  }

  public KnowledgeNode setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  public void unsetSerialNumber() {
    this.serialNumber = null;
  }

  /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialNumber() {
    return this.serialNumber != null;
  }

  public void setSerialNumberIsSet(boolean value) {
    if (!value) {
      this.serialNumber = null;
    }
  }

  public String getKnowledgeNodeName() {
    return this.knowledgeNodeName;
  }

  public KnowledgeNode setKnowledgeNodeName(String knowledgeNodeName) {
    this.knowledgeNodeName = knowledgeNodeName;
    return this;
  }

  public void unsetKnowledgeNodeName() {
    this.knowledgeNodeName = null;
  }

  /** Returns true if field knowledgeNodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeName() {
    return this.knowledgeNodeName != null;
  }

  public void setKnowledgeNodeNameIsSet(boolean value) {
    if (!value) {
      this.knowledgeNodeName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KNOWLEDGE_NODE_ID:
      if (value == null) {
        unsetKnowledgeNodeId();
      } else {
        setKnowledgeNodeId((Integer)value);
      }
      break;

    case SERIAL_NUMBER:
      if (value == null) {
        unsetSerialNumber();
      } else {
        setSerialNumber((String)value);
      }
      break;

    case KNOWLEDGE_NODE_NAME:
      if (value == null) {
        unsetKnowledgeNodeName();
      } else {
        setKnowledgeNodeName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KNOWLEDGE_NODE_ID:
      return getKnowledgeNodeId();

    case SERIAL_NUMBER:
      return getSerialNumber();

    case KNOWLEDGE_NODE_NAME:
      return getKnowledgeNodeName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KNOWLEDGE_NODE_ID:
      return isSetKnowledgeNodeId();
    case SERIAL_NUMBER:
      return isSetSerialNumber();
    case KNOWLEDGE_NODE_NAME:
      return isSetKnowledgeNodeName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KnowledgeNode)
      return this.equals((KnowledgeNode)that);
    return false;
  }

  public boolean equals(KnowledgeNode that) {
    if (that == null)
      return false;

    boolean this_present_knowledgeNodeId = true;
    boolean that_present_knowledgeNodeId = true;
    if (this_present_knowledgeNodeId || that_present_knowledgeNodeId) {
      if (!(this_present_knowledgeNodeId && that_present_knowledgeNodeId))
        return false;
      if (this.knowledgeNodeId != that.knowledgeNodeId)
        return false;
    }

    boolean this_present_serialNumber = true && this.isSetSerialNumber();
    boolean that_present_serialNumber = true && that.isSetSerialNumber();
    if (this_present_serialNumber || that_present_serialNumber) {
      if (!(this_present_serialNumber && that_present_serialNumber))
        return false;
      if (!this.serialNumber.equals(that.serialNumber))
        return false;
    }

    boolean this_present_knowledgeNodeName = true && this.isSetKnowledgeNodeName();
    boolean that_present_knowledgeNodeName = true && that.isSetKnowledgeNodeName();
    if (this_present_knowledgeNodeName || that_present_knowledgeNodeName) {
      if (!(this_present_knowledgeNodeName && that_present_knowledgeNodeName))
        return false;
      if (!this.knowledgeNodeName.equals(that.knowledgeNodeName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_knowledgeNodeId = true;
    list.add(present_knowledgeNodeId);
    if (present_knowledgeNodeId)
      list.add(knowledgeNodeId);

    boolean present_serialNumber = true && (isSetSerialNumber());
    list.add(present_serialNumber);
    if (present_serialNumber)
      list.add(serialNumber);

    boolean present_knowledgeNodeName = true && (isSetKnowledgeNodeName());
    list.add(present_knowledgeNodeName);
    if (present_knowledgeNodeName)
      list.add(knowledgeNodeName);

    return list.hashCode();
  }

  @Override
  public int compareTo(KnowledgeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKnowledgeNodeId()).compareTo(other.isSetKnowledgeNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeId, other.knowledgeNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerialNumber()).compareTo(other.isSetSerialNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeNodeName()).compareTo(other.isSetKnowledgeNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeName, other.knowledgeNodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KnowledgeNode(");
    boolean first = true;

    sb.append("knowledgeNodeId:");
    sb.append(this.knowledgeNodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serialNumber:");
    if (this.serialNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.serialNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeNodeName:");
    if (this.knowledgeNodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledgeNodeName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KnowledgeNodeStandardSchemeFactory implements SchemeFactory {
    public KnowledgeNodeStandardScheme getScheme() {
      return new KnowledgeNodeStandardScheme();
    }
  }

  private static class KnowledgeNodeStandardScheme extends StandardScheme<KnowledgeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KnowledgeNode struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KNOWLEDGE_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knowledgeNodeId = iprot.readI32();
              struct.setKnowledgeNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERIAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialNumber = iprot.readString();
              struct.setSerialNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KNOWLEDGE_NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.knowledgeNodeName = iprot.readString();
              struct.setKnowledgeNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KnowledgeNode struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KNOWLEDGE_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.knowledgeNodeId);
      oprot.writeFieldEnd();
      if (struct.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.serialNumber);
        oprot.writeFieldEnd();
      }
      if (struct.knowledgeNodeName != null) {
        oprot.writeFieldBegin(KNOWLEDGE_NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.knowledgeNodeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KnowledgeNodeTupleSchemeFactory implements SchemeFactory {
    public KnowledgeNodeTupleScheme getScheme() {
      return new KnowledgeNodeTupleScheme();
    }
  }

  private static class KnowledgeNodeTupleScheme extends TupleScheme<KnowledgeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KnowledgeNode struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKnowledgeNodeId()) {
        optionals.set(0);
      }
      if (struct.isSetSerialNumber()) {
        optionals.set(1);
      }
      if (struct.isSetKnowledgeNodeName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKnowledgeNodeId()) {
        oprot.writeI32(struct.knowledgeNodeId);
      }
      if (struct.isSetSerialNumber()) {
        oprot.writeString(struct.serialNumber);
      }
      if (struct.isSetKnowledgeNodeName()) {
        oprot.writeString(struct.knowledgeNodeName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KnowledgeNode struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.knowledgeNodeId = iprot.readI32();
        struct.setKnowledgeNodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serialNumber = iprot.readString();
        struct.setSerialNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.knowledgeNodeName = iprot.readString();
        struct.setKnowledgeNodeNameIsSet(true);
      }
    }
  }

}

