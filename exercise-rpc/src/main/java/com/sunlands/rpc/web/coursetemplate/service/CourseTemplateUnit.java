/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-29")
public class CourseTemplateUnit implements org.apache.thrift.TBase<CourseTemplateUnit, CourseTemplateUnit._Fields>, java.io.Serializable, Cloneable, Comparable<CourseTemplateUnit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CourseTemplateUnit");

  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUnitId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TEMPLATE_UNIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUnitName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField QUIZ_PAPER_CODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("quizPaperCodeList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField ASSIGNMENT_PAPER_CODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("assignmentPaperCodeList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fileList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseTemplateUnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTemplateUnitTupleSchemeFactory());
  }

  public int courseTemplateId; // required
  public int templateUnitId; // required
  public String templateUnitName; // required
  public int sequence; // required
  public List<KnowledgeNode> knowledgeNodeList; // required
  public List<String> quizPaperCodeList; // required
  public List<String> assignmentPaperCodeList; // required
  public List<CourseTemplateUnitFile> fileList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE_TEMPLATE_ID((short)1, "courseTemplateId"),
    TEMPLATE_UNIT_ID((short)2, "templateUnitId"),
    TEMPLATE_UNIT_NAME((short)3, "templateUnitName"),
    SEQUENCE((short)4, "sequence"),
    KNOWLEDGE_NODE_LIST((short)5, "knowledgeNodeList"),
    QUIZ_PAPER_CODE_LIST((short)6, "quizPaperCodeList"),
    ASSIGNMENT_PAPER_CODE_LIST((short)7, "assignmentPaperCodeList"),
    FILE_LIST((short)8, "fileList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE_TEMPLATE_ID
          return COURSE_TEMPLATE_ID;
        case 2: // TEMPLATE_UNIT_ID
          return TEMPLATE_UNIT_ID;
        case 3: // TEMPLATE_UNIT_NAME
          return TEMPLATE_UNIT_NAME;
        case 4: // SEQUENCE
          return SEQUENCE;
        case 5: // KNOWLEDGE_NODE_LIST
          return KNOWLEDGE_NODE_LIST;
        case 6: // QUIZ_PAPER_CODE_LIST
          return QUIZ_PAPER_CODE_LIST;
        case 7: // ASSIGNMENT_PAPER_CODE_LIST
          return ASSIGNMENT_PAPER_CODE_LIST;
        case 8: // FILE_LIST
          return FILE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COURSETEMPLATEID_ISSET_ID = 0;
  private static final int __TEMPLATEUNITID_ISSET_ID = 1;
  private static final int __SEQUENCE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("templateUnitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_UNIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("templateUnitName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNOWLEDGE_NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KnowledgeNode.class))));
    tmpMap.put(_Fields.QUIZ_PAPER_CODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("quizPaperCodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ASSIGNMENT_PAPER_CODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("assignmentPaperCodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILE_LIST, new org.apache.thrift.meta_data.FieldMetaData("fileList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTemplateUnitFile.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CourseTemplateUnit.class, metaDataMap);
  }

  public CourseTemplateUnit() {
  }

  public CourseTemplateUnit(
    int courseTemplateId,
    int templateUnitId,
    String templateUnitName,
    int sequence,
    List<KnowledgeNode> knowledgeNodeList,
    List<String> quizPaperCodeList,
    List<String> assignmentPaperCodeList,
    List<CourseTemplateUnitFile> fileList)
  {
    this();
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    this.templateUnitId = templateUnitId;
    setTemplateUnitIdIsSet(true);
    this.templateUnitName = templateUnitName;
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.knowledgeNodeList = knowledgeNodeList;
    this.quizPaperCodeList = quizPaperCodeList;
    this.assignmentPaperCodeList = assignmentPaperCodeList;
    this.fileList = fileList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CourseTemplateUnit(CourseTemplateUnit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.courseTemplateId = other.courseTemplateId;
    this.templateUnitId = other.templateUnitId;
    if (other.isSetTemplateUnitName()) {
      this.templateUnitName = other.templateUnitName;
    }
    this.sequence = other.sequence;
    if (other.isSetKnowledgeNodeList()) {
      List<KnowledgeNode> __this__knowledgeNodeList = new ArrayList<KnowledgeNode>(other.knowledgeNodeList.size());
      for (KnowledgeNode other_element : other.knowledgeNodeList) {
        __this__knowledgeNodeList.add(new KnowledgeNode(other_element));
      }
      this.knowledgeNodeList = __this__knowledgeNodeList;
    }
    if (other.isSetQuizPaperCodeList()) {
      List<String> __this__quizPaperCodeList = new ArrayList<String>(other.quizPaperCodeList);
      this.quizPaperCodeList = __this__quizPaperCodeList;
    }
    if (other.isSetAssignmentPaperCodeList()) {
      List<String> __this__assignmentPaperCodeList = new ArrayList<String>(other.assignmentPaperCodeList);
      this.assignmentPaperCodeList = __this__assignmentPaperCodeList;
    }
    if (other.isSetFileList()) {
      List<CourseTemplateUnitFile> __this__fileList = new ArrayList<CourseTemplateUnitFile>(other.fileList.size());
      for (CourseTemplateUnitFile other_element : other.fileList) {
        __this__fileList.add(new CourseTemplateUnitFile(other_element));
      }
      this.fileList = __this__fileList;
    }
  }

  public CourseTemplateUnit deepCopy() {
    return new CourseTemplateUnit(this);
  }

  @Override
  public void clear() {
    setCourseTemplateIdIsSet(false);
    this.courseTemplateId = 0;
    setTemplateUnitIdIsSet(false);
    this.templateUnitId = 0;
    this.templateUnitName = null;
    setSequenceIsSet(false);
    this.sequence = 0;
    this.knowledgeNodeList = null;
    this.quizPaperCodeList = null;
    this.assignmentPaperCodeList = null;
    this.fileList = null;
  }

  public int getCourseTemplateId() {
    return this.courseTemplateId;
  }

  public CourseTemplateUnit setCourseTemplateId(int courseTemplateId) {
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    return this;
  }

  public void unsetCourseTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  public void setCourseTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID, value);
  }

  public int getTemplateUnitId() {
    return this.templateUnitId;
  }

  public CourseTemplateUnit setTemplateUnitId(int templateUnitId) {
    this.templateUnitId = templateUnitId;
    setTemplateUnitIdIsSet(true);
    return this;
  }

  public void unsetTemplateUnitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID);
  }

  /** Returns true if field templateUnitId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUnitId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID);
  }

  public void setTemplateUnitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID, value);
  }

  public String getTemplateUnitName() {
    return this.templateUnitName;
  }

  public CourseTemplateUnit setTemplateUnitName(String templateUnitName) {
    this.templateUnitName = templateUnitName;
    return this;
  }

  public void unsetTemplateUnitName() {
    this.templateUnitName = null;
  }

  /** Returns true if field templateUnitName is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUnitName() {
    return this.templateUnitName != null;
  }

  public void setTemplateUnitNameIsSet(boolean value) {
    if (!value) {
      this.templateUnitName = null;
    }
  }

  public int getSequence() {
    return this.sequence;
  }

  public CourseTemplateUnit setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public int getKnowledgeNodeListSize() {
    return (this.knowledgeNodeList == null) ? 0 : this.knowledgeNodeList.size();
  }

  public java.util.Iterator<KnowledgeNode> getKnowledgeNodeListIterator() {
    return (this.knowledgeNodeList == null) ? null : this.knowledgeNodeList.iterator();
  }

  public void addToKnowledgeNodeList(KnowledgeNode elem) {
    if (this.knowledgeNodeList == null) {
      this.knowledgeNodeList = new ArrayList<KnowledgeNode>();
    }
    this.knowledgeNodeList.add(elem);
  }

  public List<KnowledgeNode> getKnowledgeNodeList() {
    return this.knowledgeNodeList;
  }

  public CourseTemplateUnit setKnowledgeNodeList(List<KnowledgeNode> knowledgeNodeList) {
    this.knowledgeNodeList = knowledgeNodeList;
    return this;
  }

  public void unsetKnowledgeNodeList() {
    this.knowledgeNodeList = null;
  }

  /** Returns true if field knowledgeNodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeList() {
    return this.knowledgeNodeList != null;
  }

  public void setKnowledgeNodeListIsSet(boolean value) {
    if (!value) {
      this.knowledgeNodeList = null;
    }
  }

  public int getQuizPaperCodeListSize() {
    return (this.quizPaperCodeList == null) ? 0 : this.quizPaperCodeList.size();
  }

  public java.util.Iterator<String> getQuizPaperCodeListIterator() {
    return (this.quizPaperCodeList == null) ? null : this.quizPaperCodeList.iterator();
  }

  public void addToQuizPaperCodeList(String elem) {
    if (this.quizPaperCodeList == null) {
      this.quizPaperCodeList = new ArrayList<String>();
    }
    this.quizPaperCodeList.add(elem);
  }

  public List<String> getQuizPaperCodeList() {
    return this.quizPaperCodeList;
  }

  public CourseTemplateUnit setQuizPaperCodeList(List<String> quizPaperCodeList) {
    this.quizPaperCodeList = quizPaperCodeList;
    return this;
  }

  public void unsetQuizPaperCodeList() {
    this.quizPaperCodeList = null;
  }

  /** Returns true if field quizPaperCodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizPaperCodeList() {
    return this.quizPaperCodeList != null;
  }

  public void setQuizPaperCodeListIsSet(boolean value) {
    if (!value) {
      this.quizPaperCodeList = null;
    }
  }

  public int getAssignmentPaperCodeListSize() {
    return (this.assignmentPaperCodeList == null) ? 0 : this.assignmentPaperCodeList.size();
  }

  public java.util.Iterator<String> getAssignmentPaperCodeListIterator() {
    return (this.assignmentPaperCodeList == null) ? null : this.assignmentPaperCodeList.iterator();
  }

  public void addToAssignmentPaperCodeList(String elem) {
    if (this.assignmentPaperCodeList == null) {
      this.assignmentPaperCodeList = new ArrayList<String>();
    }
    this.assignmentPaperCodeList.add(elem);
  }

  public List<String> getAssignmentPaperCodeList() {
    return this.assignmentPaperCodeList;
  }

  public CourseTemplateUnit setAssignmentPaperCodeList(List<String> assignmentPaperCodeList) {
    this.assignmentPaperCodeList = assignmentPaperCodeList;
    return this;
  }

  public void unsetAssignmentPaperCodeList() {
    this.assignmentPaperCodeList = null;
  }

  /** Returns true if field assignmentPaperCodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignmentPaperCodeList() {
    return this.assignmentPaperCodeList != null;
  }

  public void setAssignmentPaperCodeListIsSet(boolean value) {
    if (!value) {
      this.assignmentPaperCodeList = null;
    }
  }

  public int getFileListSize() {
    return (this.fileList == null) ? 0 : this.fileList.size();
  }

  public java.util.Iterator<CourseTemplateUnitFile> getFileListIterator() {
    return (this.fileList == null) ? null : this.fileList.iterator();
  }

  public void addToFileList(CourseTemplateUnitFile elem) {
    if (this.fileList == null) {
      this.fileList = new ArrayList<CourseTemplateUnitFile>();
    }
    this.fileList.add(elem);
  }

  public List<CourseTemplateUnitFile> getFileList() {
    return this.fileList;
  }

  public CourseTemplateUnit setFileList(List<CourseTemplateUnitFile> fileList) {
    this.fileList = fileList;
    return this;
  }

  public void unsetFileList() {
    this.fileList = null;
  }

  /** Returns true if field fileList is set (has been assigned a value) and false otherwise */
  public boolean isSetFileList() {
    return this.fileList != null;
  }

  public void setFileListIsSet(boolean value) {
    if (!value) {
      this.fileList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE_TEMPLATE_ID:
      if (value == null) {
        unsetCourseTemplateId();
      } else {
        setCourseTemplateId((Integer)value);
      }
      break;

    case TEMPLATE_UNIT_ID:
      if (value == null) {
        unsetTemplateUnitId();
      } else {
        setTemplateUnitId((Integer)value);
      }
      break;

    case TEMPLATE_UNIT_NAME:
      if (value == null) {
        unsetTemplateUnitName();
      } else {
        setTemplateUnitName((String)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case KNOWLEDGE_NODE_LIST:
      if (value == null) {
        unsetKnowledgeNodeList();
      } else {
        setKnowledgeNodeList((List<KnowledgeNode>)value);
      }
      break;

    case QUIZ_PAPER_CODE_LIST:
      if (value == null) {
        unsetQuizPaperCodeList();
      } else {
        setQuizPaperCodeList((List<String>)value);
      }
      break;

    case ASSIGNMENT_PAPER_CODE_LIST:
      if (value == null) {
        unsetAssignmentPaperCodeList();
      } else {
        setAssignmentPaperCodeList((List<String>)value);
      }
      break;

    case FILE_LIST:
      if (value == null) {
        unsetFileList();
      } else {
        setFileList((List<CourseTemplateUnitFile>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE_TEMPLATE_ID:
      return getCourseTemplateId();

    case TEMPLATE_UNIT_ID:
      return getTemplateUnitId();

    case TEMPLATE_UNIT_NAME:
      return getTemplateUnitName();

    case SEQUENCE:
      return getSequence();

    case KNOWLEDGE_NODE_LIST:
      return getKnowledgeNodeList();

    case QUIZ_PAPER_CODE_LIST:
      return getQuizPaperCodeList();

    case ASSIGNMENT_PAPER_CODE_LIST:
      return getAssignmentPaperCodeList();

    case FILE_LIST:
      return getFileList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE_TEMPLATE_ID:
      return isSetCourseTemplateId();
    case TEMPLATE_UNIT_ID:
      return isSetTemplateUnitId();
    case TEMPLATE_UNIT_NAME:
      return isSetTemplateUnitName();
    case SEQUENCE:
      return isSetSequence();
    case KNOWLEDGE_NODE_LIST:
      return isSetKnowledgeNodeList();
    case QUIZ_PAPER_CODE_LIST:
      return isSetQuizPaperCodeList();
    case ASSIGNMENT_PAPER_CODE_LIST:
      return isSetAssignmentPaperCodeList();
    case FILE_LIST:
      return isSetFileList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CourseTemplateUnit)
      return this.equals((CourseTemplateUnit)that);
    return false;
  }

  public boolean equals(CourseTemplateUnit that) {
    if (that == null)
      return false;

    boolean this_present_courseTemplateId = true;
    boolean that_present_courseTemplateId = true;
    if (this_present_courseTemplateId || that_present_courseTemplateId) {
      if (!(this_present_courseTemplateId && that_present_courseTemplateId))
        return false;
      if (this.courseTemplateId != that.courseTemplateId)
        return false;
    }

    boolean this_present_templateUnitId = true;
    boolean that_present_templateUnitId = true;
    if (this_present_templateUnitId || that_present_templateUnitId) {
      if (!(this_present_templateUnitId && that_present_templateUnitId))
        return false;
      if (this.templateUnitId != that.templateUnitId)
        return false;
    }

    boolean this_present_templateUnitName = true && this.isSetTemplateUnitName();
    boolean that_present_templateUnitName = true && that.isSetTemplateUnitName();
    if (this_present_templateUnitName || that_present_templateUnitName) {
      if (!(this_present_templateUnitName && that_present_templateUnitName))
        return false;
      if (!this.templateUnitName.equals(that.templateUnitName))
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_knowledgeNodeList = true && this.isSetKnowledgeNodeList();
    boolean that_present_knowledgeNodeList = true && that.isSetKnowledgeNodeList();
    if (this_present_knowledgeNodeList || that_present_knowledgeNodeList) {
      if (!(this_present_knowledgeNodeList && that_present_knowledgeNodeList))
        return false;
      if (!this.knowledgeNodeList.equals(that.knowledgeNodeList))
        return false;
    }

    boolean this_present_quizPaperCodeList = true && this.isSetQuizPaperCodeList();
    boolean that_present_quizPaperCodeList = true && that.isSetQuizPaperCodeList();
    if (this_present_quizPaperCodeList || that_present_quizPaperCodeList) {
      if (!(this_present_quizPaperCodeList && that_present_quizPaperCodeList))
        return false;
      if (!this.quizPaperCodeList.equals(that.quizPaperCodeList))
        return false;
    }

    boolean this_present_assignmentPaperCodeList = true && this.isSetAssignmentPaperCodeList();
    boolean that_present_assignmentPaperCodeList = true && that.isSetAssignmentPaperCodeList();
    if (this_present_assignmentPaperCodeList || that_present_assignmentPaperCodeList) {
      if (!(this_present_assignmentPaperCodeList && that_present_assignmentPaperCodeList))
        return false;
      if (!this.assignmentPaperCodeList.equals(that.assignmentPaperCodeList))
        return false;
    }

    boolean this_present_fileList = true && this.isSetFileList();
    boolean that_present_fileList = true && that.isSetFileList();
    if (this_present_fileList || that_present_fileList) {
      if (!(this_present_fileList && that_present_fileList))
        return false;
      if (!this.fileList.equals(that.fileList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_courseTemplateId = true;
    list.add(present_courseTemplateId);
    if (present_courseTemplateId)
      list.add(courseTemplateId);

    boolean present_templateUnitId = true;
    list.add(present_templateUnitId);
    if (present_templateUnitId)
      list.add(templateUnitId);

    boolean present_templateUnitName = true && (isSetTemplateUnitName());
    list.add(present_templateUnitName);
    if (present_templateUnitName)
      list.add(templateUnitName);

    boolean present_sequence = true;
    list.add(present_sequence);
    if (present_sequence)
      list.add(sequence);

    boolean present_knowledgeNodeList = true && (isSetKnowledgeNodeList());
    list.add(present_knowledgeNodeList);
    if (present_knowledgeNodeList)
      list.add(knowledgeNodeList);

    boolean present_quizPaperCodeList = true && (isSetQuizPaperCodeList());
    list.add(present_quizPaperCodeList);
    if (present_quizPaperCodeList)
      list.add(quizPaperCodeList);

    boolean present_assignmentPaperCodeList = true && (isSetAssignmentPaperCodeList());
    list.add(present_assignmentPaperCodeList);
    if (present_assignmentPaperCodeList)
      list.add(assignmentPaperCodeList);

    boolean present_fileList = true && (isSetFileList());
    list.add(present_fileList);
    if (present_fileList)
      list.add(fileList);

    return list.hashCode();
  }

  @Override
  public int compareTo(CourseTemplateUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateUnitId()).compareTo(other.isSetTemplateUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUnitId, other.templateUnitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateUnitName()).compareTo(other.isSetTemplateUnitName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUnitName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUnitName, other.templateUnitName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeNodeList()).compareTo(other.isSetKnowledgeNodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeList, other.knowledgeNodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizPaperCodeList()).compareTo(other.isSetQuizPaperCodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizPaperCodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizPaperCodeList, other.quizPaperCodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignmentPaperCodeList()).compareTo(other.isSetAssignmentPaperCodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignmentPaperCodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignmentPaperCodeList, other.assignmentPaperCodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileList()).compareTo(other.isSetFileList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileList, other.fileList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CourseTemplateUnit(");
    boolean first = true;

    sb.append("courseTemplateId:");
    sb.append(this.courseTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateUnitId:");
    sb.append(this.templateUnitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateUnitName:");
    if (this.templateUnitName == null) {
      sb.append("null");
    } else {
      sb.append(this.templateUnitName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeNodeList:");
    if (this.knowledgeNodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledgeNodeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizPaperCodeList:");
    if (this.quizPaperCodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.quizPaperCodeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignmentPaperCodeList:");
    if (this.assignmentPaperCodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.assignmentPaperCodeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileList:");
    if (this.fileList == null) {
      sb.append("null");
    } else {
      sb.append(this.fileList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseTemplateUnitStandardSchemeFactory implements SchemeFactory {
    public CourseTemplateUnitStandardScheme getScheme() {
      return new CourseTemplateUnitStandardScheme();
    }
  }

  private static class CourseTemplateUnitStandardScheme extends StandardScheme<CourseTemplateUnit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CourseTemplateUnit struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COURSE_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseTemplateId = iprot.readI32();
              struct.setCourseTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateUnitId = iprot.readI32();
              struct.setTemplateUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMPLATE_UNIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.templateUnitName = iprot.readString();
              struct.setTemplateUnitNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KNOWLEDGE_NODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.knowledgeNodeList = new ArrayList<KnowledgeNode>(_list0.size);
                KnowledgeNode _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new KnowledgeNode();
                  _elem1.read(iprot);
                  struct.knowledgeNodeList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setKnowledgeNodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUIZ_PAPER_CODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.quizPaperCodeList = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.quizPaperCodeList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setQuizPaperCodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASSIGNMENT_PAPER_CODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.assignmentPaperCodeList = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.assignmentPaperCodeList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setAssignmentPaperCodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.fileList = new ArrayList<CourseTemplateUnitFile>(_list9.size);
                CourseTemplateUnitFile _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new CourseTemplateUnitFile();
                  _elem10.read(iprot);
                  struct.fileList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setFileListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CourseTemplateUnit struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseTemplateId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_UNIT_ID_FIELD_DESC);
      oprot.writeI32(struct.templateUnitId);
      oprot.writeFieldEnd();
      if (struct.templateUnitName != null) {
        oprot.writeFieldBegin(TEMPLATE_UNIT_NAME_FIELD_DESC);
        oprot.writeString(struct.templateUnitName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      if (struct.knowledgeNodeList != null) {
        oprot.writeFieldBegin(KNOWLEDGE_NODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.knowledgeNodeList.size()));
          for (KnowledgeNode _iter12 : struct.knowledgeNodeList)
          {
            _iter12.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.quizPaperCodeList != null) {
        oprot.writeFieldBegin(QUIZ_PAPER_CODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.quizPaperCodeList.size()));
          for (String _iter13 : struct.quizPaperCodeList)
          {
            oprot.writeString(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.assignmentPaperCodeList != null) {
        oprot.writeFieldBegin(ASSIGNMENT_PAPER_CODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.assignmentPaperCodeList.size()));
          for (String _iter14 : struct.assignmentPaperCodeList)
          {
            oprot.writeString(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fileList != null) {
        oprot.writeFieldBegin(FILE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fileList.size()));
          for (CourseTemplateUnitFile _iter15 : struct.fileList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTemplateUnitTupleSchemeFactory implements SchemeFactory {
    public CourseTemplateUnitTupleScheme getScheme() {
      return new CourseTemplateUnitTupleScheme();
    }
  }

  private static class CourseTemplateUnitTupleScheme extends TupleScheme<CourseTemplateUnit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CourseTemplateUnit struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCourseTemplateId()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateUnitId()) {
        optionals.set(1);
      }
      if (struct.isSetTemplateUnitName()) {
        optionals.set(2);
      }
      if (struct.isSetSequence()) {
        optionals.set(3);
      }
      if (struct.isSetKnowledgeNodeList()) {
        optionals.set(4);
      }
      if (struct.isSetQuizPaperCodeList()) {
        optionals.set(5);
      }
      if (struct.isSetAssignmentPaperCodeList()) {
        optionals.set(6);
      }
      if (struct.isSetFileList()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCourseTemplateId()) {
        oprot.writeI32(struct.courseTemplateId);
      }
      if (struct.isSetTemplateUnitId()) {
        oprot.writeI32(struct.templateUnitId);
      }
      if (struct.isSetTemplateUnitName()) {
        oprot.writeString(struct.templateUnitName);
      }
      if (struct.isSetSequence()) {
        oprot.writeI32(struct.sequence);
      }
      if (struct.isSetKnowledgeNodeList()) {
        {
          oprot.writeI32(struct.knowledgeNodeList.size());
          for (KnowledgeNode _iter16 : struct.knowledgeNodeList)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetQuizPaperCodeList()) {
        {
          oprot.writeI32(struct.quizPaperCodeList.size());
          for (String _iter17 : struct.quizPaperCodeList)
          {
            oprot.writeString(_iter17);
          }
        }
      }
      if (struct.isSetAssignmentPaperCodeList()) {
        {
          oprot.writeI32(struct.assignmentPaperCodeList.size());
          for (String _iter18 : struct.assignmentPaperCodeList)
          {
            oprot.writeString(_iter18);
          }
        }
      }
      if (struct.isSetFileList()) {
        {
          oprot.writeI32(struct.fileList.size());
          for (CourseTemplateUnitFile _iter19 : struct.fileList)
          {
            _iter19.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CourseTemplateUnit struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.courseTemplateId = iprot.readI32();
        struct.setCourseTemplateIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateUnitId = iprot.readI32();
        struct.setTemplateUnitIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.templateUnitName = iprot.readString();
        struct.setTemplateUnitNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sequence = iprot.readI32();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.knowledgeNodeList = new ArrayList<KnowledgeNode>(_list20.size);
          KnowledgeNode _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = new KnowledgeNode();
            _elem21.read(iprot);
            struct.knowledgeNodeList.add(_elem21);
          }
        }
        struct.setKnowledgeNodeListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.quizPaperCodeList = new ArrayList<String>(_list23.size);
          String _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readString();
            struct.quizPaperCodeList.add(_elem24);
          }
        }
        struct.setQuizPaperCodeListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.assignmentPaperCodeList = new ArrayList<String>(_list26.size);
          String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.assignmentPaperCodeList.add(_elem27);
          }
        }
        struct.setAssignmentPaperCodeListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fileList = new ArrayList<CourseTemplateUnitFile>(_list29.size);
          CourseTemplateUnitFile _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new CourseTemplateUnitFile();
            _elem30.read(iprot);
            struct.fileList.add(_elem30);
          }
        }
        struct.setFileListIsSet(true);
      }
    }
  }

}

