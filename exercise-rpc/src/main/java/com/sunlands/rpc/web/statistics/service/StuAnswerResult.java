/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-28")
public class StuAnswerResult implements org.apache.thrift.TBase<StuAnswerResult, StuAnswerResult._Fields>, java.io.Serializable, Cloneable, Comparable<StuAnswerResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StuAnswerResult");

  private static final org.apache.thrift.protocol.TField COUNT_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("countPerPage", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pageCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("pageIndex", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("resultList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD1_FIELD_DESC = new org.apache.thrift.protocol.TField("field1", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAPER_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperTypeCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SYSTEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNumber", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StuAnswerResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StuAnswerResultTupleSchemeFactory());
  }

  public int countPerPage; // required
  public int pageCount; // required
  public int pageIndex; // required
  public List<StuAnswerDetail> resultList; // required
  public int totalCount; // required
  public String paperId; // required
  public String field1; // required
  public String paperTypeCode; // required
  public String systemNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT_PER_PAGE((short)1, "countPerPage"),
    PAGE_COUNT((short)2, "pageCount"),
    PAGE_INDEX((short)3, "pageIndex"),
    RESULT_LIST((short)4, "resultList"),
    TOTAL_COUNT((short)5, "totalCount"),
    PAPER_ID((short)6, "paperId"),
    FIELD1((short)7, "field1"),
    PAPER_TYPE_CODE((short)8, "paperTypeCode"),
    SYSTEM_NUMBER((short)9, "systemNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT_PER_PAGE
          return COUNT_PER_PAGE;
        case 2: // PAGE_COUNT
          return PAGE_COUNT;
        case 3: // PAGE_INDEX
          return PAGE_INDEX;
        case 4: // RESULT_LIST
          return RESULT_LIST;
        case 5: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 6: // PAPER_ID
          return PAPER_ID;
        case 7: // FIELD1
          return FIELD1;
        case 8: // PAPER_TYPE_CODE
          return PAPER_TYPE_CODE;
        case 9: // SYSTEM_NUMBER
          return SYSTEM_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNTPERPAGE_ISSET_ID = 0;
  private static final int __PAGECOUNT_ISSET_ID = 1;
  private static final int __PAGEINDEX_ISSET_ID = 2;
  private static final int __TOTALCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("countPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("pageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("resultList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "StuAnswerDetail"))));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD1, new org.apache.thrift.meta_data.FieldMetaData("field1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("systemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StuAnswerResult.class, metaDataMap);
  }

  public StuAnswerResult() {
  }

  public StuAnswerResult(
    int countPerPage,
    int pageCount,
    int pageIndex,
    List<StuAnswerDetail> resultList,
    int totalCount,
    String paperId,
    String field1,
    String paperTypeCode,
    String systemNumber)
  {
    this();
    this.countPerPage = countPerPage;
    setCountPerPageIsSet(true);
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    this.resultList = resultList;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.paperId = paperId;
    this.field1 = field1;
    this.paperTypeCode = paperTypeCode;
    this.systemNumber = systemNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StuAnswerResult(StuAnswerResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.countPerPage = other.countPerPage;
    this.pageCount = other.pageCount;
    this.pageIndex = other.pageIndex;
    if (other.isSetResultList()) {
      List<StuAnswerDetail> __this__resultList = new ArrayList<StuAnswerDetail>(other.resultList.size());
      for (StuAnswerDetail other_element : other.resultList) {
        __this__resultList.add(other_element);
      }
      this.resultList = __this__resultList;
    }
    this.totalCount = other.totalCount;
    if (other.isSetPaperId()) {
      this.paperId = other.paperId;
    }
    if (other.isSetField1()) {
      this.field1 = other.field1;
    }
    if (other.isSetPaperTypeCode()) {
      this.paperTypeCode = other.paperTypeCode;
    }
    if (other.isSetSystemNumber()) {
      this.systemNumber = other.systemNumber;
    }
  }

  public StuAnswerResult deepCopy() {
    return new StuAnswerResult(this);
  }

  @Override
  public void clear() {
    setCountPerPageIsSet(false);
    this.countPerPage = 0;
    setPageCountIsSet(false);
    this.pageCount = 0;
    setPageIndexIsSet(false);
    this.pageIndex = 0;
    this.resultList = null;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    this.paperId = null;
    this.field1 = null;
    this.paperTypeCode = null;
    this.systemNumber = null;
  }

  public int getCountPerPage() {
    return this.countPerPage;
  }

  public StuAnswerResult setCountPerPage(int countPerPage) {
    this.countPerPage = countPerPage;
    setCountPerPageIsSet(true);
    return this;
  }

  public void unsetCountPerPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
  }

  /** Returns true if field countPerPage is set (has been assigned a value) and false otherwise */
  public boolean isSetCountPerPage() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
  }

  public void setCountPerPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID, value);
  }

  public int getPageCount() {
    return this.pageCount;
  }

  public StuAnswerResult setPageCount(int pageCount) {
    this.pageCount = pageCount;
    setPageCountIsSet(true);
    return this;
  }

  public void unsetPageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  /** Returns true if field pageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGECOUNT_ISSET_ID);
  }

  public void setPageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGECOUNT_ISSET_ID, value);
  }

  public int getPageIndex() {
    return this.pageIndex;
  }

  public StuAnswerResult setPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field pageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  public int getResultListSize() {
    return (this.resultList == null) ? 0 : this.resultList.size();
  }

  public java.util.Iterator<StuAnswerDetail> getResultListIterator() {
    return (this.resultList == null) ? null : this.resultList.iterator();
  }

  public void addToResultList(StuAnswerDetail elem) {
    if (this.resultList == null) {
      this.resultList = new ArrayList<StuAnswerDetail>();
    }
    this.resultList.add(elem);
  }

  public List<StuAnswerDetail> getResultList() {
    return this.resultList;
  }

  public StuAnswerResult setResultList(List<StuAnswerDetail> resultList) {
    this.resultList = resultList;
    return this;
  }

  public void unsetResultList() {
    this.resultList = null;
  }

  /** Returns true if field resultList is set (has been assigned a value) and false otherwise */
  public boolean isSetResultList() {
    return this.resultList != null;
  }

  public void setResultListIsSet(boolean value) {
    if (!value) {
      this.resultList = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public StuAnswerResult setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public String getPaperId() {
    return this.paperId;
  }

  public StuAnswerResult setPaperId(String paperId) {
    this.paperId = paperId;
    return this;
  }

  public void unsetPaperId() {
    this.paperId = null;
  }

  /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperId() {
    return this.paperId != null;
  }

  public void setPaperIdIsSet(boolean value) {
    if (!value) {
      this.paperId = null;
    }
  }

  public String getField1() {
    return this.field1;
  }

  public StuAnswerResult setField1(String field1) {
    this.field1 = field1;
    return this;
  }

  public void unsetField1() {
    this.field1 = null;
  }

  /** Returns true if field field1 is set (has been assigned a value) and false otherwise */
  public boolean isSetField1() {
    return this.field1 != null;
  }

  public void setField1IsSet(boolean value) {
    if (!value) {
      this.field1 = null;
    }
  }

  public String getPaperTypeCode() {
    return this.paperTypeCode;
  }

  public StuAnswerResult setPaperTypeCode(String paperTypeCode) {
    this.paperTypeCode = paperTypeCode;
    return this;
  }

  public void unsetPaperTypeCode() {
    this.paperTypeCode = null;
  }

  /** Returns true if field paperTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperTypeCode() {
    return this.paperTypeCode != null;
  }

  public void setPaperTypeCodeIsSet(boolean value) {
    if (!value) {
      this.paperTypeCode = null;
    }
  }

  public String getSystemNumber() {
    return this.systemNumber;
  }

  public StuAnswerResult setSystemNumber(String systemNumber) {
    this.systemNumber = systemNumber;
    return this;
  }

  public void unsetSystemNumber() {
    this.systemNumber = null;
  }

  /** Returns true if field systemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemNumber() {
    return this.systemNumber != null;
  }

  public void setSystemNumberIsSet(boolean value) {
    if (!value) {
      this.systemNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT_PER_PAGE:
      if (value == null) {
        unsetCountPerPage();
      } else {
        setCountPerPage((Integer)value);
      }
      break;

    case PAGE_COUNT:
      if (value == null) {
        unsetPageCount();
      } else {
        setPageCount((Integer)value);
      }
      break;

    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case RESULT_LIST:
      if (value == null) {
        unsetResultList();
      } else {
        setResultList((List<StuAnswerDetail>)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case PAPER_ID:
      if (value == null) {
        unsetPaperId();
      } else {
        setPaperId((String)value);
      }
      break;

    case FIELD1:
      if (value == null) {
        unsetField1();
      } else {
        setField1((String)value);
      }
      break;

    case PAPER_TYPE_CODE:
      if (value == null) {
        unsetPaperTypeCode();
      } else {
        setPaperTypeCode((String)value);
      }
      break;

    case SYSTEM_NUMBER:
      if (value == null) {
        unsetSystemNumber();
      } else {
        setSystemNumber((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT_PER_PAGE:
      return getCountPerPage();

    case PAGE_COUNT:
      return getPageCount();

    case PAGE_INDEX:
      return getPageIndex();

    case RESULT_LIST:
      return getResultList();

    case TOTAL_COUNT:
      return getTotalCount();

    case PAPER_ID:
      return getPaperId();

    case FIELD1:
      return getField1();

    case PAPER_TYPE_CODE:
      return getPaperTypeCode();

    case SYSTEM_NUMBER:
      return getSystemNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT_PER_PAGE:
      return isSetCountPerPage();
    case PAGE_COUNT:
      return isSetPageCount();
    case PAGE_INDEX:
      return isSetPageIndex();
    case RESULT_LIST:
      return isSetResultList();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case PAPER_ID:
      return isSetPaperId();
    case FIELD1:
      return isSetField1();
    case PAPER_TYPE_CODE:
      return isSetPaperTypeCode();
    case SYSTEM_NUMBER:
      return isSetSystemNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StuAnswerResult)
      return this.equals((StuAnswerResult)that);
    return false;
  }

  public boolean equals(StuAnswerResult that) {
    if (that == null)
      return false;

    boolean this_present_countPerPage = true;
    boolean that_present_countPerPage = true;
    if (this_present_countPerPage || that_present_countPerPage) {
      if (!(this_present_countPerPage && that_present_countPerPage))
        return false;
      if (this.countPerPage != that.countPerPage)
        return false;
    }

    boolean this_present_pageCount = true;
    boolean that_present_pageCount = true;
    if (this_present_pageCount || that_present_pageCount) {
      if (!(this_present_pageCount && that_present_pageCount))
        return false;
      if (this.pageCount != that.pageCount)
        return false;
    }

    boolean this_present_pageIndex = true;
    boolean that_present_pageIndex = true;
    if (this_present_pageIndex || that_present_pageIndex) {
      if (!(this_present_pageIndex && that_present_pageIndex))
        return false;
      if (this.pageIndex != that.pageIndex)
        return false;
    }

    boolean this_present_resultList = true && this.isSetResultList();
    boolean that_present_resultList = true && that.isSetResultList();
    if (this_present_resultList || that_present_resultList) {
      if (!(this_present_resultList && that_present_resultList))
        return false;
      if (!this.resultList.equals(that.resultList))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_paperId = true && this.isSetPaperId();
    boolean that_present_paperId = true && that.isSetPaperId();
    if (this_present_paperId || that_present_paperId) {
      if (!(this_present_paperId && that_present_paperId))
        return false;
      if (!this.paperId.equals(that.paperId))
        return false;
    }

    boolean this_present_field1 = true && this.isSetField1();
    boolean that_present_field1 = true && that.isSetField1();
    if (this_present_field1 || that_present_field1) {
      if (!(this_present_field1 && that_present_field1))
        return false;
      if (!this.field1.equals(that.field1))
        return false;
    }

    boolean this_present_paperTypeCode = true && this.isSetPaperTypeCode();
    boolean that_present_paperTypeCode = true && that.isSetPaperTypeCode();
    if (this_present_paperTypeCode || that_present_paperTypeCode) {
      if (!(this_present_paperTypeCode && that_present_paperTypeCode))
        return false;
      if (!this.paperTypeCode.equals(that.paperTypeCode))
        return false;
    }

    boolean this_present_systemNumber = true && this.isSetSystemNumber();
    boolean that_present_systemNumber = true && that.isSetSystemNumber();
    if (this_present_systemNumber || that_present_systemNumber) {
      if (!(this_present_systemNumber && that_present_systemNumber))
        return false;
      if (!this.systemNumber.equals(that.systemNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_countPerPage = true;
    list.add(present_countPerPage);
    if (present_countPerPage)
      list.add(countPerPage);

    boolean present_pageCount = true;
    list.add(present_pageCount);
    if (present_pageCount)
      list.add(pageCount);

    boolean present_pageIndex = true;
    list.add(present_pageIndex);
    if (present_pageIndex)
      list.add(pageIndex);

    boolean present_resultList = true && (isSetResultList());
    list.add(present_resultList);
    if (present_resultList)
      list.add(resultList);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_paperId = true && (isSetPaperId());
    list.add(present_paperId);
    if (present_paperId)
      list.add(paperId);

    boolean present_field1 = true && (isSetField1());
    list.add(present_field1);
    if (present_field1)
      list.add(field1);

    boolean present_paperTypeCode = true && (isSetPaperTypeCode());
    list.add(present_paperTypeCode);
    if (present_paperTypeCode)
      list.add(paperTypeCode);

    boolean present_systemNumber = true && (isSetSystemNumber());
    list.add(present_systemNumber);
    if (present_systemNumber)
      list.add(systemNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(StuAnswerResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCountPerPage()).compareTo(other.isSetCountPerPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountPerPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countPerPage, other.countPerPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageCount()).compareTo(other.isSetPageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageCount, other.pageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageIndex, other.pageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultList()).compareTo(other.isSetResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultList, other.resultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField1()).compareTo(other.isSetField1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field1, other.field1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperTypeCode()).compareTo(other.isSetPaperTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperTypeCode, other.paperTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemNumber()).compareTo(other.isSetSystemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNumber, other.systemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StuAnswerResult(");
    boolean first = true;

    sb.append("countPerPage:");
    sb.append(this.countPerPage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageCount:");
    sb.append(this.pageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageIndex:");
    sb.append(this.pageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultList:");
    if (this.resultList == null) {
      sb.append("null");
    } else {
      sb.append(this.resultList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperId:");
    if (this.paperId == null) {
      sb.append("null");
    } else {
      sb.append(this.paperId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field1:");
    if (this.field1 == null) {
      sb.append("null");
    } else {
      sb.append(this.field1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperTypeCode:");
    if (this.paperTypeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paperTypeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemNumber:");
    if (this.systemNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.systemNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StuAnswerResultStandardSchemeFactory implements SchemeFactory {
    public StuAnswerResultStandardScheme getScheme() {
      return new StuAnswerResultStandardScheme();
    }
  }

  private static class StuAnswerResultStandardScheme extends StandardScheme<StuAnswerResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StuAnswerResult struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT_PER_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countPerPage = iprot.readI32();
              struct.setCountPerPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageCount = iprot.readI32();
              struct.setPageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.resultList = new ArrayList<StuAnswerDetail>(_list8.size);
                StuAnswerDetail _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new StuAnswerDetail();
                  _elem9.read(iprot);
                  struct.resultList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperId = iprot.readString();
              struct.setPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field1 = iprot.readString();
              struct.setField1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAPER_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperTypeCode = iprot.readString();
              struct.setPaperTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SYSTEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemNumber = iprot.readString();
              struct.setSystemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StuAnswerResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_PER_PAGE_FIELD_DESC);
      oprot.writeI32(struct.countPerPage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.pageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.pageIndex);
      oprot.writeFieldEnd();
      if (struct.resultList != null) {
        oprot.writeFieldBegin(RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultList.size()));
          for (StuAnswerDetail _iter11 : struct.resultList)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      if (struct.paperId != null) {
        oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
        oprot.writeString(struct.paperId);
        oprot.writeFieldEnd();
      }
      if (struct.field1 != null) {
        oprot.writeFieldBegin(FIELD1_FIELD_DESC);
        oprot.writeString(struct.field1);
        oprot.writeFieldEnd();
      }
      if (struct.paperTypeCode != null) {
        oprot.writeFieldBegin(PAPER_TYPE_CODE_FIELD_DESC);
        oprot.writeString(struct.paperTypeCode);
        oprot.writeFieldEnd();
      }
      if (struct.systemNumber != null) {
        oprot.writeFieldBegin(SYSTEM_NUMBER_FIELD_DESC);
        oprot.writeString(struct.systemNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StuAnswerResultTupleSchemeFactory implements SchemeFactory {
    public StuAnswerResultTupleScheme getScheme() {
      return new StuAnswerResultTupleScheme();
    }
  }

  private static class StuAnswerResultTupleScheme extends TupleScheme<StuAnswerResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StuAnswerResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCountPerPage()) {
        optionals.set(0);
      }
      if (struct.isSetPageCount()) {
        optionals.set(1);
      }
      if (struct.isSetPageIndex()) {
        optionals.set(2);
      }
      if (struct.isSetResultList()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetPaperId()) {
        optionals.set(5);
      }
      if (struct.isSetField1()) {
        optionals.set(6);
      }
      if (struct.isSetPaperTypeCode()) {
        optionals.set(7);
      }
      if (struct.isSetSystemNumber()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCountPerPage()) {
        oprot.writeI32(struct.countPerPage);
      }
      if (struct.isSetPageCount()) {
        oprot.writeI32(struct.pageCount);
      }
      if (struct.isSetPageIndex()) {
        oprot.writeI32(struct.pageIndex);
      }
      if (struct.isSetResultList()) {
        {
          oprot.writeI32(struct.resultList.size());
          for (StuAnswerDetail _iter12 : struct.resultList)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetPaperId()) {
        oprot.writeString(struct.paperId);
      }
      if (struct.isSetField1()) {
        oprot.writeString(struct.field1);
      }
      if (struct.isSetPaperTypeCode()) {
        oprot.writeString(struct.paperTypeCode);
      }
      if (struct.isSetSystemNumber()) {
        oprot.writeString(struct.systemNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StuAnswerResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.countPerPage = iprot.readI32();
        struct.setCountPerPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pageCount = iprot.readI32();
        struct.setPageCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageIndex = iprot.readI32();
        struct.setPageIndexIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultList = new ArrayList<StuAnswerDetail>(_list13.size);
          StuAnswerDetail _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new StuAnswerDetail();
            _elem14.read(iprot);
            struct.resultList.add(_elem14);
          }
        }
        struct.setResultListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.paperId = iprot.readString();
        struct.setPaperIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.field1 = iprot.readString();
        struct.setField1IsSet(true);
      }
      if (incoming.get(7)) {
        struct.paperTypeCode = iprot.readString();
        struct.setPaperTypeCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.systemNumber = iprot.readString();
        struct.setSystemNumberIsSet(true);
      }
    }
  }

}

