/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class StuQuestionAnswer implements org.apache.thrift.TBase<StuQuestionAnswer, StuQuestionAnswer._Fields>, java.io.Serializable, Cloneable, Comparable<StuQuestionAnswer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StuQuestionAnswer");

  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STU_ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("stuAnswer", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CORRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("correct", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STU_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("stuScore", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StuQuestionAnswerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StuQuestionAnswerTupleSchemeFactory());
  }

  public int questionId; // required
  public int stuId; // required
  public String stuAnswer; // required
  public int correct; // required
  public int stuScore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION_ID((short)1, "questionId"),
    STU_ID((short)2, "stuId"),
    STU_ANSWER((short)3, "stuAnswer"),
    CORRECT((short)4, "correct"),
    STU_SCORE((short)5, "stuScore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION_ID
          return QUESTION_ID;
        case 2: // STU_ID
          return STU_ID;
        case 3: // STU_ANSWER
          return STU_ANSWER;
        case 4: // CORRECT
          return CORRECT;
        case 5: // STU_SCORE
          return STU_SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUESTIONID_ISSET_ID = 0;
  private static final int __STUID_ISSET_ID = 1;
  private static final int __CORRECT_ISSET_ID = 2;
  private static final int __STUSCORE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STU_ANSWER, new org.apache.thrift.meta_data.FieldMetaData("stuAnswer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRECT, new org.apache.thrift.meta_data.FieldMetaData("correct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STU_SCORE, new org.apache.thrift.meta_data.FieldMetaData("stuScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StuQuestionAnswer.class, metaDataMap);
  }

  public StuQuestionAnswer() {
  }

  public StuQuestionAnswer(
    int questionId,
    int stuId,
    String stuAnswer,
    int correct,
    int stuScore)
  {
    this();
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.stuId = stuId;
    setStuIdIsSet(true);
    this.stuAnswer = stuAnswer;
    this.correct = correct;
    setCorrectIsSet(true);
    this.stuScore = stuScore;
    setStuScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StuQuestionAnswer(StuQuestionAnswer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.questionId = other.questionId;
    this.stuId = other.stuId;
    if (other.isSetStuAnswer()) {
      this.stuAnswer = other.stuAnswer;
    }
    this.correct = other.correct;
    this.stuScore = other.stuScore;
  }

  public StuQuestionAnswer deepCopy() {
    return new StuQuestionAnswer(this);
  }

  @Override
  public void clear() {
    setQuestionIdIsSet(false);
    this.questionId = 0;
    setStuIdIsSet(false);
    this.stuId = 0;
    this.stuAnswer = null;
    setCorrectIsSet(false);
    this.correct = 0;
    setStuScoreIsSet(false);
    this.stuScore = 0;
  }

  public int getQuestionId() {
    return this.questionId;
  }

  public StuQuestionAnswer setQuestionId(int questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public int getStuId() {
    return this.stuId;
  }

  public StuQuestionAnswer setStuId(int stuId) {
    this.stuId = stuId;
    setStuIdIsSet(true);
    return this;
  }

  public void unsetStuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
  public boolean isSetStuId() {
    return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  public void setStuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
  }

  public String getStuAnswer() {
    return this.stuAnswer;
  }

  public StuQuestionAnswer setStuAnswer(String stuAnswer) {
    this.stuAnswer = stuAnswer;
    return this;
  }

  public void unsetStuAnswer() {
    this.stuAnswer = null;
  }

  /** Returns true if field stuAnswer is set (has been assigned a value) and false otherwise */
  public boolean isSetStuAnswer() {
    return this.stuAnswer != null;
  }

  public void setStuAnswerIsSet(boolean value) {
    if (!value) {
      this.stuAnswer = null;
    }
  }

  public int getCorrect() {
    return this.correct;
  }

  public StuQuestionAnswer setCorrect(int correct) {
    this.correct = correct;
    setCorrectIsSet(true);
    return this;
  }

  public void unsetCorrect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  /** Returns true if field correct is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrect() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  public void setCorrectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECT_ISSET_ID, value);
  }

  public int getStuScore() {
    return this.stuScore;
  }

  public StuQuestionAnswer setStuScore(int stuScore) {
    this.stuScore = stuScore;
    setStuScoreIsSet(true);
    return this;
  }

  public void unsetStuScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUSCORE_ISSET_ID);
  }

  /** Returns true if field stuScore is set (has been assigned a value) and false otherwise */
  public boolean isSetStuScore() {
    return EncodingUtils.testBit(__isset_bitfield, __STUSCORE_ISSET_ID);
  }

  public void setStuScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUSCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Integer)value);
      }
      break;

    case STU_ID:
      if (value == null) {
        unsetStuId();
      } else {
        setStuId((Integer)value);
      }
      break;

    case STU_ANSWER:
      if (value == null) {
        unsetStuAnswer();
      } else {
        setStuAnswer((String)value);
      }
      break;

    case CORRECT:
      if (value == null) {
        unsetCorrect();
      } else {
        setCorrect((Integer)value);
      }
      break;

    case STU_SCORE:
      if (value == null) {
        unsetStuScore();
      } else {
        setStuScore((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION_ID:
      return getQuestionId();

    case STU_ID:
      return getStuId();

    case STU_ANSWER:
      return getStuAnswer();

    case CORRECT:
      return getCorrect();

    case STU_SCORE:
      return getStuScore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION_ID:
      return isSetQuestionId();
    case STU_ID:
      return isSetStuId();
    case STU_ANSWER:
      return isSetStuAnswer();
    case CORRECT:
      return isSetCorrect();
    case STU_SCORE:
      return isSetStuScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StuQuestionAnswer)
      return this.equals((StuQuestionAnswer)that);
    return false;
  }

  public boolean equals(StuQuestionAnswer that) {
    if (that == null)
      return false;

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_stuId = true;
    boolean that_present_stuId = true;
    if (this_present_stuId || that_present_stuId) {
      if (!(this_present_stuId && that_present_stuId))
        return false;
      if (this.stuId != that.stuId)
        return false;
    }

    boolean this_present_stuAnswer = true && this.isSetStuAnswer();
    boolean that_present_stuAnswer = true && that.isSetStuAnswer();
    if (this_present_stuAnswer || that_present_stuAnswer) {
      if (!(this_present_stuAnswer && that_present_stuAnswer))
        return false;
      if (!this.stuAnswer.equals(that.stuAnswer))
        return false;
    }

    boolean this_present_correct = true;
    boolean that_present_correct = true;
    if (this_present_correct || that_present_correct) {
      if (!(this_present_correct && that_present_correct))
        return false;
      if (this.correct != that.correct)
        return false;
    }

    boolean this_present_stuScore = true;
    boolean that_present_stuScore = true;
    if (this_present_stuScore || that_present_stuScore) {
      if (!(this_present_stuScore && that_present_stuScore))
        return false;
      if (this.stuScore != that.stuScore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_questionId = true;
    list.add(present_questionId);
    if (present_questionId)
      list.add(questionId);

    boolean present_stuId = true;
    list.add(present_stuId);
    if (present_stuId)
      list.add(stuId);

    boolean present_stuAnswer = true && (isSetStuAnswer());
    list.add(present_stuAnswer);
    if (present_stuAnswer)
      list.add(stuAnswer);

    boolean present_correct = true;
    list.add(present_correct);
    if (present_correct)
      list.add(correct);

    boolean present_stuScore = true;
    list.add(present_stuScore);
    if (present_stuScore)
      list.add(stuScore);

    return list.hashCode();
  }

  @Override
  public int compareTo(StuQuestionAnswer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStuAnswer()).compareTo(other.isSetStuAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuAnswer, other.stuAnswer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrect()).compareTo(other.isSetCorrect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correct, other.correct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStuScore()).compareTo(other.isSetStuScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuScore, other.stuScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StuQuestionAnswer(");
    boolean first = true;

    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stuId:");
    sb.append(this.stuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stuAnswer:");
    if (this.stuAnswer == null) {
      sb.append("null");
    } else {
      sb.append(this.stuAnswer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correct:");
    sb.append(this.correct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stuScore:");
    sb.append(this.stuScore);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StuQuestionAnswerStandardSchemeFactory implements SchemeFactory {
    public StuQuestionAnswerStandardScheme getScheme() {
      return new StuQuestionAnswerStandardScheme();
    }
  }

  private static class StuQuestionAnswerStandardScheme extends StandardScheme<StuQuestionAnswer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StuQuestionAnswer struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionId = iprot.readI32();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuId = iprot.readI32();
              struct.setStuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STU_ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stuAnswer = iprot.readString();
              struct.setStuAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CORRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correct = iprot.readI32();
              struct.setCorrectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STU_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuScore = iprot.readI32();
              struct.setStuScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StuQuestionAnswer struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI32(struct.questionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STU_ID_FIELD_DESC);
      oprot.writeI32(struct.stuId);
      oprot.writeFieldEnd();
      if (struct.stuAnswer != null) {
        oprot.writeFieldBegin(STU_ANSWER_FIELD_DESC);
        oprot.writeString(struct.stuAnswer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORRECT_FIELD_DESC);
      oprot.writeI32(struct.correct);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STU_SCORE_FIELD_DESC);
      oprot.writeI32(struct.stuScore);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StuQuestionAnswerTupleSchemeFactory implements SchemeFactory {
    public StuQuestionAnswerTupleScheme getScheme() {
      return new StuQuestionAnswerTupleScheme();
    }
  }

  private static class StuQuestionAnswerTupleScheme extends TupleScheme<StuQuestionAnswer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StuQuestionAnswer struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuestionId()) {
        optionals.set(0);
      }
      if (struct.isSetStuId()) {
        optionals.set(1);
      }
      if (struct.isSetStuAnswer()) {
        optionals.set(2);
      }
      if (struct.isSetCorrect()) {
        optionals.set(3);
      }
      if (struct.isSetStuScore()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetQuestionId()) {
        oprot.writeI32(struct.questionId);
      }
      if (struct.isSetStuId()) {
        oprot.writeI32(struct.stuId);
      }
      if (struct.isSetStuAnswer()) {
        oprot.writeString(struct.stuAnswer);
      }
      if (struct.isSetCorrect()) {
        oprot.writeI32(struct.correct);
      }
      if (struct.isSetStuScore()) {
        oprot.writeI32(struct.stuScore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StuQuestionAnswer struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.questionId = iprot.readI32();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stuId = iprot.readI32();
        struct.setStuIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stuAnswer = iprot.readString();
        struct.setStuAnswerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.correct = iprot.readI32();
        struct.setCorrectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stuScore = iprot.readI32();
        struct.setStuScoreIsSet(true);
      }
    }
  }

}

