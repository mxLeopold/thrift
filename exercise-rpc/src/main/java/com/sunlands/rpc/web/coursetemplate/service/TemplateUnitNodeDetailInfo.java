/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-07-02")
public class TemplateUnitNodeDetailInfo implements org.apache.thrift.TBase<TemplateUnitNodeDetailInfo, TemplateUnitNodeDetailInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateUnitNodeDetailInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateUnitNodeDetailInfo");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_FREQUENCY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeFrequencyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeNodeList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateUnitNodeDetailInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TemplateUnitNodeDetailInfoTupleSchemeFactory());
  }

  public int nodeId; // required
  public String nodeName; // required
  public TemplateUnitNodeInfo nodeFrequencyInfo; // required
  public List<TemplateUnitNodeDetailInfo> knowledgeNodeList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    NODE_NAME((short)2, "nodeName"),
    NODE_FREQUENCY_INFO((short)3, "nodeFrequencyInfo"),
    KNOWLEDGE_NODE_LIST((short)4, "knowledgeNodeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_NAME
          return NODE_NAME;
        case 3: // NODE_FREQUENCY_INFO
          return NODE_FREQUENCY_INFO;
        case 4: // KNOWLEDGE_NODE_LIST
          return KNOWLEDGE_NODE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("nodeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_FREQUENCY_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeFrequencyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnitNodeInfo.class)));
    tmpMap.put(_Fields.KNOWLEDGE_NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("knowledgeNodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TemplateUnitNodeDetailInfo"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateUnitNodeDetailInfo.class, metaDataMap);
  }

  public TemplateUnitNodeDetailInfo() {
  }

  public TemplateUnitNodeDetailInfo(
    int nodeId,
    String nodeName,
    TemplateUnitNodeInfo nodeFrequencyInfo,
    List<TemplateUnitNodeDetailInfo> knowledgeNodeList)
  {
    this();
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    this.nodeName = nodeName;
    this.nodeFrequencyInfo = nodeFrequencyInfo;
    this.knowledgeNodeList = knowledgeNodeList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateUnitNodeDetailInfo(TemplateUnitNodeDetailInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nodeId = other.nodeId;
    if (other.isSetNodeName()) {
      this.nodeName = other.nodeName;
    }
    if (other.isSetNodeFrequencyInfo()) {
      this.nodeFrequencyInfo = new TemplateUnitNodeInfo(other.nodeFrequencyInfo);
    }
    if (other.isSetKnowledgeNodeList()) {
      List<TemplateUnitNodeDetailInfo> __this__knowledgeNodeList = new ArrayList<TemplateUnitNodeDetailInfo>(other.knowledgeNodeList.size());
      for (TemplateUnitNodeDetailInfo other_element : other.knowledgeNodeList) {
        __this__knowledgeNodeList.add(other_element);
      }
      this.knowledgeNodeList = __this__knowledgeNodeList;
    }
  }

  public TemplateUnitNodeDetailInfo deepCopy() {
    return new TemplateUnitNodeDetailInfo(this);
  }

  @Override
  public void clear() {
    setNodeIdIsSet(false);
    this.nodeId = 0;
    this.nodeName = null;
    this.nodeFrequencyInfo = null;
    this.knowledgeNodeList = null;
  }

  public int getNodeId() {
    return this.nodeId;
  }

  public TemplateUnitNodeDetailInfo setNodeId(int nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
  }

  public String getNodeName() {
    return this.nodeName;
  }

  public TemplateUnitNodeDetailInfo setNodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  public void unsetNodeName() {
    this.nodeName = null;
  }

  /** Returns true if field nodeName is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeName() {
    return this.nodeName != null;
  }

  public void setNodeNameIsSet(boolean value) {
    if (!value) {
      this.nodeName = null;
    }
  }

  public TemplateUnitNodeInfo getNodeFrequencyInfo() {
    return this.nodeFrequencyInfo;
  }

  public TemplateUnitNodeDetailInfo setNodeFrequencyInfo(TemplateUnitNodeInfo nodeFrequencyInfo) {
    this.nodeFrequencyInfo = nodeFrequencyInfo;
    return this;
  }

  public void unsetNodeFrequencyInfo() {
    this.nodeFrequencyInfo = null;
  }

  /** Returns true if field nodeFrequencyInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeFrequencyInfo() {
    return this.nodeFrequencyInfo != null;
  }

  public void setNodeFrequencyInfoIsSet(boolean value) {
    if (!value) {
      this.nodeFrequencyInfo = null;
    }
  }

  public int getKnowledgeNodeListSize() {
    return (this.knowledgeNodeList == null) ? 0 : this.knowledgeNodeList.size();
  }

  public java.util.Iterator<TemplateUnitNodeDetailInfo> getKnowledgeNodeListIterator() {
    return (this.knowledgeNodeList == null) ? null : this.knowledgeNodeList.iterator();
  }

  public void addToKnowledgeNodeList(TemplateUnitNodeDetailInfo elem) {
    if (this.knowledgeNodeList == null) {
      this.knowledgeNodeList = new ArrayList<TemplateUnitNodeDetailInfo>();
    }
    this.knowledgeNodeList.add(elem);
  }

  public List<TemplateUnitNodeDetailInfo> getKnowledgeNodeList() {
    return this.knowledgeNodeList;
  }

  public TemplateUnitNodeDetailInfo setKnowledgeNodeList(List<TemplateUnitNodeDetailInfo> knowledgeNodeList) {
    this.knowledgeNodeList = knowledgeNodeList;
    return this;
  }

  public void unsetKnowledgeNodeList() {
    this.knowledgeNodeList = null;
  }

  /** Returns true if field knowledgeNodeList is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeNodeList() {
    return this.knowledgeNodeList != null;
  }

  public void setKnowledgeNodeListIsSet(boolean value) {
    if (!value) {
      this.knowledgeNodeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((Integer)value);
      }
      break;

    case NODE_NAME:
      if (value == null) {
        unsetNodeName();
      } else {
        setNodeName((String)value);
      }
      break;

    case NODE_FREQUENCY_INFO:
      if (value == null) {
        unsetNodeFrequencyInfo();
      } else {
        setNodeFrequencyInfo((TemplateUnitNodeInfo)value);
      }
      break;

    case KNOWLEDGE_NODE_LIST:
      if (value == null) {
        unsetKnowledgeNodeList();
      } else {
        setKnowledgeNodeList((List<TemplateUnitNodeDetailInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case NODE_NAME:
      return getNodeName();

    case NODE_FREQUENCY_INFO:
      return getNodeFrequencyInfo();

    case KNOWLEDGE_NODE_LIST:
      return getKnowledgeNodeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case NODE_NAME:
      return isSetNodeName();
    case NODE_FREQUENCY_INFO:
      return isSetNodeFrequencyInfo();
    case KNOWLEDGE_NODE_LIST:
      return isSetKnowledgeNodeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateUnitNodeDetailInfo)
      return this.equals((TemplateUnitNodeDetailInfo)that);
    return false;
  }

  public boolean equals(TemplateUnitNodeDetailInfo that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    boolean this_present_nodeName = true && this.isSetNodeName();
    boolean that_present_nodeName = true && that.isSetNodeName();
    if (this_present_nodeName || that_present_nodeName) {
      if (!(this_present_nodeName && that_present_nodeName))
        return false;
      if (!this.nodeName.equals(that.nodeName))
        return false;
    }

    boolean this_present_nodeFrequencyInfo = true && this.isSetNodeFrequencyInfo();
    boolean that_present_nodeFrequencyInfo = true && that.isSetNodeFrequencyInfo();
    if (this_present_nodeFrequencyInfo || that_present_nodeFrequencyInfo) {
      if (!(this_present_nodeFrequencyInfo && that_present_nodeFrequencyInfo))
        return false;
      if (!this.nodeFrequencyInfo.equals(that.nodeFrequencyInfo))
        return false;
    }

    boolean this_present_knowledgeNodeList = true && this.isSetKnowledgeNodeList();
    boolean that_present_knowledgeNodeList = true && that.isSetKnowledgeNodeList();
    if (this_present_knowledgeNodeList || that_present_knowledgeNodeList) {
      if (!(this_present_knowledgeNodeList && that_present_knowledgeNodeList))
        return false;
      if (!this.knowledgeNodeList.equals(that.knowledgeNodeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_nodeId = true;
    list.add(present_nodeId);
    if (present_nodeId)
      list.add(nodeId);

    boolean present_nodeName = true && (isSetNodeName());
    list.add(present_nodeName);
    if (present_nodeName)
      list.add(nodeName);

    boolean present_nodeFrequencyInfo = true && (isSetNodeFrequencyInfo());
    list.add(present_nodeFrequencyInfo);
    if (present_nodeFrequencyInfo)
      list.add(nodeFrequencyInfo);

    boolean present_knowledgeNodeList = true && (isSetKnowledgeNodeList());
    list.add(present_knowledgeNodeList);
    if (present_knowledgeNodeList)
      list.add(knowledgeNodeList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateUnitNodeDetailInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeName()).compareTo(other.isSetNodeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeName, other.nodeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeFrequencyInfo()).compareTo(other.isSetNodeFrequencyInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeFrequencyInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeFrequencyInfo, other.nodeFrequencyInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeNodeList()).compareTo(other.isSetKnowledgeNodeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeNodeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeNodeList, other.knowledgeNodeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateUnitNodeDetailInfo(");
    boolean first = true;

    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeName:");
    if (this.nodeName == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeFrequencyInfo:");
    if (this.nodeFrequencyInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeFrequencyInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeNodeList:");
    if (this.knowledgeNodeList == null) {
      sb.append("null");
    } else {
      sb.append(this.knowledgeNodeList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (nodeFrequencyInfo != null) {
      nodeFrequencyInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateUnitNodeDetailInfoStandardSchemeFactory implements SchemeFactory {
    public TemplateUnitNodeDetailInfoStandardScheme getScheme() {
      return new TemplateUnitNodeDetailInfoStandardScheme();
    }
  }

  private static class TemplateUnitNodeDetailInfoStandardScheme extends StandardScheme<TemplateUnitNodeDetailInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateUnitNodeDetailInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeId = iprot.readI32();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeName = iprot.readString();
              struct.setNodeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_FREQUENCY_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeFrequencyInfo = new TemplateUnitNodeInfo();
              struct.nodeFrequencyInfo.read(iprot);
              struct.setNodeFrequencyInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KNOWLEDGE_NODE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.knowledgeNodeList = new ArrayList<TemplateUnitNodeDetailInfo>(_list48.size);
                TemplateUnitNodeDetailInfo _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new TemplateUnitNodeDetailInfo();
                  _elem49.read(iprot);
                  struct.knowledgeNodeList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setKnowledgeNodeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateUnitNodeDetailInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.nodeId);
      oprot.writeFieldEnd();
      if (struct.nodeName != null) {
        oprot.writeFieldBegin(NODE_NAME_FIELD_DESC);
        oprot.writeString(struct.nodeName);
        oprot.writeFieldEnd();
      }
      if (struct.nodeFrequencyInfo != null) {
        oprot.writeFieldBegin(NODE_FREQUENCY_INFO_FIELD_DESC);
        struct.nodeFrequencyInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.knowledgeNodeList != null) {
        oprot.writeFieldBegin(KNOWLEDGE_NODE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.knowledgeNodeList.size()));
          for (TemplateUnitNodeDetailInfo _iter51 : struct.knowledgeNodeList)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateUnitNodeDetailInfoTupleSchemeFactory implements SchemeFactory {
    public TemplateUnitNodeDetailInfoTupleScheme getScheme() {
      return new TemplateUnitNodeDetailInfoTupleScheme();
    }
  }

  private static class TemplateUnitNodeDetailInfoTupleScheme extends TupleScheme<TemplateUnitNodeDetailInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateUnitNodeDetailInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeId()) {
        optionals.set(0);
      }
      if (struct.isSetNodeName()) {
        optionals.set(1);
      }
      if (struct.isSetNodeFrequencyInfo()) {
        optionals.set(2);
      }
      if (struct.isSetKnowledgeNodeList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNodeId()) {
        oprot.writeI32(struct.nodeId);
      }
      if (struct.isSetNodeName()) {
        oprot.writeString(struct.nodeName);
      }
      if (struct.isSetNodeFrequencyInfo()) {
        struct.nodeFrequencyInfo.write(oprot);
      }
      if (struct.isSetKnowledgeNodeList()) {
        {
          oprot.writeI32(struct.knowledgeNodeList.size());
          for (TemplateUnitNodeDetailInfo _iter52 : struct.knowledgeNodeList)
          {
            _iter52.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateUnitNodeDetailInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.nodeId = iprot.readI32();
        struct.setNodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nodeName = iprot.readString();
        struct.setNodeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeFrequencyInfo = new TemplateUnitNodeInfo();
        struct.nodeFrequencyInfo.read(iprot);
        struct.setNodeFrequencyInfoIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.knowledgeNodeList = new ArrayList<TemplateUnitNodeDetailInfo>(_list53.size);
          TemplateUnitNodeDetailInfo _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new TemplateUnitNodeDetailInfo();
            _elem54.read(iprot);
            struct.knowledgeNodeList.add(_elem54);
          }
        }
        struct.setKnowledgeNodeListIsSet(true);
      }
    }
  }

}

