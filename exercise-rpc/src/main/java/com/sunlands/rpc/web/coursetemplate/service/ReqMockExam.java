/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-25")
public class ReqMockExam implements org.apache.thrift.TBase<ReqMockExam, ReqMockExam._Fields>, java.io.Serializable, Cloneable, Comparable<ReqMockExam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqMockExam");

  private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operateType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXERCISE_EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseExamId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COLLEGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("collegeId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqMockExamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqMockExamTupleSchemeFactory());
  }

  public int roundId; // required
  public String operateType; // required
  public int exerciseExamId; // required
  public int collegeId; // required
  public int subjectId; // required
  public String name; // required
  public String startTime; // required
  public String endTime; // required
  public String paperCode; // required
  public String operator; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUND_ID((short)1, "roundId"),
    OPERATE_TYPE((short)2, "operateType"),
    EXERCISE_EXAM_ID((short)3, "exerciseExamId"),
    COLLEGE_ID((short)4, "collegeId"),
    SUBJECT_ID((short)5, "subjectId"),
    NAME((short)6, "name"),
    START_TIME((short)7, "startTime"),
    END_TIME((short)8, "endTime"),
    PAPER_CODE((short)9, "paperCode"),
    OPERATOR((short)10, "operator");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUND_ID
          return ROUND_ID;
        case 2: // OPERATE_TYPE
          return OPERATE_TYPE;
        case 3: // EXERCISE_EXAM_ID
          return EXERCISE_EXAM_ID;
        case 4: // COLLEGE_ID
          return COLLEGE_ID;
        case 5: // SUBJECT_ID
          return SUBJECT_ID;
        case 6: // NAME
          return NAME;
        case 7: // START_TIME
          return START_TIME;
        case 8: // END_TIME
          return END_TIME;
        case 9: // PAPER_CODE
          return PAPER_CODE;
        case 10: // OPERATOR
          return OPERATOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROUNDID_ISSET_ID = 0;
  private static final int __EXERCISEEXAMID_ISSET_ID = 1;
  private static final int __COLLEGEID_ISSET_ID = 2;
  private static final int __SUBJECTID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXERCISE_EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("exerciseExamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLLEGE_ID, new org.apache.thrift.meta_data.FieldMetaData("collegeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqMockExam.class, metaDataMap);
  }

  public ReqMockExam() {
  }

  public ReqMockExam(
    int roundId,
    String operateType,
    int exerciseExamId,
    int collegeId,
    int subjectId,
    String name,
    String startTime,
    String endTime,
    String paperCode,
    String operator)
  {
    this();
    this.roundId = roundId;
    setRoundIdIsSet(true);
    this.operateType = operateType;
    this.exerciseExamId = exerciseExamId;
    setExerciseExamIdIsSet(true);
    this.collegeId = collegeId;
    setCollegeIdIsSet(true);
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.name = name;
    this.startTime = startTime;
    this.endTime = endTime;
    this.paperCode = paperCode;
    this.operator = operator;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqMockExam(ReqMockExam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.roundId = other.roundId;
    if (other.isSetOperateType()) {
      this.operateType = other.operateType;
    }
    this.exerciseExamId = other.exerciseExamId;
    this.collegeId = other.collegeId;
    this.subjectId = other.subjectId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetPaperCode()) {
      this.paperCode = other.paperCode;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
  }

  public ReqMockExam deepCopy() {
    return new ReqMockExam(this);
  }

  @Override
  public void clear() {
    setRoundIdIsSet(false);
    this.roundId = 0;
    this.operateType = null;
    setExerciseExamIdIsSet(false);
    this.exerciseExamId = 0;
    setCollegeIdIsSet(false);
    this.collegeId = 0;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    this.name = null;
    this.startTime = null;
    this.endTime = null;
    this.paperCode = null;
    this.operator = null;
  }

  public int getRoundId() {
    return this.roundId;
  }

  public ReqMockExam setRoundId(int roundId) {
    this.roundId = roundId;
    setRoundIdIsSet(true);
    return this;
  }

  public void unsetRoundId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  public void setRoundIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
  }

  public String getOperateType() {
    return this.operateType;
  }

  public ReqMockExam setOperateType(String operateType) {
    this.operateType = operateType;
    return this;
  }

  public void unsetOperateType() {
    this.operateType = null;
  }

  /** Returns true if field operateType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateType() {
    return this.operateType != null;
  }

  public void setOperateTypeIsSet(boolean value) {
    if (!value) {
      this.operateType = null;
    }
  }

  public int getExerciseExamId() {
    return this.exerciseExamId;
  }

  public ReqMockExam setExerciseExamId(int exerciseExamId) {
    this.exerciseExamId = exerciseExamId;
    setExerciseExamIdIsSet(true);
    return this;
  }

  public void unsetExerciseExamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXERCISEEXAMID_ISSET_ID);
  }

  /** Returns true if field exerciseExamId is set (has been assigned a value) and false otherwise */
  public boolean isSetExerciseExamId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXERCISEEXAMID_ISSET_ID);
  }

  public void setExerciseExamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXERCISEEXAMID_ISSET_ID, value);
  }

  public int getCollegeId() {
    return this.collegeId;
  }

  public ReqMockExam setCollegeId(int collegeId) {
    this.collegeId = collegeId;
    setCollegeIdIsSet(true);
    return this;
  }

  public void unsetCollegeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLEGEID_ISSET_ID);
  }

  /** Returns true if field collegeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCollegeId() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLEGEID_ISSET_ID);
  }

  public void setCollegeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLEGEID_ISSET_ID, value);
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public ReqMockExam setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    return this;
  }

  public void unsetSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public ReqMockExam setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public ReqMockExam setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public ReqMockExam setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getPaperCode() {
    return this.paperCode;
  }

  public ReqMockExam setPaperCode(String paperCode) {
    this.paperCode = paperCode;
    return this;
  }

  public void unsetPaperCode() {
    this.paperCode = null;
  }

  /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperCode() {
    return this.paperCode != null;
  }

  public void setPaperCodeIsSet(boolean value) {
    if (!value) {
      this.paperCode = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public ReqMockExam setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROUND_ID:
      if (value == null) {
        unsetRoundId();
      } else {
        setRoundId((Integer)value);
      }
      break;

    case OPERATE_TYPE:
      if (value == null) {
        unsetOperateType();
      } else {
        setOperateType((String)value);
      }
      break;

    case EXERCISE_EXAM_ID:
      if (value == null) {
        unsetExerciseExamId();
      } else {
        setExerciseExamId((Integer)value);
      }
      break;

    case COLLEGE_ID:
      if (value == null) {
        unsetCollegeId();
      } else {
        setCollegeId((Integer)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case PAPER_CODE:
      if (value == null) {
        unsetPaperCode();
      } else {
        setPaperCode((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUND_ID:
      return getRoundId();

    case OPERATE_TYPE:
      return getOperateType();

    case EXERCISE_EXAM_ID:
      return getExerciseExamId();

    case COLLEGE_ID:
      return getCollegeId();

    case SUBJECT_ID:
      return getSubjectId();

    case NAME:
      return getName();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case PAPER_CODE:
      return getPaperCode();

    case OPERATOR:
      return getOperator();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROUND_ID:
      return isSetRoundId();
    case OPERATE_TYPE:
      return isSetOperateType();
    case EXERCISE_EXAM_ID:
      return isSetExerciseExamId();
    case COLLEGE_ID:
      return isSetCollegeId();
    case SUBJECT_ID:
      return isSetSubjectId();
    case NAME:
      return isSetName();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case PAPER_CODE:
      return isSetPaperCode();
    case OPERATOR:
      return isSetOperator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqMockExam)
      return this.equals((ReqMockExam)that);
    return false;
  }

  public boolean equals(ReqMockExam that) {
    if (that == null)
      return false;

    boolean this_present_roundId = true;
    boolean that_present_roundId = true;
    if (this_present_roundId || that_present_roundId) {
      if (!(this_present_roundId && that_present_roundId))
        return false;
      if (this.roundId != that.roundId)
        return false;
    }

    boolean this_present_operateType = true && this.isSetOperateType();
    boolean that_present_operateType = true && that.isSetOperateType();
    if (this_present_operateType || that_present_operateType) {
      if (!(this_present_operateType && that_present_operateType))
        return false;
      if (!this.operateType.equals(that.operateType))
        return false;
    }

    boolean this_present_exerciseExamId = true;
    boolean that_present_exerciseExamId = true;
    if (this_present_exerciseExamId || that_present_exerciseExamId) {
      if (!(this_present_exerciseExamId && that_present_exerciseExamId))
        return false;
      if (this.exerciseExamId != that.exerciseExamId)
        return false;
    }

    boolean this_present_collegeId = true;
    boolean that_present_collegeId = true;
    if (this_present_collegeId || that_present_collegeId) {
      if (!(this_present_collegeId && that_present_collegeId))
        return false;
      if (this.collegeId != that.collegeId)
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_paperCode = true && this.isSetPaperCode();
    boolean that_present_paperCode = true && that.isSetPaperCode();
    if (this_present_paperCode || that_present_paperCode) {
      if (!(this_present_paperCode && that_present_paperCode))
        return false;
      if (!this.paperCode.equals(that.paperCode))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_roundId = true;
    list.add(present_roundId);
    if (present_roundId)
      list.add(roundId);

    boolean present_operateType = true && (isSetOperateType());
    list.add(present_operateType);
    if (present_operateType)
      list.add(operateType);

    boolean present_exerciseExamId = true;
    list.add(present_exerciseExamId);
    if (present_exerciseExamId)
      list.add(exerciseExamId);

    boolean present_collegeId = true;
    list.add(present_collegeId);
    if (present_collegeId)
      list.add(collegeId);

    boolean present_subjectId = true;
    list.add(present_subjectId);
    if (present_subjectId)
      list.add(subjectId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_paperCode = true && (isSetPaperCode());
    list.add(present_paperCode);
    if (present_paperCode)
      list.add(paperCode);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReqMockExam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateType()).compareTo(other.isSetOperateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateType, other.operateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExerciseExamId()).compareTo(other.isSetExerciseExamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerciseExamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseExamId, other.exerciseExamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollegeId()).compareTo(other.isSetCollegeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollegeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collegeId, other.collegeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqMockExam(");
    boolean first = true;

    sb.append("roundId:");
    sb.append(this.roundId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateType:");
    if (this.operateType == null) {
      sb.append("null");
    } else {
      sb.append(this.operateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exerciseExamId:");
    sb.append(this.exerciseExamId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collegeId:");
    sb.append(this.collegeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperCode:");
    if (this.paperCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paperCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqMockExamStandardSchemeFactory implements SchemeFactory {
    public ReqMockExamStandardScheme getScheme() {
      return new ReqMockExamStandardScheme();
    }
  }

  private static class ReqMockExamStandardScheme extends StandardScheme<ReqMockExam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqMockExam struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roundId = iprot.readI32();
              struct.setRoundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateType = iprot.readString();
              struct.setOperateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXERCISE_EXAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exerciseExamId = iprot.readI32();
              struct.setExerciseExamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLLEGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collegeId = iprot.readI32();
              struct.setCollegeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAPER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperCode = iprot.readString();
              struct.setPaperCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqMockExam struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
      oprot.writeI32(struct.roundId);
      oprot.writeFieldEnd();
      if (struct.operateType != null) {
        oprot.writeFieldBegin(OPERATE_TYPE_FIELD_DESC);
        oprot.writeString(struct.operateType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXERCISE_EXAM_ID_FIELD_DESC);
      oprot.writeI32(struct.exerciseExamId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLEGE_ID_FIELD_DESC);
      oprot.writeI32(struct.collegeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeString(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.paperCode != null) {
        oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
        oprot.writeString(struct.paperCode);
        oprot.writeFieldEnd();
      }
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqMockExamTupleSchemeFactory implements SchemeFactory {
    public ReqMockExamTupleScheme getScheme() {
      return new ReqMockExamTupleScheme();
    }
  }

  private static class ReqMockExamTupleScheme extends TupleScheme<ReqMockExam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqMockExam struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoundId()) {
        optionals.set(0);
      }
      if (struct.isSetOperateType()) {
        optionals.set(1);
      }
      if (struct.isSetExerciseExamId()) {
        optionals.set(2);
      }
      if (struct.isSetCollegeId()) {
        optionals.set(3);
      }
      if (struct.isSetSubjectId()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetEndTime()) {
        optionals.set(7);
      }
      if (struct.isSetPaperCode()) {
        optionals.set(8);
      }
      if (struct.isSetOperator()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRoundId()) {
        oprot.writeI32(struct.roundId);
      }
      if (struct.isSetOperateType()) {
        oprot.writeString(struct.operateType);
      }
      if (struct.isSetExerciseExamId()) {
        oprot.writeI32(struct.exerciseExamId);
      }
      if (struct.isSetCollegeId()) {
        oprot.writeI32(struct.collegeId);
      }
      if (struct.isSetSubjectId()) {
        oprot.writeI32(struct.subjectId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetPaperCode()) {
        oprot.writeString(struct.paperCode);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqMockExam struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.roundId = iprot.readI32();
        struct.setRoundIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.operateType = iprot.readString();
        struct.setOperateTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exerciseExamId = iprot.readI32();
        struct.setExerciseExamIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.collegeId = iprot.readI32();
        struct.setCollegeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subjectId = iprot.readI32();
        struct.setSubjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.paperCode = iprot.readString();
        struct.setPaperCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
    }
  }

}

