/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-07-10")
public class TemplateUnitInfo implements org.apache.thrift.TBase<TemplateUnitInfo, TemplateUnitInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TemplateUnitInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TemplateUnitInfo");

  private static final org.apache.thrift.protocol.TField TEMPLATE_UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUnitId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_UNIT_NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("templateUnitNodeInfo", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TemplateUnitInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TemplateUnitInfoTupleSchemeFactory());
  }

  public int templateUnitId; // required
  public List<TemplateUnitNodeDetailInfo> templateUnitNodeInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEMPLATE_UNIT_ID((short)1, "templateUnitId"),
    TEMPLATE_UNIT_NODE_INFO((short)2, "templateUnitNodeInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMPLATE_UNIT_ID
          return TEMPLATE_UNIT_ID;
        case 2: // TEMPLATE_UNIT_NODE_INFO
          return TEMPLATE_UNIT_NODE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPLATEUNITID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMPLATE_UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("templateUnitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_UNIT_NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("templateUnitNodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TemplateUnitNodeDetailInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TemplateUnitInfo.class, metaDataMap);
  }

  public TemplateUnitInfo() {
  }

  public TemplateUnitInfo(
    int templateUnitId,
    List<TemplateUnitNodeDetailInfo> templateUnitNodeInfo)
  {
    this();
    this.templateUnitId = templateUnitId;
    setTemplateUnitIdIsSet(true);
    this.templateUnitNodeInfo = templateUnitNodeInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TemplateUnitInfo(TemplateUnitInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.templateUnitId = other.templateUnitId;
    if (other.isSetTemplateUnitNodeInfo()) {
      List<TemplateUnitNodeDetailInfo> __this__templateUnitNodeInfo = new ArrayList<TemplateUnitNodeDetailInfo>(other.templateUnitNodeInfo.size());
      for (TemplateUnitNodeDetailInfo other_element : other.templateUnitNodeInfo) {
        __this__templateUnitNodeInfo.add(new TemplateUnitNodeDetailInfo(other_element));
      }
      this.templateUnitNodeInfo = __this__templateUnitNodeInfo;
    }
  }

  public TemplateUnitInfo deepCopy() {
    return new TemplateUnitInfo(this);
  }

  @Override
  public void clear() {
    setTemplateUnitIdIsSet(false);
    this.templateUnitId = 0;
    this.templateUnitNodeInfo = null;
  }

  public int getTemplateUnitId() {
    return this.templateUnitId;
  }

  public TemplateUnitInfo setTemplateUnitId(int templateUnitId) {
    this.templateUnitId = templateUnitId;
    setTemplateUnitIdIsSet(true);
    return this;
  }

  public void unsetTemplateUnitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID);
  }

  /** Returns true if field templateUnitId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUnitId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID);
  }

  public void setTemplateUnitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEUNITID_ISSET_ID, value);
  }

  public int getTemplateUnitNodeInfoSize() {
    return (this.templateUnitNodeInfo == null) ? 0 : this.templateUnitNodeInfo.size();
  }

  public java.util.Iterator<TemplateUnitNodeDetailInfo> getTemplateUnitNodeInfoIterator() {
    return (this.templateUnitNodeInfo == null) ? null : this.templateUnitNodeInfo.iterator();
  }

  public void addToTemplateUnitNodeInfo(TemplateUnitNodeDetailInfo elem) {
    if (this.templateUnitNodeInfo == null) {
      this.templateUnitNodeInfo = new ArrayList<TemplateUnitNodeDetailInfo>();
    }
    this.templateUnitNodeInfo.add(elem);
  }

  public List<TemplateUnitNodeDetailInfo> getTemplateUnitNodeInfo() {
    return this.templateUnitNodeInfo;
  }

  public TemplateUnitInfo setTemplateUnitNodeInfo(List<TemplateUnitNodeDetailInfo> templateUnitNodeInfo) {
    this.templateUnitNodeInfo = templateUnitNodeInfo;
    return this;
  }

  public void unsetTemplateUnitNodeInfo() {
    this.templateUnitNodeInfo = null;
  }

  /** Returns true if field templateUnitNodeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateUnitNodeInfo() {
    return this.templateUnitNodeInfo != null;
  }

  public void setTemplateUnitNodeInfoIsSet(boolean value) {
    if (!value) {
      this.templateUnitNodeInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMPLATE_UNIT_ID:
      if (value == null) {
        unsetTemplateUnitId();
      } else {
        setTemplateUnitId((Integer)value);
      }
      break;

    case TEMPLATE_UNIT_NODE_INFO:
      if (value == null) {
        unsetTemplateUnitNodeInfo();
      } else {
        setTemplateUnitNodeInfo((List<TemplateUnitNodeDetailInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMPLATE_UNIT_ID:
      return getTemplateUnitId();

    case TEMPLATE_UNIT_NODE_INFO:
      return getTemplateUnitNodeInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMPLATE_UNIT_ID:
      return isSetTemplateUnitId();
    case TEMPLATE_UNIT_NODE_INFO:
      return isSetTemplateUnitNodeInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TemplateUnitInfo)
      return this.equals((TemplateUnitInfo)that);
    return false;
  }

  public boolean equals(TemplateUnitInfo that) {
    if (that == null)
      return false;

    boolean this_present_templateUnitId = true;
    boolean that_present_templateUnitId = true;
    if (this_present_templateUnitId || that_present_templateUnitId) {
      if (!(this_present_templateUnitId && that_present_templateUnitId))
        return false;
      if (this.templateUnitId != that.templateUnitId)
        return false;
    }

    boolean this_present_templateUnitNodeInfo = true && this.isSetTemplateUnitNodeInfo();
    boolean that_present_templateUnitNodeInfo = true && that.isSetTemplateUnitNodeInfo();
    if (this_present_templateUnitNodeInfo || that_present_templateUnitNodeInfo) {
      if (!(this_present_templateUnitNodeInfo && that_present_templateUnitNodeInfo))
        return false;
      if (!this.templateUnitNodeInfo.equals(that.templateUnitNodeInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_templateUnitId = true;
    list.add(present_templateUnitId);
    if (present_templateUnitId)
      list.add(templateUnitId);

    boolean present_templateUnitNodeInfo = true && (isSetTemplateUnitNodeInfo());
    list.add(present_templateUnitNodeInfo);
    if (present_templateUnitNodeInfo)
      list.add(templateUnitNodeInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TemplateUnitInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTemplateUnitId()).compareTo(other.isSetTemplateUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUnitId, other.templateUnitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateUnitNodeInfo()).compareTo(other.isSetTemplateUnitNodeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateUnitNodeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateUnitNodeInfo, other.templateUnitNodeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TemplateUnitInfo(");
    boolean first = true;

    sb.append("templateUnitId:");
    sb.append(this.templateUnitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateUnitNodeInfo:");
    if (this.templateUnitNodeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.templateUnitNodeInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TemplateUnitInfoStandardSchemeFactory implements SchemeFactory {
    public TemplateUnitInfoStandardScheme getScheme() {
      return new TemplateUnitInfoStandardScheme();
    }
  }

  private static class TemplateUnitInfoStandardScheme extends StandardScheme<TemplateUnitInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TemplateUnitInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMPLATE_UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateUnitId = iprot.readI32();
              struct.setTemplateUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_UNIT_NODE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.templateUnitNodeInfo = new ArrayList<TemplateUnitNodeDetailInfo>(_list56.size);
                TemplateUnitNodeDetailInfo _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new TemplateUnitNodeDetailInfo();
                  _elem57.read(iprot);
                  struct.templateUnitNodeInfo.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTemplateUnitNodeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TemplateUnitInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEMPLATE_UNIT_ID_FIELD_DESC);
      oprot.writeI32(struct.templateUnitId);
      oprot.writeFieldEnd();
      if (struct.templateUnitNodeInfo != null) {
        oprot.writeFieldBegin(TEMPLATE_UNIT_NODE_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.templateUnitNodeInfo.size()));
          for (TemplateUnitNodeDetailInfo _iter59 : struct.templateUnitNodeInfo)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TemplateUnitInfoTupleSchemeFactory implements SchemeFactory {
    public TemplateUnitInfoTupleScheme getScheme() {
      return new TemplateUnitInfoTupleScheme();
    }
  }

  private static class TemplateUnitInfoTupleScheme extends TupleScheme<TemplateUnitInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TemplateUnitInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTemplateUnitId()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateUnitNodeInfo()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTemplateUnitId()) {
        oprot.writeI32(struct.templateUnitId);
      }
      if (struct.isSetTemplateUnitNodeInfo()) {
        {
          oprot.writeI32(struct.templateUnitNodeInfo.size());
          for (TemplateUnitNodeDetailInfo _iter60 : struct.templateUnitNodeInfo)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TemplateUnitInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.templateUnitId = iprot.readI32();
        struct.setTemplateUnitIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.templateUnitNodeInfo = new ArrayList<TemplateUnitNodeDetailInfo>(_list61.size);
          TemplateUnitNodeDetailInfo _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new TemplateUnitNodeDetailInfo();
            _elem62.read(iprot);
            struct.templateUnitNodeInfo.add(_elem62);
          }
        }
        struct.setTemplateUnitNodeInfoIsSet(true);
      }
    }
  }

}

