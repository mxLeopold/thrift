/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-21")
public class WorkPaperReportList implements org.apache.thrift.TBase<WorkPaperReportList, WorkPaperReportList._Fields>, java.io.Serializable, Cloneable, Comparable<WorkPaperReportList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkPaperReportList");

  private static final org.apache.thrift.protocol.TField FIELD1_FIELD_DESC = new org.apache.thrift.protocol.TField("field1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD2_FIELD_DESC = new org.apache.thrift.protocol.TField("field2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD3_FIELD_DESC = new org.apache.thrift.protocol.TField("field3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD4_FIELD_DESC = new org.apache.thrift.protocol.TField("field4", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD5_FIELD_DESC = new org.apache.thrift.protocol.TField("field5", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paperName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAPER_TYPE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperTypeCode", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SYSTEM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("systemNumber", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("userNumber", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USER_PAPER_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("userPaperPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField WORK_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workGroupId", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkPaperReportListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkPaperReportListTupleSchemeFactory());
  }

  public String field1; // required
  public String field2; // required
  public String field3; // required
  public String field4; // required
  public String field5; // required
  public String paperId; // required
  public String paperName; // required
  public String paperTypeCode; // required
  public List<WorkPaperReport> result; // required
  public String systemNumber; // required
  public String userNumber; // required
  public double userPaperPoint; // required
  public String workGroupId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD1((short)1, "field1"),
    FIELD2((short)2, "field2"),
    FIELD3((short)3, "field3"),
    FIELD4((short)4, "field4"),
    FIELD5((short)5, "field5"),
    PAPER_ID((short)6, "paperId"),
    PAPER_NAME((short)7, "paperName"),
    PAPER_TYPE_CODE((short)8, "paperTypeCode"),
    RESULT((short)9, "result"),
    SYSTEM_NUMBER((short)10, "systemNumber"),
    USER_NUMBER((short)11, "userNumber"),
    USER_PAPER_POINT((short)12, "userPaperPoint"),
    WORK_GROUP_ID((short)13, "workGroupId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD1
          return FIELD1;
        case 2: // FIELD2
          return FIELD2;
        case 3: // FIELD3
          return FIELD3;
        case 4: // FIELD4
          return FIELD4;
        case 5: // FIELD5
          return FIELD5;
        case 6: // PAPER_ID
          return PAPER_ID;
        case 7: // PAPER_NAME
          return PAPER_NAME;
        case 8: // PAPER_TYPE_CODE
          return PAPER_TYPE_CODE;
        case 9: // RESULT
          return RESULT;
        case 10: // SYSTEM_NUMBER
          return SYSTEM_NUMBER;
        case 11: // USER_NUMBER
          return USER_NUMBER;
        case 12: // USER_PAPER_POINT
          return USER_PAPER_POINT;
        case 13: // WORK_GROUP_ID
          return WORK_GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERPAPERPOINT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD1, new org.apache.thrift.meta_data.FieldMetaData("field1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD2, new org.apache.thrift.meta_data.FieldMetaData("field2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD3, new org.apache.thrift.meta_data.FieldMetaData("field3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD4, new org.apache.thrift.meta_data.FieldMetaData("field4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD5, new org.apache.thrift.meta_data.FieldMetaData("field5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("paperName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_TYPE_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperTypeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "WorkPaperReport"))));
    tmpMap.put(_Fields.SYSTEM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("systemNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("userNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PAPER_POINT, new org.apache.thrift.meta_data.FieldMetaData("userPaperPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WORK_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("workGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkPaperReportList.class, metaDataMap);
  }

  public WorkPaperReportList() {
  }

  public WorkPaperReportList(
    String field1,
    String field2,
    String field3,
    String field4,
    String field5,
    String paperId,
    String paperName,
    String paperTypeCode,
    List<WorkPaperReport> result,
    String systemNumber,
    String userNumber,
    double userPaperPoint,
    String workGroupId)
  {
    this();
    this.field1 = field1;
    this.field2 = field2;
    this.field3 = field3;
    this.field4 = field4;
    this.field5 = field5;
    this.paperId = paperId;
    this.paperName = paperName;
    this.paperTypeCode = paperTypeCode;
    this.result = result;
    this.systemNumber = systemNumber;
    this.userNumber = userNumber;
    this.userPaperPoint = userPaperPoint;
    setUserPaperPointIsSet(true);
    this.workGroupId = workGroupId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkPaperReportList(WorkPaperReportList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetField1()) {
      this.field1 = other.field1;
    }
    if (other.isSetField2()) {
      this.field2 = other.field2;
    }
    if (other.isSetField3()) {
      this.field3 = other.field3;
    }
    if (other.isSetField4()) {
      this.field4 = other.field4;
    }
    if (other.isSetField5()) {
      this.field5 = other.field5;
    }
    if (other.isSetPaperId()) {
      this.paperId = other.paperId;
    }
    if (other.isSetPaperName()) {
      this.paperName = other.paperName;
    }
    if (other.isSetPaperTypeCode()) {
      this.paperTypeCode = other.paperTypeCode;
    }
    if (other.isSetResult()) {
      List<WorkPaperReport> __this__result = new ArrayList<WorkPaperReport>(other.result.size());
      for (WorkPaperReport other_element : other.result) {
        __this__result.add(other_element);
      }
      this.result = __this__result;
    }
    if (other.isSetSystemNumber()) {
      this.systemNumber = other.systemNumber;
    }
    if (other.isSetUserNumber()) {
      this.userNumber = other.userNumber;
    }
    this.userPaperPoint = other.userPaperPoint;
    if (other.isSetWorkGroupId()) {
      this.workGroupId = other.workGroupId;
    }
  }

  public WorkPaperReportList deepCopy() {
    return new WorkPaperReportList(this);
  }

  @Override
  public void clear() {
    this.field1 = null;
    this.field2 = null;
    this.field3 = null;
    this.field4 = null;
    this.field5 = null;
    this.paperId = null;
    this.paperName = null;
    this.paperTypeCode = null;
    this.result = null;
    this.systemNumber = null;
    this.userNumber = null;
    setUserPaperPointIsSet(false);
    this.userPaperPoint = 0.0;
    this.workGroupId = null;
  }

  public String getField1() {
    return this.field1;
  }

  public WorkPaperReportList setField1(String field1) {
    this.field1 = field1;
    return this;
  }

  public void unsetField1() {
    this.field1 = null;
  }

  /** Returns true if field field1 is set (has been assigned a value) and false otherwise */
  public boolean isSetField1() {
    return this.field1 != null;
  }

  public void setField1IsSet(boolean value) {
    if (!value) {
      this.field1 = null;
    }
  }

  public String getField2() {
    return this.field2;
  }

  public WorkPaperReportList setField2(String field2) {
    this.field2 = field2;
    return this;
  }

  public void unsetField2() {
    this.field2 = null;
  }

  /** Returns true if field field2 is set (has been assigned a value) and false otherwise */
  public boolean isSetField2() {
    return this.field2 != null;
  }

  public void setField2IsSet(boolean value) {
    if (!value) {
      this.field2 = null;
    }
  }

  public String getField3() {
    return this.field3;
  }

  public WorkPaperReportList setField3(String field3) {
    this.field3 = field3;
    return this;
  }

  public void unsetField3() {
    this.field3 = null;
  }

  /** Returns true if field field3 is set (has been assigned a value) and false otherwise */
  public boolean isSetField3() {
    return this.field3 != null;
  }

  public void setField3IsSet(boolean value) {
    if (!value) {
      this.field3 = null;
    }
  }

  public String getField4() {
    return this.field4;
  }

  public WorkPaperReportList setField4(String field4) {
    this.field4 = field4;
    return this;
  }

  public void unsetField4() {
    this.field4 = null;
  }

  /** Returns true if field field4 is set (has been assigned a value) and false otherwise */
  public boolean isSetField4() {
    return this.field4 != null;
  }

  public void setField4IsSet(boolean value) {
    if (!value) {
      this.field4 = null;
    }
  }

  public String getField5() {
    return this.field5;
  }

  public WorkPaperReportList setField5(String field5) {
    this.field5 = field5;
    return this;
  }

  public void unsetField5() {
    this.field5 = null;
  }

  /** Returns true if field field5 is set (has been assigned a value) and false otherwise */
  public boolean isSetField5() {
    return this.field5 != null;
  }

  public void setField5IsSet(boolean value) {
    if (!value) {
      this.field5 = null;
    }
  }

  public String getPaperId() {
    return this.paperId;
  }

  public WorkPaperReportList setPaperId(String paperId) {
    this.paperId = paperId;
    return this;
  }

  public void unsetPaperId() {
    this.paperId = null;
  }

  /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperId() {
    return this.paperId != null;
  }

  public void setPaperIdIsSet(boolean value) {
    if (!value) {
      this.paperId = null;
    }
  }

  public String getPaperName() {
    return this.paperName;
  }

  public WorkPaperReportList setPaperName(String paperName) {
    this.paperName = paperName;
    return this;
  }

  public void unsetPaperName() {
    this.paperName = null;
  }

  /** Returns true if field paperName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperName() {
    return this.paperName != null;
  }

  public void setPaperNameIsSet(boolean value) {
    if (!value) {
      this.paperName = null;
    }
  }

  public String getPaperTypeCode() {
    return this.paperTypeCode;
  }

  public WorkPaperReportList setPaperTypeCode(String paperTypeCode) {
    this.paperTypeCode = paperTypeCode;
    return this;
  }

  public void unsetPaperTypeCode() {
    this.paperTypeCode = null;
  }

  /** Returns true if field paperTypeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperTypeCode() {
    return this.paperTypeCode != null;
  }

  public void setPaperTypeCodeIsSet(boolean value) {
    if (!value) {
      this.paperTypeCode = null;
    }
  }

  public int getResultSize() {
    return (this.result == null) ? 0 : this.result.size();
  }

  public java.util.Iterator<WorkPaperReport> getResultIterator() {
    return (this.result == null) ? null : this.result.iterator();
  }

  public void addToResult(WorkPaperReport elem) {
    if (this.result == null) {
      this.result = new ArrayList<WorkPaperReport>();
    }
    this.result.add(elem);
  }

  public List<WorkPaperReport> getResult() {
    return this.result;
  }

  public WorkPaperReportList setResult(List<WorkPaperReport> result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getSystemNumber() {
    return this.systemNumber;
  }

  public WorkPaperReportList setSystemNumber(String systemNumber) {
    this.systemNumber = systemNumber;
    return this;
  }

  public void unsetSystemNumber() {
    this.systemNumber = null;
  }

  /** Returns true if field systemNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemNumber() {
    return this.systemNumber != null;
  }

  public void setSystemNumberIsSet(boolean value) {
    if (!value) {
      this.systemNumber = null;
    }
  }

  public String getUserNumber() {
    return this.userNumber;
  }

  public WorkPaperReportList setUserNumber(String userNumber) {
    this.userNumber = userNumber;
    return this;
  }

  public void unsetUserNumber() {
    this.userNumber = null;
  }

  /** Returns true if field userNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetUserNumber() {
    return this.userNumber != null;
  }

  public void setUserNumberIsSet(boolean value) {
    if (!value) {
      this.userNumber = null;
    }
  }

  public double getUserPaperPoint() {
    return this.userPaperPoint;
  }

  public WorkPaperReportList setUserPaperPoint(double userPaperPoint) {
    this.userPaperPoint = userPaperPoint;
    setUserPaperPointIsSet(true);
    return this;
  }

  public void unsetUserPaperPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERPAPERPOINT_ISSET_ID);
  }

  /** Returns true if field userPaperPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPaperPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __USERPAPERPOINT_ISSET_ID);
  }

  public void setUserPaperPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERPAPERPOINT_ISSET_ID, value);
  }

  public String getWorkGroupId() {
    return this.workGroupId;
  }

  public WorkPaperReportList setWorkGroupId(String workGroupId) {
    this.workGroupId = workGroupId;
    return this;
  }

  public void unsetWorkGroupId() {
    this.workGroupId = null;
  }

  /** Returns true if field workGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkGroupId() {
    return this.workGroupId != null;
  }

  public void setWorkGroupIdIsSet(boolean value) {
    if (!value) {
      this.workGroupId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD1:
      if (value == null) {
        unsetField1();
      } else {
        setField1((String)value);
      }
      break;

    case FIELD2:
      if (value == null) {
        unsetField2();
      } else {
        setField2((String)value);
      }
      break;

    case FIELD3:
      if (value == null) {
        unsetField3();
      } else {
        setField3((String)value);
      }
      break;

    case FIELD4:
      if (value == null) {
        unsetField4();
      } else {
        setField4((String)value);
      }
      break;

    case FIELD5:
      if (value == null) {
        unsetField5();
      } else {
        setField5((String)value);
      }
      break;

    case PAPER_ID:
      if (value == null) {
        unsetPaperId();
      } else {
        setPaperId((String)value);
      }
      break;

    case PAPER_NAME:
      if (value == null) {
        unsetPaperName();
      } else {
        setPaperName((String)value);
      }
      break;

    case PAPER_TYPE_CODE:
      if (value == null) {
        unsetPaperTypeCode();
      } else {
        setPaperTypeCode((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((List<WorkPaperReport>)value);
      }
      break;

    case SYSTEM_NUMBER:
      if (value == null) {
        unsetSystemNumber();
      } else {
        setSystemNumber((String)value);
      }
      break;

    case USER_NUMBER:
      if (value == null) {
        unsetUserNumber();
      } else {
        setUserNumber((String)value);
      }
      break;

    case USER_PAPER_POINT:
      if (value == null) {
        unsetUserPaperPoint();
      } else {
        setUserPaperPoint((Double)value);
      }
      break;

    case WORK_GROUP_ID:
      if (value == null) {
        unsetWorkGroupId();
      } else {
        setWorkGroupId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD1:
      return getField1();

    case FIELD2:
      return getField2();

    case FIELD3:
      return getField3();

    case FIELD4:
      return getField4();

    case FIELD5:
      return getField5();

    case PAPER_ID:
      return getPaperId();

    case PAPER_NAME:
      return getPaperName();

    case PAPER_TYPE_CODE:
      return getPaperTypeCode();

    case RESULT:
      return getResult();

    case SYSTEM_NUMBER:
      return getSystemNumber();

    case USER_NUMBER:
      return getUserNumber();

    case USER_PAPER_POINT:
      return getUserPaperPoint();

    case WORK_GROUP_ID:
      return getWorkGroupId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD1:
      return isSetField1();
    case FIELD2:
      return isSetField2();
    case FIELD3:
      return isSetField3();
    case FIELD4:
      return isSetField4();
    case FIELD5:
      return isSetField5();
    case PAPER_ID:
      return isSetPaperId();
    case PAPER_NAME:
      return isSetPaperName();
    case PAPER_TYPE_CODE:
      return isSetPaperTypeCode();
    case RESULT:
      return isSetResult();
    case SYSTEM_NUMBER:
      return isSetSystemNumber();
    case USER_NUMBER:
      return isSetUserNumber();
    case USER_PAPER_POINT:
      return isSetUserPaperPoint();
    case WORK_GROUP_ID:
      return isSetWorkGroupId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkPaperReportList)
      return this.equals((WorkPaperReportList)that);
    return false;
  }

  public boolean equals(WorkPaperReportList that) {
    if (that == null)
      return false;

    boolean this_present_field1 = true && this.isSetField1();
    boolean that_present_field1 = true && that.isSetField1();
    if (this_present_field1 || that_present_field1) {
      if (!(this_present_field1 && that_present_field1))
        return false;
      if (!this.field1.equals(that.field1))
        return false;
    }

    boolean this_present_field2 = true && this.isSetField2();
    boolean that_present_field2 = true && that.isSetField2();
    if (this_present_field2 || that_present_field2) {
      if (!(this_present_field2 && that_present_field2))
        return false;
      if (!this.field2.equals(that.field2))
        return false;
    }

    boolean this_present_field3 = true && this.isSetField3();
    boolean that_present_field3 = true && that.isSetField3();
    if (this_present_field3 || that_present_field3) {
      if (!(this_present_field3 && that_present_field3))
        return false;
      if (!this.field3.equals(that.field3))
        return false;
    }

    boolean this_present_field4 = true && this.isSetField4();
    boolean that_present_field4 = true && that.isSetField4();
    if (this_present_field4 || that_present_field4) {
      if (!(this_present_field4 && that_present_field4))
        return false;
      if (!this.field4.equals(that.field4))
        return false;
    }

    boolean this_present_field5 = true && this.isSetField5();
    boolean that_present_field5 = true && that.isSetField5();
    if (this_present_field5 || that_present_field5) {
      if (!(this_present_field5 && that_present_field5))
        return false;
      if (!this.field5.equals(that.field5))
        return false;
    }

    boolean this_present_paperId = true && this.isSetPaperId();
    boolean that_present_paperId = true && that.isSetPaperId();
    if (this_present_paperId || that_present_paperId) {
      if (!(this_present_paperId && that_present_paperId))
        return false;
      if (!this.paperId.equals(that.paperId))
        return false;
    }

    boolean this_present_paperName = true && this.isSetPaperName();
    boolean that_present_paperName = true && that.isSetPaperName();
    if (this_present_paperName || that_present_paperName) {
      if (!(this_present_paperName && that_present_paperName))
        return false;
      if (!this.paperName.equals(that.paperName))
        return false;
    }

    boolean this_present_paperTypeCode = true && this.isSetPaperTypeCode();
    boolean that_present_paperTypeCode = true && that.isSetPaperTypeCode();
    if (this_present_paperTypeCode || that_present_paperTypeCode) {
      if (!(this_present_paperTypeCode && that_present_paperTypeCode))
        return false;
      if (!this.paperTypeCode.equals(that.paperTypeCode))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_systemNumber = true && this.isSetSystemNumber();
    boolean that_present_systemNumber = true && that.isSetSystemNumber();
    if (this_present_systemNumber || that_present_systemNumber) {
      if (!(this_present_systemNumber && that_present_systemNumber))
        return false;
      if (!this.systemNumber.equals(that.systemNumber))
        return false;
    }

    boolean this_present_userNumber = true && this.isSetUserNumber();
    boolean that_present_userNumber = true && that.isSetUserNumber();
    if (this_present_userNumber || that_present_userNumber) {
      if (!(this_present_userNumber && that_present_userNumber))
        return false;
      if (!this.userNumber.equals(that.userNumber))
        return false;
    }

    boolean this_present_userPaperPoint = true;
    boolean that_present_userPaperPoint = true;
    if (this_present_userPaperPoint || that_present_userPaperPoint) {
      if (!(this_present_userPaperPoint && that_present_userPaperPoint))
        return false;
      if (this.userPaperPoint != that.userPaperPoint)
        return false;
    }

    boolean this_present_workGroupId = true && this.isSetWorkGroupId();
    boolean that_present_workGroupId = true && that.isSetWorkGroupId();
    if (this_present_workGroupId || that_present_workGroupId) {
      if (!(this_present_workGroupId && that_present_workGroupId))
        return false;
      if (!this.workGroupId.equals(that.workGroupId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_field1 = true && (isSetField1());
    list.add(present_field1);
    if (present_field1)
      list.add(field1);

    boolean present_field2 = true && (isSetField2());
    list.add(present_field2);
    if (present_field2)
      list.add(field2);

    boolean present_field3 = true && (isSetField3());
    list.add(present_field3);
    if (present_field3)
      list.add(field3);

    boolean present_field4 = true && (isSetField4());
    list.add(present_field4);
    if (present_field4)
      list.add(field4);

    boolean present_field5 = true && (isSetField5());
    list.add(present_field5);
    if (present_field5)
      list.add(field5);

    boolean present_paperId = true && (isSetPaperId());
    list.add(present_paperId);
    if (present_paperId)
      list.add(paperId);

    boolean present_paperName = true && (isSetPaperName());
    list.add(present_paperName);
    if (present_paperName)
      list.add(paperName);

    boolean present_paperTypeCode = true && (isSetPaperTypeCode());
    list.add(present_paperTypeCode);
    if (present_paperTypeCode)
      list.add(paperTypeCode);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_systemNumber = true && (isSetSystemNumber());
    list.add(present_systemNumber);
    if (present_systemNumber)
      list.add(systemNumber);

    boolean present_userNumber = true && (isSetUserNumber());
    list.add(present_userNumber);
    if (present_userNumber)
      list.add(userNumber);

    boolean present_userPaperPoint = true;
    list.add(present_userPaperPoint);
    if (present_userPaperPoint)
      list.add(userPaperPoint);

    boolean present_workGroupId = true && (isSetWorkGroupId());
    list.add(present_workGroupId);
    if (present_workGroupId)
      list.add(workGroupId);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorkPaperReportList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetField1()).compareTo(other.isSetField1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field1, other.field1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField2()).compareTo(other.isSetField2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field2, other.field2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField3()).compareTo(other.isSetField3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field3, other.field3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField4()).compareTo(other.isSetField4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field4, other.field4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetField5()).compareTo(other.isSetField5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field5, other.field5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperName()).compareTo(other.isSetPaperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperName, other.paperName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperTypeCode()).compareTo(other.isSetPaperTypeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperTypeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperTypeCode, other.paperTypeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemNumber()).compareTo(other.isSetSystemNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemNumber, other.systemNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserNumber()).compareTo(other.isSetUserNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userNumber, other.userNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPaperPoint()).compareTo(other.isSetUserPaperPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPaperPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPaperPoint, other.userPaperPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkGroupId()).compareTo(other.isSetWorkGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workGroupId, other.workGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkPaperReportList(");
    boolean first = true;

    sb.append("field1:");
    if (this.field1 == null) {
      sb.append("null");
    } else {
      sb.append(this.field1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field2:");
    if (this.field2 == null) {
      sb.append("null");
    } else {
      sb.append(this.field2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field3:");
    if (this.field3 == null) {
      sb.append("null");
    } else {
      sb.append(this.field3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field4:");
    if (this.field4 == null) {
      sb.append("null");
    } else {
      sb.append(this.field4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field5:");
    if (this.field5 == null) {
      sb.append("null");
    } else {
      sb.append(this.field5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperId:");
    if (this.paperId == null) {
      sb.append("null");
    } else {
      sb.append(this.paperId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperName:");
    if (this.paperName == null) {
      sb.append("null");
    } else {
      sb.append(this.paperName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperTypeCode:");
    if (this.paperTypeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paperTypeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemNumber:");
    if (this.systemNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.systemNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userNumber:");
    if (this.userNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.userNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPaperPoint:");
    sb.append(this.userPaperPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workGroupId:");
    if (this.workGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.workGroupId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkPaperReportListStandardSchemeFactory implements SchemeFactory {
    public WorkPaperReportListStandardScheme getScheme() {
      return new WorkPaperReportListStandardScheme();
    }
  }

  private static class WorkPaperReportListStandardScheme extends StandardScheme<WorkPaperReportList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkPaperReportList struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field1 = iprot.readString();
              struct.setField1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field2 = iprot.readString();
              struct.setField2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field3 = iprot.readString();
              struct.setField3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field4 = iprot.readString();
              struct.setField4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field5 = iprot.readString();
              struct.setField5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperId = iprot.readString();
              struct.setPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperName = iprot.readString();
              struct.setPaperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAPER_TYPE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperTypeCode = iprot.readString();
              struct.setPaperTypeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.result = new ArrayList<WorkPaperReport>(_list0.size);
                WorkPaperReport _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new WorkPaperReport();
                  _elem1.read(iprot);
                  struct.result.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SYSTEM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemNumber = iprot.readString();
              struct.setSystemNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userNumber = iprot.readString();
              struct.setUserNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USER_PAPER_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.userPaperPoint = iprot.readDouble();
              struct.setUserPaperPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WORK_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workGroupId = iprot.readString();
              struct.setWorkGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkPaperReportList struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field1 != null) {
        oprot.writeFieldBegin(FIELD1_FIELD_DESC);
        oprot.writeString(struct.field1);
        oprot.writeFieldEnd();
      }
      if (struct.field2 != null) {
        oprot.writeFieldBegin(FIELD2_FIELD_DESC);
        oprot.writeString(struct.field2);
        oprot.writeFieldEnd();
      }
      if (struct.field3 != null) {
        oprot.writeFieldBegin(FIELD3_FIELD_DESC);
        oprot.writeString(struct.field3);
        oprot.writeFieldEnd();
      }
      if (struct.field4 != null) {
        oprot.writeFieldBegin(FIELD4_FIELD_DESC);
        oprot.writeString(struct.field4);
        oprot.writeFieldEnd();
      }
      if (struct.field5 != null) {
        oprot.writeFieldBegin(FIELD5_FIELD_DESC);
        oprot.writeString(struct.field5);
        oprot.writeFieldEnd();
      }
      if (struct.paperId != null) {
        oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
        oprot.writeString(struct.paperId);
        oprot.writeFieldEnd();
      }
      if (struct.paperName != null) {
        oprot.writeFieldBegin(PAPER_NAME_FIELD_DESC);
        oprot.writeString(struct.paperName);
        oprot.writeFieldEnd();
      }
      if (struct.paperTypeCode != null) {
        oprot.writeFieldBegin(PAPER_TYPE_CODE_FIELD_DESC);
        oprot.writeString(struct.paperTypeCode);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.result.size()));
          for (WorkPaperReport _iter3 : struct.result)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.systemNumber != null) {
        oprot.writeFieldBegin(SYSTEM_NUMBER_FIELD_DESC);
        oprot.writeString(struct.systemNumber);
        oprot.writeFieldEnd();
      }
      if (struct.userNumber != null) {
        oprot.writeFieldBegin(USER_NUMBER_FIELD_DESC);
        oprot.writeString(struct.userNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_PAPER_POINT_FIELD_DESC);
      oprot.writeDouble(struct.userPaperPoint);
      oprot.writeFieldEnd();
      if (struct.workGroupId != null) {
        oprot.writeFieldBegin(WORK_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.workGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkPaperReportListTupleSchemeFactory implements SchemeFactory {
    public WorkPaperReportListTupleScheme getScheme() {
      return new WorkPaperReportListTupleScheme();
    }
  }

  private static class WorkPaperReportListTupleScheme extends TupleScheme<WorkPaperReportList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkPaperReportList struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetField1()) {
        optionals.set(0);
      }
      if (struct.isSetField2()) {
        optionals.set(1);
      }
      if (struct.isSetField3()) {
        optionals.set(2);
      }
      if (struct.isSetField4()) {
        optionals.set(3);
      }
      if (struct.isSetField5()) {
        optionals.set(4);
      }
      if (struct.isSetPaperId()) {
        optionals.set(5);
      }
      if (struct.isSetPaperName()) {
        optionals.set(6);
      }
      if (struct.isSetPaperTypeCode()) {
        optionals.set(7);
      }
      if (struct.isSetResult()) {
        optionals.set(8);
      }
      if (struct.isSetSystemNumber()) {
        optionals.set(9);
      }
      if (struct.isSetUserNumber()) {
        optionals.set(10);
      }
      if (struct.isSetUserPaperPoint()) {
        optionals.set(11);
      }
      if (struct.isSetWorkGroupId()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetField1()) {
        oprot.writeString(struct.field1);
      }
      if (struct.isSetField2()) {
        oprot.writeString(struct.field2);
      }
      if (struct.isSetField3()) {
        oprot.writeString(struct.field3);
      }
      if (struct.isSetField4()) {
        oprot.writeString(struct.field4);
      }
      if (struct.isSetField5()) {
        oprot.writeString(struct.field5);
      }
      if (struct.isSetPaperId()) {
        oprot.writeString(struct.paperId);
      }
      if (struct.isSetPaperName()) {
        oprot.writeString(struct.paperName);
      }
      if (struct.isSetPaperTypeCode()) {
        oprot.writeString(struct.paperTypeCode);
      }
      if (struct.isSetResult()) {
        {
          oprot.writeI32(struct.result.size());
          for (WorkPaperReport _iter4 : struct.result)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetSystemNumber()) {
        oprot.writeString(struct.systemNumber);
      }
      if (struct.isSetUserNumber()) {
        oprot.writeString(struct.userNumber);
      }
      if (struct.isSetUserPaperPoint()) {
        oprot.writeDouble(struct.userPaperPoint);
      }
      if (struct.isSetWorkGroupId()) {
        oprot.writeString(struct.workGroupId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkPaperReportList struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.field1 = iprot.readString();
        struct.setField1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.field2 = iprot.readString();
        struct.setField2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.field3 = iprot.readString();
        struct.setField3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.field4 = iprot.readString();
        struct.setField4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.field5 = iprot.readString();
        struct.setField5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.paperId = iprot.readString();
        struct.setPaperIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.paperName = iprot.readString();
        struct.setPaperNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.paperTypeCode = iprot.readString();
        struct.setPaperTypeCodeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.result = new ArrayList<WorkPaperReport>(_list5.size);
          WorkPaperReport _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new WorkPaperReport();
            _elem6.read(iprot);
            struct.result.add(_elem6);
          }
        }
        struct.setResultIsSet(true);
      }
      if (incoming.get(9)) {
        struct.systemNumber = iprot.readString();
        struct.setSystemNumberIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userNumber = iprot.readString();
        struct.setUserNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.userPaperPoint = iprot.readDouble();
        struct.setUserPaperPointIsSet(true);
      }
      if (incoming.get(12)) {
        struct.workGroupId = iprot.readString();
        struct.setWorkGroupIdIsSet(true);
      }
    }
  }

}

