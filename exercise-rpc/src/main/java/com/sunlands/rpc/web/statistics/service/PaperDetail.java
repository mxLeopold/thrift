/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class PaperDetail implements org.apache.thrift.TBase<PaperDetail, PaperDetail._Fields>, java.io.Serializable, Cloneable, Comparable<PaperDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaperDetail");

  private static final org.apache.thrift.protocol.TField PAPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paperName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("answerNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RANKING_FIELD_DESC = new org.apache.thrift.protocol.TField("ranking", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField QUESTION_DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("questionDetailList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaperDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaperDetailTupleSchemeFactory());
  }

  public String paperName; // required
  public int answerNum; // required
  public List<StuAnswerDetail> ranking; // required
  public List<QuestionDetail> questionDetailList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAPER_NAME((short)1, "paperName"),
    ANSWER_NUM((short)2, "answerNum"),
    RANKING((short)3, "ranking"),
    QUESTION_DETAIL_LIST((short)4, "questionDetailList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAPER_NAME
          return PAPER_NAME;
        case 2: // ANSWER_NUM
          return ANSWER_NUM;
        case 3: // RANKING
          return RANKING;
        case 4: // QUESTION_DETAIL_LIST
          return QUESTION_DETAIL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANSWERNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("paperName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("answerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANKING, new org.apache.thrift.meta_data.FieldMetaData("ranking", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerDetail.class))));
    tmpMap.put(_Fields.QUESTION_DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("questionDetailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "QuestionDetail"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaperDetail.class, metaDataMap);
  }

  public PaperDetail() {
  }

  public PaperDetail(
    String paperName,
    int answerNum,
    List<StuAnswerDetail> ranking,
    List<QuestionDetail> questionDetailList)
  {
    this();
    this.paperName = paperName;
    this.answerNum = answerNum;
    setAnswerNumIsSet(true);
    this.ranking = ranking;
    this.questionDetailList = questionDetailList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaperDetail(PaperDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPaperName()) {
      this.paperName = other.paperName;
    }
    this.answerNum = other.answerNum;
    if (other.isSetRanking()) {
      List<StuAnswerDetail> __this__ranking = new ArrayList<StuAnswerDetail>(other.ranking.size());
      for (StuAnswerDetail other_element : other.ranking) {
        __this__ranking.add(new StuAnswerDetail(other_element));
      }
      this.ranking = __this__ranking;
    }
    if (other.isSetQuestionDetailList()) {
      List<QuestionDetail> __this__questionDetailList = new ArrayList<QuestionDetail>(other.questionDetailList.size());
      for (QuestionDetail other_element : other.questionDetailList) {
        __this__questionDetailList.add(other_element);
      }
      this.questionDetailList = __this__questionDetailList;
    }
  }

  public PaperDetail deepCopy() {
    return new PaperDetail(this);
  }

  @Override
  public void clear() {
    this.paperName = null;
    setAnswerNumIsSet(false);
    this.answerNum = 0;
    this.ranking = null;
    this.questionDetailList = null;
  }

  public String getPaperName() {
    return this.paperName;
  }

  public PaperDetail setPaperName(String paperName) {
    this.paperName = paperName;
    return this;
  }

  public void unsetPaperName() {
    this.paperName = null;
  }

  /** Returns true if field paperName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperName() {
    return this.paperName != null;
  }

  public void setPaperNameIsSet(boolean value) {
    if (!value) {
      this.paperName = null;
    }
  }

  public int getAnswerNum() {
    return this.answerNum;
  }

  public PaperDetail setAnswerNum(int answerNum) {
    this.answerNum = answerNum;
    setAnswerNumIsSet(true);
    return this;
  }

  public void unsetAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERNUM_ISSET_ID);
  }

  /** Returns true if field answerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERNUM_ISSET_ID);
  }

  public void setAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERNUM_ISSET_ID, value);
  }

  public int getRankingSize() {
    return (this.ranking == null) ? 0 : this.ranking.size();
  }

  public java.util.Iterator<StuAnswerDetail> getRankingIterator() {
    return (this.ranking == null) ? null : this.ranking.iterator();
  }

  public void addToRanking(StuAnswerDetail elem) {
    if (this.ranking == null) {
      this.ranking = new ArrayList<StuAnswerDetail>();
    }
    this.ranking.add(elem);
  }

  public List<StuAnswerDetail> getRanking() {
    return this.ranking;
  }

  public PaperDetail setRanking(List<StuAnswerDetail> ranking) {
    this.ranking = ranking;
    return this;
  }

  public void unsetRanking() {
    this.ranking = null;
  }

  /** Returns true if field ranking is set (has been assigned a value) and false otherwise */
  public boolean isSetRanking() {
    return this.ranking != null;
  }

  public void setRankingIsSet(boolean value) {
    if (!value) {
      this.ranking = null;
    }
  }

  public int getQuestionDetailListSize() {
    return (this.questionDetailList == null) ? 0 : this.questionDetailList.size();
  }

  public java.util.Iterator<QuestionDetail> getQuestionDetailListIterator() {
    return (this.questionDetailList == null) ? null : this.questionDetailList.iterator();
  }

  public void addToQuestionDetailList(QuestionDetail elem) {
    if (this.questionDetailList == null) {
      this.questionDetailList = new ArrayList<QuestionDetail>();
    }
    this.questionDetailList.add(elem);
  }

  public List<QuestionDetail> getQuestionDetailList() {
    return this.questionDetailList;
  }

  public PaperDetail setQuestionDetailList(List<QuestionDetail> questionDetailList) {
    this.questionDetailList = questionDetailList;
    return this;
  }

  public void unsetQuestionDetailList() {
    this.questionDetailList = null;
  }

  /** Returns true if field questionDetailList is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionDetailList() {
    return this.questionDetailList != null;
  }

  public void setQuestionDetailListIsSet(boolean value) {
    if (!value) {
      this.questionDetailList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAPER_NAME:
      if (value == null) {
        unsetPaperName();
      } else {
        setPaperName((String)value);
      }
      break;

    case ANSWER_NUM:
      if (value == null) {
        unsetAnswerNum();
      } else {
        setAnswerNum((Integer)value);
      }
      break;

    case RANKING:
      if (value == null) {
        unsetRanking();
      } else {
        setRanking((List<StuAnswerDetail>)value);
      }
      break;

    case QUESTION_DETAIL_LIST:
      if (value == null) {
        unsetQuestionDetailList();
      } else {
        setQuestionDetailList((List<QuestionDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAPER_NAME:
      return getPaperName();

    case ANSWER_NUM:
      return getAnswerNum();

    case RANKING:
      return getRanking();

    case QUESTION_DETAIL_LIST:
      return getQuestionDetailList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAPER_NAME:
      return isSetPaperName();
    case ANSWER_NUM:
      return isSetAnswerNum();
    case RANKING:
      return isSetRanking();
    case QUESTION_DETAIL_LIST:
      return isSetQuestionDetailList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaperDetail)
      return this.equals((PaperDetail)that);
    return false;
  }

  public boolean equals(PaperDetail that) {
    if (that == null)
      return false;

    boolean this_present_paperName = true && this.isSetPaperName();
    boolean that_present_paperName = true && that.isSetPaperName();
    if (this_present_paperName || that_present_paperName) {
      if (!(this_present_paperName && that_present_paperName))
        return false;
      if (!this.paperName.equals(that.paperName))
        return false;
    }

    boolean this_present_answerNum = true;
    boolean that_present_answerNum = true;
    if (this_present_answerNum || that_present_answerNum) {
      if (!(this_present_answerNum && that_present_answerNum))
        return false;
      if (this.answerNum != that.answerNum)
        return false;
    }

    boolean this_present_ranking = true && this.isSetRanking();
    boolean that_present_ranking = true && that.isSetRanking();
    if (this_present_ranking || that_present_ranking) {
      if (!(this_present_ranking && that_present_ranking))
        return false;
      if (!this.ranking.equals(that.ranking))
        return false;
    }

    boolean this_present_questionDetailList = true && this.isSetQuestionDetailList();
    boolean that_present_questionDetailList = true && that.isSetQuestionDetailList();
    if (this_present_questionDetailList || that_present_questionDetailList) {
      if (!(this_present_questionDetailList && that_present_questionDetailList))
        return false;
      if (!this.questionDetailList.equals(that.questionDetailList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_paperName = true && (isSetPaperName());
    list.add(present_paperName);
    if (present_paperName)
      list.add(paperName);

    boolean present_answerNum = true;
    list.add(present_answerNum);
    if (present_answerNum)
      list.add(answerNum);

    boolean present_ranking = true && (isSetRanking());
    list.add(present_ranking);
    if (present_ranking)
      list.add(ranking);

    boolean present_questionDetailList = true && (isSetQuestionDetailList());
    list.add(present_questionDetailList);
    if (present_questionDetailList)
      list.add(questionDetailList);

    return list.hashCode();
  }

  @Override
  public int compareTo(PaperDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPaperName()).compareTo(other.isSetPaperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperName, other.paperName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerNum()).compareTo(other.isSetAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerNum, other.answerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRanking()).compareTo(other.isSetRanking());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanking()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranking, other.ranking);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionDetailList()).compareTo(other.isSetQuestionDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionDetailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionDetailList, other.questionDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PaperDetail(");
    boolean first = true;

    sb.append("paperName:");
    if (this.paperName == null) {
      sb.append("null");
    } else {
      sb.append(this.paperName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerNum:");
    sb.append(this.answerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ranking:");
    if (this.ranking == null) {
      sb.append("null");
    } else {
      sb.append(this.ranking);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionDetailList:");
    if (this.questionDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.questionDetailList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaperDetailStandardSchemeFactory implements SchemeFactory {
    public PaperDetailStandardScheme getScheme() {
      return new PaperDetailStandardScheme();
    }
  }

  private static class PaperDetailStandardScheme extends StandardScheme<PaperDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaperDetail struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperName = iprot.readString();
              struct.setPaperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answerNum = iprot.readI32();
              struct.setAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANKING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.ranking = new ArrayList<StuAnswerDetail>(_list8.size);
                StuAnswerDetail _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new StuAnswerDetail();
                  _elem9.read(iprot);
                  struct.ranking.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRankingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUESTION_DETAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.questionDetailList = new ArrayList<QuestionDetail>(_list11.size);
                QuestionDetail _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new QuestionDetail();
                  _elem12.read(iprot);
                  struct.questionDetailList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setQuestionDetailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaperDetail struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paperName != null) {
        oprot.writeFieldBegin(PAPER_NAME_FIELD_DESC);
        oprot.writeString(struct.paperName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.answerNum);
      oprot.writeFieldEnd();
      if (struct.ranking != null) {
        oprot.writeFieldBegin(RANKING_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ranking.size()));
          for (StuAnswerDetail _iter14 : struct.ranking)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.questionDetailList != null) {
        oprot.writeFieldBegin(QUESTION_DETAIL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questionDetailList.size()));
          for (QuestionDetail _iter15 : struct.questionDetailList)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaperDetailTupleSchemeFactory implements SchemeFactory {
    public PaperDetailTupleScheme getScheme() {
      return new PaperDetailTupleScheme();
    }
  }

  private static class PaperDetailTupleScheme extends TupleScheme<PaperDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaperDetail struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPaperName()) {
        optionals.set(0);
      }
      if (struct.isSetAnswerNum()) {
        optionals.set(1);
      }
      if (struct.isSetRanking()) {
        optionals.set(2);
      }
      if (struct.isSetQuestionDetailList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPaperName()) {
        oprot.writeString(struct.paperName);
      }
      if (struct.isSetAnswerNum()) {
        oprot.writeI32(struct.answerNum);
      }
      if (struct.isSetRanking()) {
        {
          oprot.writeI32(struct.ranking.size());
          for (StuAnswerDetail _iter16 : struct.ranking)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetQuestionDetailList()) {
        {
          oprot.writeI32(struct.questionDetailList.size());
          for (QuestionDetail _iter17 : struct.questionDetailList)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaperDetail struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.paperName = iprot.readString();
        struct.setPaperNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.answerNum = iprot.readI32();
        struct.setAnswerNumIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ranking = new ArrayList<StuAnswerDetail>(_list18.size);
          StuAnswerDetail _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new StuAnswerDetail();
            _elem19.read(iprot);
            struct.ranking.add(_elem19);
          }
        }
        struct.setRankingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.questionDetailList = new ArrayList<QuestionDetail>(_list21.size);
          QuestionDetail _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new QuestionDetail();
            _elem22.read(iprot);
            struct.questionDetailList.add(_elem22);
          }
        }
        struct.setQuestionDetailListIsSet(true);
      }
    }
  }

}

