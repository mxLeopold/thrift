/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-27")
public class QuizzesOrWorkUserCorrectRate implements org.apache.thrift.TBase<QuizzesOrWorkUserCorrectRate, QuizzesOrWorkUserCorrectRate._Fields>, java.io.Serializable, Cloneable, Comparable<QuizzesOrWorkUserCorrectRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuizzesOrWorkUserCorrectRate");

  private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXERCISE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("correctRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuizzesOrWorkUserCorrectRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuizzesOrWorkUserCorrectRateTupleSchemeFactory());
  }

  public int stuId; // required
  public int unitId; // required
  public String exerciseType; // required
  public double correctRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STU_ID((short)1, "stuId"),
    UNIT_ID((short)2, "unitId"),
    EXERCISE_TYPE((short)3, "exerciseType"),
    CORRECT_RATE((short)4, "correctRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STU_ID
          return STU_ID;
        case 2: // UNIT_ID
          return UNIT_ID;
        case 3: // EXERCISE_TYPE
          return EXERCISE_TYPE;
        case 4: // CORRECT_RATE
          return CORRECT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STUID_ISSET_ID = 0;
  private static final int __UNITID_ISSET_ID = 1;
  private static final int __CORRECTRATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXERCISE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exerciseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("correctRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuizzesOrWorkUserCorrectRate.class, metaDataMap);
  }

  public QuizzesOrWorkUserCorrectRate() {
  }

  public QuizzesOrWorkUserCorrectRate(
    int stuId,
    int unitId,
    String exerciseType,
    double correctRate)
  {
    this();
    this.stuId = stuId;
    setStuIdIsSet(true);
    this.unitId = unitId;
    setUnitIdIsSet(true);
    this.exerciseType = exerciseType;
    this.correctRate = correctRate;
    setCorrectRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuizzesOrWorkUserCorrectRate(QuizzesOrWorkUserCorrectRate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.stuId = other.stuId;
    this.unitId = other.unitId;
    if (other.isSetExerciseType()) {
      this.exerciseType = other.exerciseType;
    }
    this.correctRate = other.correctRate;
  }

  public QuizzesOrWorkUserCorrectRate deepCopy() {
    return new QuizzesOrWorkUserCorrectRate(this);
  }

  @Override
  public void clear() {
    setStuIdIsSet(false);
    this.stuId = 0;
    setUnitIdIsSet(false);
    this.unitId = 0;
    this.exerciseType = null;
    setCorrectRateIsSet(false);
    this.correctRate = 0.0;
  }

  public int getStuId() {
    return this.stuId;
  }

  public QuizzesOrWorkUserCorrectRate setStuId(int stuId) {
    this.stuId = stuId;
    setStuIdIsSet(true);
    return this;
  }

  public void unsetStuId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
  public boolean isSetStuId() {
    return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
  }

  public void setStuIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
  }

  public int getUnitId() {
    return this.unitId;
  }

  public QuizzesOrWorkUserCorrectRate setUnitId(int unitId) {
    this.unitId = unitId;
    setUnitIdIsSet(true);
    return this;
  }

  public void unsetUnitId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitId() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITID_ISSET_ID);
  }

  public void setUnitIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITID_ISSET_ID, value);
  }

  public String getExerciseType() {
    return this.exerciseType;
  }

  public QuizzesOrWorkUserCorrectRate setExerciseType(String exerciseType) {
    this.exerciseType = exerciseType;
    return this;
  }

  public void unsetExerciseType() {
    this.exerciseType = null;
  }

  /** Returns true if field exerciseType is set (has been assigned a value) and false otherwise */
  public boolean isSetExerciseType() {
    return this.exerciseType != null;
  }

  public void setExerciseTypeIsSet(boolean value) {
    if (!value) {
      this.exerciseType = null;
    }
  }

  public double getCorrectRate() {
    return this.correctRate;
  }

  public QuizzesOrWorkUserCorrectRate setCorrectRate(double correctRate) {
    this.correctRate = correctRate;
    setCorrectRateIsSet(true);
    return this;
  }

  public void unsetCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTRATE_ISSET_ID);
  }

  /** Returns true if field correctRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTRATE_ISSET_ID);
  }

  public void setCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STU_ID:
      if (value == null) {
        unsetStuId();
      } else {
        setStuId((Integer)value);
      }
      break;

    case UNIT_ID:
      if (value == null) {
        unsetUnitId();
      } else {
        setUnitId((Integer)value);
      }
      break;

    case EXERCISE_TYPE:
      if (value == null) {
        unsetExerciseType();
      } else {
        setExerciseType((String)value);
      }
      break;

    case CORRECT_RATE:
      if (value == null) {
        unsetCorrectRate();
      } else {
        setCorrectRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STU_ID:
      return getStuId();

    case UNIT_ID:
      return getUnitId();

    case EXERCISE_TYPE:
      return getExerciseType();

    case CORRECT_RATE:
      return getCorrectRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STU_ID:
      return isSetStuId();
    case UNIT_ID:
      return isSetUnitId();
    case EXERCISE_TYPE:
      return isSetExerciseType();
    case CORRECT_RATE:
      return isSetCorrectRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuizzesOrWorkUserCorrectRate)
      return this.equals((QuizzesOrWorkUserCorrectRate)that);
    return false;
  }

  public boolean equals(QuizzesOrWorkUserCorrectRate that) {
    if (that == null)
      return false;

    boolean this_present_stuId = true;
    boolean that_present_stuId = true;
    if (this_present_stuId || that_present_stuId) {
      if (!(this_present_stuId && that_present_stuId))
        return false;
      if (this.stuId != that.stuId)
        return false;
    }

    boolean this_present_unitId = true;
    boolean that_present_unitId = true;
    if (this_present_unitId || that_present_unitId) {
      if (!(this_present_unitId && that_present_unitId))
        return false;
      if (this.unitId != that.unitId)
        return false;
    }

    boolean this_present_exerciseType = true && this.isSetExerciseType();
    boolean that_present_exerciseType = true && that.isSetExerciseType();
    if (this_present_exerciseType || that_present_exerciseType) {
      if (!(this_present_exerciseType && that_present_exerciseType))
        return false;
      if (!this.exerciseType.equals(that.exerciseType))
        return false;
    }

    boolean this_present_correctRate = true;
    boolean that_present_correctRate = true;
    if (this_present_correctRate || that_present_correctRate) {
      if (!(this_present_correctRate && that_present_correctRate))
        return false;
      if (this.correctRate != that.correctRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stuId = true;
    list.add(present_stuId);
    if (present_stuId)
      list.add(stuId);

    boolean present_unitId = true;
    list.add(present_unitId);
    if (present_unitId)
      list.add(unitId);

    boolean present_exerciseType = true && (isSetExerciseType());
    list.add(present_exerciseType);
    if (present_exerciseType)
      list.add(exerciseType);

    boolean present_correctRate = true;
    list.add(present_correctRate);
    if (present_correctRate)
      list.add(correctRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuizzesOrWorkUserCorrectRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExerciseType()).compareTo(other.isSetExerciseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerciseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseType, other.exerciseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectRate()).compareTo(other.isSetCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctRate, other.correctRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuizzesOrWorkUserCorrectRate(");
    boolean first = true;

    sb.append("stuId:");
    sb.append(this.stuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitId:");
    sb.append(this.unitId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exerciseType:");
    if (this.exerciseType == null) {
      sb.append("null");
    } else {
      sb.append(this.exerciseType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctRate:");
    sb.append(this.correctRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuizzesOrWorkUserCorrectRateStandardSchemeFactory implements SchemeFactory {
    public QuizzesOrWorkUserCorrectRateStandardScheme getScheme() {
      return new QuizzesOrWorkUserCorrectRateStandardScheme();
    }
  }

  private static class QuizzesOrWorkUserCorrectRateStandardScheme extends StandardScheme<QuizzesOrWorkUserCorrectRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuizzesOrWorkUserCorrectRate struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuId = iprot.readI32();
              struct.setStuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unitId = iprot.readI32();
              struct.setUnitIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXERCISE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exerciseType = iprot.readString();
              struct.setExerciseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.correctRate = iprot.readDouble();
              struct.setCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuizzesOrWorkUserCorrectRate struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STU_ID_FIELD_DESC);
      oprot.writeI32(struct.stuId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
      oprot.writeI32(struct.unitId);
      oprot.writeFieldEnd();
      if (struct.exerciseType != null) {
        oprot.writeFieldBegin(EXERCISE_TYPE_FIELD_DESC);
        oprot.writeString(struct.exerciseType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.correctRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuizzesOrWorkUserCorrectRateTupleSchemeFactory implements SchemeFactory {
    public QuizzesOrWorkUserCorrectRateTupleScheme getScheme() {
      return new QuizzesOrWorkUserCorrectRateTupleScheme();
    }
  }

  private static class QuizzesOrWorkUserCorrectRateTupleScheme extends TupleScheme<QuizzesOrWorkUserCorrectRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuizzesOrWorkUserCorrectRate struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStuId()) {
        optionals.set(0);
      }
      if (struct.isSetUnitId()) {
        optionals.set(1);
      }
      if (struct.isSetExerciseType()) {
        optionals.set(2);
      }
      if (struct.isSetCorrectRate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStuId()) {
        oprot.writeI32(struct.stuId);
      }
      if (struct.isSetUnitId()) {
        oprot.writeI32(struct.unitId);
      }
      if (struct.isSetExerciseType()) {
        oprot.writeString(struct.exerciseType);
      }
      if (struct.isSetCorrectRate()) {
        oprot.writeDouble(struct.correctRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuizzesOrWorkUserCorrectRate struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.stuId = iprot.readI32();
        struct.setStuIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.unitId = iprot.readI32();
        struct.setUnitIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exerciseType = iprot.readString();
        struct.setExerciseTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.correctRate = iprot.readDouble();
        struct.setCorrectRateIsSet(true);
      }
    }
  }

}

