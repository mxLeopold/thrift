/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-07")
public class RoundStatistics implements org.apache.thrift.TBase<RoundStatistics, RoundStatistics._Fields>, java.io.Serializable, Cloneable, Comparable<RoundStatistics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoundStatistics");

  private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAnswerNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_QUESTION_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalQuestionAnswerNum", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoundStatisticsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoundStatisticsTupleSchemeFactory());
  }

  public int roundId; // required
  public int totalAnswerNum; // required
  public int totalQuestionAnswerNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUND_ID((short)1, "roundId"),
    TOTAL_ANSWER_NUM((short)2, "totalAnswerNum"),
    TOTAL_QUESTION_ANSWER_NUM((short)3, "totalQuestionAnswerNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUND_ID
          return ROUND_ID;
        case 2: // TOTAL_ANSWER_NUM
          return TOTAL_ANSWER_NUM;
        case 3: // TOTAL_QUESTION_ANSWER_NUM
          return TOTAL_QUESTION_ANSWER_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROUNDID_ISSET_ID = 0;
  private static final int __TOTALANSWERNUM_ISSET_ID = 1;
  private static final int __TOTALQUESTIONANSWERNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_QUESTION_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalQuestionAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoundStatistics.class, metaDataMap);
  }

  public RoundStatistics() {
  }

  public RoundStatistics(
    int roundId,
    int totalAnswerNum,
    int totalQuestionAnswerNum)
  {
    this();
    this.roundId = roundId;
    setRoundIdIsSet(true);
    this.totalAnswerNum = totalAnswerNum;
    setTotalAnswerNumIsSet(true);
    this.totalQuestionAnswerNum = totalQuestionAnswerNum;
    setTotalQuestionAnswerNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoundStatistics(RoundStatistics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.roundId = other.roundId;
    this.totalAnswerNum = other.totalAnswerNum;
    this.totalQuestionAnswerNum = other.totalQuestionAnswerNum;
  }

  public RoundStatistics deepCopy() {
    return new RoundStatistics(this);
  }

  @Override
  public void clear() {
    setRoundIdIsSet(false);
    this.roundId = 0;
    setTotalAnswerNumIsSet(false);
    this.totalAnswerNum = 0;
    setTotalQuestionAnswerNumIsSet(false);
    this.totalQuestionAnswerNum = 0;
  }

  public int getRoundId() {
    return this.roundId;
  }

  public RoundStatistics setRoundId(int roundId) {
    this.roundId = roundId;
    setRoundIdIsSet(true);
    return this;
  }

  public void unsetRoundId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  public void setRoundIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
  }

  public int getTotalAnswerNum() {
    return this.totalAnswerNum;
  }

  public RoundStatistics setTotalAnswerNum(int totalAnswerNum) {
    this.totalAnswerNum = totalAnswerNum;
    setTotalAnswerNumIsSet(true);
    return this;
  }

  public void unsetTotalAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID);
  }

  /** Returns true if field totalAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID);
  }

  public void setTotalAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID, value);
  }

  public int getTotalQuestionAnswerNum() {
    return this.totalQuestionAnswerNum;
  }

  public RoundStatistics setTotalQuestionAnswerNum(int totalQuestionAnswerNum) {
    this.totalQuestionAnswerNum = totalQuestionAnswerNum;
    setTotalQuestionAnswerNumIsSet(true);
    return this;
  }

  public void unsetTotalQuestionAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALQUESTIONANSWERNUM_ISSET_ID);
  }

  /** Returns true if field totalQuestionAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalQuestionAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALQUESTIONANSWERNUM_ISSET_ID);
  }

  public void setTotalQuestionAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALQUESTIONANSWERNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROUND_ID:
      if (value == null) {
        unsetRoundId();
      } else {
        setRoundId((Integer)value);
      }
      break;

    case TOTAL_ANSWER_NUM:
      if (value == null) {
        unsetTotalAnswerNum();
      } else {
        setTotalAnswerNum((Integer)value);
      }
      break;

    case TOTAL_QUESTION_ANSWER_NUM:
      if (value == null) {
        unsetTotalQuestionAnswerNum();
      } else {
        setTotalQuestionAnswerNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUND_ID:
      return getRoundId();

    case TOTAL_ANSWER_NUM:
      return getTotalAnswerNum();

    case TOTAL_QUESTION_ANSWER_NUM:
      return getTotalQuestionAnswerNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROUND_ID:
      return isSetRoundId();
    case TOTAL_ANSWER_NUM:
      return isSetTotalAnswerNum();
    case TOTAL_QUESTION_ANSWER_NUM:
      return isSetTotalQuestionAnswerNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoundStatistics)
      return this.equals((RoundStatistics)that);
    return false;
  }

  public boolean equals(RoundStatistics that) {
    if (that == null)
      return false;

    boolean this_present_roundId = true;
    boolean that_present_roundId = true;
    if (this_present_roundId || that_present_roundId) {
      if (!(this_present_roundId && that_present_roundId))
        return false;
      if (this.roundId != that.roundId)
        return false;
    }

    boolean this_present_totalAnswerNum = true;
    boolean that_present_totalAnswerNum = true;
    if (this_present_totalAnswerNum || that_present_totalAnswerNum) {
      if (!(this_present_totalAnswerNum && that_present_totalAnswerNum))
        return false;
      if (this.totalAnswerNum != that.totalAnswerNum)
        return false;
    }

    boolean this_present_totalQuestionAnswerNum = true;
    boolean that_present_totalQuestionAnswerNum = true;
    if (this_present_totalQuestionAnswerNum || that_present_totalQuestionAnswerNum) {
      if (!(this_present_totalQuestionAnswerNum && that_present_totalQuestionAnswerNum))
        return false;
      if (this.totalQuestionAnswerNum != that.totalQuestionAnswerNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_roundId = true;
    list.add(present_roundId);
    if (present_roundId)
      list.add(roundId);

    boolean present_totalAnswerNum = true;
    list.add(present_totalAnswerNum);
    if (present_totalAnswerNum)
      list.add(totalAnswerNum);

    boolean present_totalQuestionAnswerNum = true;
    list.add(present_totalQuestionAnswerNum);
    if (present_totalQuestionAnswerNum)
      list.add(totalQuestionAnswerNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(RoundStatistics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAnswerNum()).compareTo(other.isSetTotalAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAnswerNum, other.totalAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalQuestionAnswerNum()).compareTo(other.isSetTotalQuestionAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalQuestionAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalQuestionAnswerNum, other.totalQuestionAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoundStatistics(");
    boolean first = true;

    sb.append("roundId:");
    sb.append(this.roundId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAnswerNum:");
    sb.append(this.totalAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalQuestionAnswerNum:");
    sb.append(this.totalQuestionAnswerNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoundStatisticsStandardSchemeFactory implements SchemeFactory {
    public RoundStatisticsStandardScheme getScheme() {
      return new RoundStatisticsStandardScheme();
    }
  }

  private static class RoundStatisticsStandardScheme extends StandardScheme<RoundStatistics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoundStatistics struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roundId = iprot.readI32();
              struct.setRoundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalAnswerNum = iprot.readI32();
              struct.setTotalAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_QUESTION_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalQuestionAnswerNum = iprot.readI32();
              struct.setTotalQuestionAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoundStatistics struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
      oprot.writeI32(struct.roundId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.totalAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_QUESTION_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.totalQuestionAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoundStatisticsTupleSchemeFactory implements SchemeFactory {
    public RoundStatisticsTupleScheme getScheme() {
      return new RoundStatisticsTupleScheme();
    }
  }

  private static class RoundStatisticsTupleScheme extends TupleScheme<RoundStatistics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoundStatistics struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRoundId()) {
        optionals.set(0);
      }
      if (struct.isSetTotalAnswerNum()) {
        optionals.set(1);
      }
      if (struct.isSetTotalQuestionAnswerNum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRoundId()) {
        oprot.writeI32(struct.roundId);
      }
      if (struct.isSetTotalAnswerNum()) {
        oprot.writeI32(struct.totalAnswerNum);
      }
      if (struct.isSetTotalQuestionAnswerNum()) {
        oprot.writeI32(struct.totalQuestionAnswerNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoundStatistics struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.roundId = iprot.readI32();
        struct.setRoundIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.totalAnswerNum = iprot.readI32();
        struct.setTotalAnswerNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalQuestionAnswerNum = iprot.readI32();
        struct.setTotalQuestionAnswerNumIsSet(true);
      }
    }
  }

}

