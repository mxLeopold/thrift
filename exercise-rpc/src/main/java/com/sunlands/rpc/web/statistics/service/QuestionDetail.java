/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class QuestionDetail implements org.apache.thrift.TBase<QuestionDetail, QuestionDetail._Fields>, java.io.Serializable, Cloneable, Comparable<QuestionDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuestionDetail");

  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("questionType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUESTION_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ANALYSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("analysis", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("answer", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("optionList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BLANK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("blankList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField STU_ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("stuAnswers", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_QUESTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subQuestionList", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionDetailTupleSchemeFactory());
  }

  public int questionId; // required
  public int sequence; // required
  public String questionType; // required
  public String questionContent; // required
  public String analysis; // required
  public double score; // required
  public String answer; // required
  public List<Option> optionList; // required
  public List<Blank> blankList; // required
  public List<StuQuestionAnswer> stuAnswers; // required
  public List<QuestionDetail> subQuestionList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION_ID((short)1, "questionId"),
    SEQUENCE((short)2, "sequence"),
    QUESTION_TYPE((short)3, "questionType"),
    QUESTION_CONTENT((short)4, "questionContent"),
    ANALYSIS((short)5, "analysis"),
    SCORE((short)6, "score"),
    ANSWER((short)7, "answer"),
    OPTION_LIST((short)8, "optionList"),
    BLANK_LIST((short)9, "blankList"),
    STU_ANSWERS((short)10, "stuAnswers"),
    SUB_QUESTION_LIST((short)11, "subQuestionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION_ID
          return QUESTION_ID;
        case 2: // SEQUENCE
          return SEQUENCE;
        case 3: // QUESTION_TYPE
          return QUESTION_TYPE;
        case 4: // QUESTION_CONTENT
          return QUESTION_CONTENT;
        case 5: // ANALYSIS
          return ANALYSIS;
        case 6: // SCORE
          return SCORE;
        case 7: // ANSWER
          return ANSWER;
        case 8: // OPTION_LIST
          return OPTION_LIST;
        case 9: // BLANK_LIST
          return BLANK_LIST;
        case 10: // STU_ANSWERS
          return STU_ANSWERS;
        case 11: // SUB_QUESTION_LIST
          return SUB_QUESTION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUESTIONID_ISSET_ID = 0;
  private static final int __SEQUENCE_ISSET_ID = 1;
  private static final int __SCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("questionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("questionContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANALYSIS, new org.apache.thrift.meta_data.FieldMetaData("analysis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("optionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Option"))));
    tmpMap.put(_Fields.BLANK_LIST, new org.apache.thrift.meta_data.FieldMetaData("blankList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Blank"))));
    tmpMap.put(_Fields.STU_ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("stuAnswers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "StuQuestionAnswer"))));
    tmpMap.put(_Fields.SUB_QUESTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("subQuestionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "QuestionDetail"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuestionDetail.class, metaDataMap);
  }

  public QuestionDetail() {
  }

  public QuestionDetail(
    int questionId,
    int sequence,
    String questionType,
    String questionContent,
    String analysis,
    double score,
    String answer,
    List<Option> optionList,
    List<Blank> blankList,
    List<StuQuestionAnswer> stuAnswers,
    List<QuestionDetail> subQuestionList)
  {
    this();
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.questionType = questionType;
    this.questionContent = questionContent;
    this.analysis = analysis;
    this.score = score;
    setScoreIsSet(true);
    this.answer = answer;
    this.optionList = optionList;
    this.blankList = blankList;
    this.stuAnswers = stuAnswers;
    this.subQuestionList = subQuestionList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuestionDetail(QuestionDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.questionId = other.questionId;
    this.sequence = other.sequence;
    if (other.isSetQuestionType()) {
      this.questionType = other.questionType;
    }
    if (other.isSetQuestionContent()) {
      this.questionContent = other.questionContent;
    }
    if (other.isSetAnalysis()) {
      this.analysis = other.analysis;
    }
    this.score = other.score;
    if (other.isSetAnswer()) {
      this.answer = other.answer;
    }
    if (other.isSetOptionList()) {
      List<Option> __this__optionList = new ArrayList<Option>(other.optionList.size());
      for (Option other_element : other.optionList) {
        __this__optionList.add(other_element);
      }
      this.optionList = __this__optionList;
    }
    if (other.isSetBlankList()) {
      List<Blank> __this__blankList = new ArrayList<Blank>(other.blankList.size());
      for (Blank other_element : other.blankList) {
        __this__blankList.add(other_element);
      }
      this.blankList = __this__blankList;
    }
    if (other.isSetStuAnswers()) {
      List<StuQuestionAnswer> __this__stuAnswers = new ArrayList<StuQuestionAnswer>(other.stuAnswers.size());
      for (StuQuestionAnswer other_element : other.stuAnswers) {
        __this__stuAnswers.add(other_element);
      }
      this.stuAnswers = __this__stuAnswers;
    }
    if (other.isSetSubQuestionList()) {
      List<QuestionDetail> __this__subQuestionList = new ArrayList<QuestionDetail>(other.subQuestionList.size());
      for (QuestionDetail other_element : other.subQuestionList) {
        __this__subQuestionList.add(other_element);
      }
      this.subQuestionList = __this__subQuestionList;
    }
  }

  public QuestionDetail deepCopy() {
    return new QuestionDetail(this);
  }

  @Override
  public void clear() {
    setQuestionIdIsSet(false);
    this.questionId = 0;
    setSequenceIsSet(false);
    this.sequence = 0;
    this.questionType = null;
    this.questionContent = null;
    this.analysis = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.answer = null;
    this.optionList = null;
    this.blankList = null;
    this.stuAnswers = null;
    this.subQuestionList = null;
  }

  public int getQuestionId() {
    return this.questionId;
  }

  public QuestionDetail setQuestionId(int questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public int getSequence() {
    return this.sequence;
  }

  public QuestionDetail setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public String getQuestionType() {
    return this.questionType;
  }

  public QuestionDetail setQuestionType(String questionType) {
    this.questionType = questionType;
    return this;
  }

  public void unsetQuestionType() {
    this.questionType = null;
  }

  /** Returns true if field questionType is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionType() {
    return this.questionType != null;
  }

  public void setQuestionTypeIsSet(boolean value) {
    if (!value) {
      this.questionType = null;
    }
  }

  public String getQuestionContent() {
    return this.questionContent;
  }

  public QuestionDetail setQuestionContent(String questionContent) {
    this.questionContent = questionContent;
    return this;
  }

  public void unsetQuestionContent() {
    this.questionContent = null;
  }

  /** Returns true if field questionContent is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionContent() {
    return this.questionContent != null;
  }

  public void setQuestionContentIsSet(boolean value) {
    if (!value) {
      this.questionContent = null;
    }
  }

  public String getAnalysis() {
    return this.analysis;
  }

  public QuestionDetail setAnalysis(String analysis) {
    this.analysis = analysis;
    return this;
  }

  public void unsetAnalysis() {
    this.analysis = null;
  }

  /** Returns true if field analysis is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalysis() {
    return this.analysis != null;
  }

  public void setAnalysisIsSet(boolean value) {
    if (!value) {
      this.analysis = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public QuestionDetail setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public String getAnswer() {
    return this.answer;
  }

  public QuestionDetail setAnswer(String answer) {
    this.answer = answer;
    return this;
  }

  public void unsetAnswer() {
    this.answer = null;
  }

  /** Returns true if field answer is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer() {
    return this.answer != null;
  }

  public void setAnswerIsSet(boolean value) {
    if (!value) {
      this.answer = null;
    }
  }

  public int getOptionListSize() {
    return (this.optionList == null) ? 0 : this.optionList.size();
  }

  public java.util.Iterator<Option> getOptionListIterator() {
    return (this.optionList == null) ? null : this.optionList.iterator();
  }

  public void addToOptionList(Option elem) {
    if (this.optionList == null) {
      this.optionList = new ArrayList<Option>();
    }
    this.optionList.add(elem);
  }

  public List<Option> getOptionList() {
    return this.optionList;
  }

  public QuestionDetail setOptionList(List<Option> optionList) {
    this.optionList = optionList;
    return this;
  }

  public void unsetOptionList() {
    this.optionList = null;
  }

  /** Returns true if field optionList is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionList() {
    return this.optionList != null;
  }

  public void setOptionListIsSet(boolean value) {
    if (!value) {
      this.optionList = null;
    }
  }

  public int getBlankListSize() {
    return (this.blankList == null) ? 0 : this.blankList.size();
  }

  public java.util.Iterator<Blank> getBlankListIterator() {
    return (this.blankList == null) ? null : this.blankList.iterator();
  }

  public void addToBlankList(Blank elem) {
    if (this.blankList == null) {
      this.blankList = new ArrayList<Blank>();
    }
    this.blankList.add(elem);
  }

  public List<Blank> getBlankList() {
    return this.blankList;
  }

  public QuestionDetail setBlankList(List<Blank> blankList) {
    this.blankList = blankList;
    return this;
  }

  public void unsetBlankList() {
    this.blankList = null;
  }

  /** Returns true if field blankList is set (has been assigned a value) and false otherwise */
  public boolean isSetBlankList() {
    return this.blankList != null;
  }

  public void setBlankListIsSet(boolean value) {
    if (!value) {
      this.blankList = null;
    }
  }

  public int getStuAnswersSize() {
    return (this.stuAnswers == null) ? 0 : this.stuAnswers.size();
  }

  public java.util.Iterator<StuQuestionAnswer> getStuAnswersIterator() {
    return (this.stuAnswers == null) ? null : this.stuAnswers.iterator();
  }

  public void addToStuAnswers(StuQuestionAnswer elem) {
    if (this.stuAnswers == null) {
      this.stuAnswers = new ArrayList<StuQuestionAnswer>();
    }
    this.stuAnswers.add(elem);
  }

  public List<StuQuestionAnswer> getStuAnswers() {
    return this.stuAnswers;
  }

  public QuestionDetail setStuAnswers(List<StuQuestionAnswer> stuAnswers) {
    this.stuAnswers = stuAnswers;
    return this;
  }

  public void unsetStuAnswers() {
    this.stuAnswers = null;
  }

  /** Returns true if field stuAnswers is set (has been assigned a value) and false otherwise */
  public boolean isSetStuAnswers() {
    return this.stuAnswers != null;
  }

  public void setStuAnswersIsSet(boolean value) {
    if (!value) {
      this.stuAnswers = null;
    }
  }

  public int getSubQuestionListSize() {
    return (this.subQuestionList == null) ? 0 : this.subQuestionList.size();
  }

  public java.util.Iterator<QuestionDetail> getSubQuestionListIterator() {
    return (this.subQuestionList == null) ? null : this.subQuestionList.iterator();
  }

  public void addToSubQuestionList(QuestionDetail elem) {
    if (this.subQuestionList == null) {
      this.subQuestionList = new ArrayList<QuestionDetail>();
    }
    this.subQuestionList.add(elem);
  }

  public List<QuestionDetail> getSubQuestionList() {
    return this.subQuestionList;
  }

  public QuestionDetail setSubQuestionList(List<QuestionDetail> subQuestionList) {
    this.subQuestionList = subQuestionList;
    return this;
  }

  public void unsetSubQuestionList() {
    this.subQuestionList = null;
  }

  /** Returns true if field subQuestionList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubQuestionList() {
    return this.subQuestionList != null;
  }

  public void setSubQuestionListIsSet(boolean value) {
    if (!value) {
      this.subQuestionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Integer)value);
      }
      break;

    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case QUESTION_TYPE:
      if (value == null) {
        unsetQuestionType();
      } else {
        setQuestionType((String)value);
      }
      break;

    case QUESTION_CONTENT:
      if (value == null) {
        unsetQuestionContent();
      } else {
        setQuestionContent((String)value);
      }
      break;

    case ANALYSIS:
      if (value == null) {
        unsetAnalysis();
      } else {
        setAnalysis((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case ANSWER:
      if (value == null) {
        unsetAnswer();
      } else {
        setAnswer((String)value);
      }
      break;

    case OPTION_LIST:
      if (value == null) {
        unsetOptionList();
      } else {
        setOptionList((List<Option>)value);
      }
      break;

    case BLANK_LIST:
      if (value == null) {
        unsetBlankList();
      } else {
        setBlankList((List<Blank>)value);
      }
      break;

    case STU_ANSWERS:
      if (value == null) {
        unsetStuAnswers();
      } else {
        setStuAnswers((List<StuQuestionAnswer>)value);
      }
      break;

    case SUB_QUESTION_LIST:
      if (value == null) {
        unsetSubQuestionList();
      } else {
        setSubQuestionList((List<QuestionDetail>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION_ID:
      return getQuestionId();

    case SEQUENCE:
      return getSequence();

    case QUESTION_TYPE:
      return getQuestionType();

    case QUESTION_CONTENT:
      return getQuestionContent();

    case ANALYSIS:
      return getAnalysis();

    case SCORE:
      return getScore();

    case ANSWER:
      return getAnswer();

    case OPTION_LIST:
      return getOptionList();

    case BLANK_LIST:
      return getBlankList();

    case STU_ANSWERS:
      return getStuAnswers();

    case SUB_QUESTION_LIST:
      return getSubQuestionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION_ID:
      return isSetQuestionId();
    case SEQUENCE:
      return isSetSequence();
    case QUESTION_TYPE:
      return isSetQuestionType();
    case QUESTION_CONTENT:
      return isSetQuestionContent();
    case ANALYSIS:
      return isSetAnalysis();
    case SCORE:
      return isSetScore();
    case ANSWER:
      return isSetAnswer();
    case OPTION_LIST:
      return isSetOptionList();
    case BLANK_LIST:
      return isSetBlankList();
    case STU_ANSWERS:
      return isSetStuAnswers();
    case SUB_QUESTION_LIST:
      return isSetSubQuestionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuestionDetail)
      return this.equals((QuestionDetail)that);
    return false;
  }

  public boolean equals(QuestionDetail that) {
    if (that == null)
      return false;

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_questionType = true && this.isSetQuestionType();
    boolean that_present_questionType = true && that.isSetQuestionType();
    if (this_present_questionType || that_present_questionType) {
      if (!(this_present_questionType && that_present_questionType))
        return false;
      if (!this.questionType.equals(that.questionType))
        return false;
    }

    boolean this_present_questionContent = true && this.isSetQuestionContent();
    boolean that_present_questionContent = true && that.isSetQuestionContent();
    if (this_present_questionContent || that_present_questionContent) {
      if (!(this_present_questionContent && that_present_questionContent))
        return false;
      if (!this.questionContent.equals(that.questionContent))
        return false;
    }

    boolean this_present_analysis = true && this.isSetAnalysis();
    boolean that_present_analysis = true && that.isSetAnalysis();
    if (this_present_analysis || that_present_analysis) {
      if (!(this_present_analysis && that_present_analysis))
        return false;
      if (!this.analysis.equals(that.analysis))
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_answer = true && this.isSetAnswer();
    boolean that_present_answer = true && that.isSetAnswer();
    if (this_present_answer || that_present_answer) {
      if (!(this_present_answer && that_present_answer))
        return false;
      if (!this.answer.equals(that.answer))
        return false;
    }

    boolean this_present_optionList = true && this.isSetOptionList();
    boolean that_present_optionList = true && that.isSetOptionList();
    if (this_present_optionList || that_present_optionList) {
      if (!(this_present_optionList && that_present_optionList))
        return false;
      if (!this.optionList.equals(that.optionList))
        return false;
    }

    boolean this_present_blankList = true && this.isSetBlankList();
    boolean that_present_blankList = true && that.isSetBlankList();
    if (this_present_blankList || that_present_blankList) {
      if (!(this_present_blankList && that_present_blankList))
        return false;
      if (!this.blankList.equals(that.blankList))
        return false;
    }

    boolean this_present_stuAnswers = true && this.isSetStuAnswers();
    boolean that_present_stuAnswers = true && that.isSetStuAnswers();
    if (this_present_stuAnswers || that_present_stuAnswers) {
      if (!(this_present_stuAnswers && that_present_stuAnswers))
        return false;
      if (!this.stuAnswers.equals(that.stuAnswers))
        return false;
    }

    boolean this_present_subQuestionList = true && this.isSetSubQuestionList();
    boolean that_present_subQuestionList = true && that.isSetSubQuestionList();
    if (this_present_subQuestionList || that_present_subQuestionList) {
      if (!(this_present_subQuestionList && that_present_subQuestionList))
        return false;
      if (!this.subQuestionList.equals(that.subQuestionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_questionId = true;
    list.add(present_questionId);
    if (present_questionId)
      list.add(questionId);

    boolean present_sequence = true;
    list.add(present_sequence);
    if (present_sequence)
      list.add(sequence);

    boolean present_questionType = true && (isSetQuestionType());
    list.add(present_questionType);
    if (present_questionType)
      list.add(questionType);

    boolean present_questionContent = true && (isSetQuestionContent());
    list.add(present_questionContent);
    if (present_questionContent)
      list.add(questionContent);

    boolean present_analysis = true && (isSetAnalysis());
    list.add(present_analysis);
    if (present_analysis)
      list.add(analysis);

    boolean present_score = true;
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_answer = true && (isSetAnswer());
    list.add(present_answer);
    if (present_answer)
      list.add(answer);

    boolean present_optionList = true && (isSetOptionList());
    list.add(present_optionList);
    if (present_optionList)
      list.add(optionList);

    boolean present_blankList = true && (isSetBlankList());
    list.add(present_blankList);
    if (present_blankList)
      list.add(blankList);

    boolean present_stuAnswers = true && (isSetStuAnswers());
    list.add(present_stuAnswers);
    if (present_stuAnswers)
      list.add(stuAnswers);

    boolean present_subQuestionList = true && (isSetSubQuestionList());
    list.add(present_subQuestionList);
    if (present_subQuestionList)
      list.add(subQuestionList);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuestionDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionType()).compareTo(other.isSetQuestionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionType, other.questionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionContent()).compareTo(other.isSetQuestionContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionContent, other.questionContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalysis()).compareTo(other.isSetAnalysis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalysis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analysis, other.analysis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionList()).compareTo(other.isSetOptionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionList, other.optionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlankList()).compareTo(other.isSetBlankList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlankList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blankList, other.blankList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStuAnswers()).compareTo(other.isSetStuAnswers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuAnswers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuAnswers, other.stuAnswers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubQuestionList()).compareTo(other.isSetSubQuestionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubQuestionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subQuestionList, other.subQuestionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuestionDetail(");
    boolean first = true;

    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionType:");
    if (this.questionType == null) {
      sb.append("null");
    } else {
      sb.append(this.questionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionContent:");
    if (this.questionContent == null) {
      sb.append("null");
    } else {
      sb.append(this.questionContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("analysis:");
    if (this.analysis == null) {
      sb.append("null");
    } else {
      sb.append(this.analysis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answer:");
    if (this.answer == null) {
      sb.append("null");
    } else {
      sb.append(this.answer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionList:");
    if (this.optionList == null) {
      sb.append("null");
    } else {
      sb.append(this.optionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blankList:");
    if (this.blankList == null) {
      sb.append("null");
    } else {
      sb.append(this.blankList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stuAnswers:");
    if (this.stuAnswers == null) {
      sb.append("null");
    } else {
      sb.append(this.stuAnswers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subQuestionList:");
    if (this.subQuestionList == null) {
      sb.append("null");
    } else {
      sb.append(this.subQuestionList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionDetailStandardSchemeFactory implements SchemeFactory {
    public QuestionDetailStandardScheme getScheme() {
      return new QuestionDetailStandardScheme();
    }
  }

  private static class QuestionDetailStandardScheme extends StandardScheme<QuestionDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuestionDetail struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionId = iprot.readI32();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionType = iprot.readString();
              struct.setQuestionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUESTION_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionContent = iprot.readString();
              struct.setQuestionContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANALYSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.analysis = iprot.readString();
              struct.setAnalysisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answer = iprot.readString();
              struct.setAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.optionList = new ArrayList<Option>(_list16.size);
                Option _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Option();
                  _elem17.read(iprot);
                  struct.optionList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setOptionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BLANK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.blankList = new ArrayList<Blank>(_list19.size);
                Blank _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new Blank();
                  _elem20.read(iprot);
                  struct.blankList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setBlankListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STU_ANSWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.stuAnswers = new ArrayList<StuQuestionAnswer>(_list22.size);
                StuQuestionAnswer _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new StuQuestionAnswer();
                  _elem23.read(iprot);
                  struct.stuAnswers.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setStuAnswersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB_QUESTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.subQuestionList = new ArrayList<QuestionDetail>(_list25.size);
                QuestionDetail _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = new QuestionDetail();
                  _elem26.read(iprot);
                  struct.subQuestionList.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setSubQuestionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuestionDetail struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI32(struct.questionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      if (struct.questionType != null) {
        oprot.writeFieldBegin(QUESTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.questionType);
        oprot.writeFieldEnd();
      }
      if (struct.questionContent != null) {
        oprot.writeFieldBegin(QUESTION_CONTENT_FIELD_DESC);
        oprot.writeString(struct.questionContent);
        oprot.writeFieldEnd();
      }
      if (struct.analysis != null) {
        oprot.writeFieldBegin(ANALYSIS_FIELD_DESC);
        oprot.writeString(struct.analysis);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      if (struct.answer != null) {
        oprot.writeFieldBegin(ANSWER_FIELD_DESC);
        oprot.writeString(struct.answer);
        oprot.writeFieldEnd();
      }
      if (struct.optionList != null) {
        oprot.writeFieldBegin(OPTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optionList.size()));
          for (Option _iter28 : struct.optionList)
          {
            _iter28.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.blankList != null) {
        oprot.writeFieldBegin(BLANK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.blankList.size()));
          for (Blank _iter29 : struct.blankList)
          {
            _iter29.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stuAnswers != null) {
        oprot.writeFieldBegin(STU_ANSWERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stuAnswers.size()));
          for (StuQuestionAnswer _iter30 : struct.stuAnswers)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subQuestionList != null) {
        oprot.writeFieldBegin(SUB_QUESTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subQuestionList.size()));
          for (QuestionDetail _iter31 : struct.subQuestionList)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionDetailTupleSchemeFactory implements SchemeFactory {
    public QuestionDetailTupleScheme getScheme() {
      return new QuestionDetailTupleScheme();
    }
  }

  private static class QuestionDetailTupleScheme extends TupleScheme<QuestionDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuestionDetail struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuestionId()) {
        optionals.set(0);
      }
      if (struct.isSetSequence()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionType()) {
        optionals.set(2);
      }
      if (struct.isSetQuestionContent()) {
        optionals.set(3);
      }
      if (struct.isSetAnalysis()) {
        optionals.set(4);
      }
      if (struct.isSetScore()) {
        optionals.set(5);
      }
      if (struct.isSetAnswer()) {
        optionals.set(6);
      }
      if (struct.isSetOptionList()) {
        optionals.set(7);
      }
      if (struct.isSetBlankList()) {
        optionals.set(8);
      }
      if (struct.isSetStuAnswers()) {
        optionals.set(9);
      }
      if (struct.isSetSubQuestionList()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetQuestionId()) {
        oprot.writeI32(struct.questionId);
      }
      if (struct.isSetSequence()) {
        oprot.writeI32(struct.sequence);
      }
      if (struct.isSetQuestionType()) {
        oprot.writeString(struct.questionType);
      }
      if (struct.isSetQuestionContent()) {
        oprot.writeString(struct.questionContent);
      }
      if (struct.isSetAnalysis()) {
        oprot.writeString(struct.analysis);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetAnswer()) {
        oprot.writeString(struct.answer);
      }
      if (struct.isSetOptionList()) {
        {
          oprot.writeI32(struct.optionList.size());
          for (Option _iter32 : struct.optionList)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetBlankList()) {
        {
          oprot.writeI32(struct.blankList.size());
          for (Blank _iter33 : struct.blankList)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetStuAnswers()) {
        {
          oprot.writeI32(struct.stuAnswers.size());
          for (StuQuestionAnswer _iter34 : struct.stuAnswers)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetSubQuestionList()) {
        {
          oprot.writeI32(struct.subQuestionList.size());
          for (QuestionDetail _iter35 : struct.subQuestionList)
          {
            _iter35.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuestionDetail struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.questionId = iprot.readI32();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sequence = iprot.readI32();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.questionType = iprot.readString();
        struct.setQuestionTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.questionContent = iprot.readString();
        struct.setQuestionContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.analysis = iprot.readString();
        struct.setAnalysisIsSet(true);
      }
      if (incoming.get(5)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(6)) {
        struct.answer = iprot.readString();
        struct.setAnswerIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.optionList = new ArrayList<Option>(_list36.size);
          Option _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = new Option();
            _elem37.read(iprot);
            struct.optionList.add(_elem37);
          }
        }
        struct.setOptionListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.blankList = new ArrayList<Blank>(_list39.size);
          Blank _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = new Blank();
            _elem40.read(iprot);
            struct.blankList.add(_elem40);
          }
        }
        struct.setBlankListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stuAnswers = new ArrayList<StuQuestionAnswer>(_list42.size);
          StuQuestionAnswer _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = new StuQuestionAnswer();
            _elem43.read(iprot);
            struct.stuAnswers.add(_elem43);
          }
        }
        struct.setStuAnswersIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subQuestionList = new ArrayList<QuestionDetail>(_list45.size);
          QuestionDetail _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new QuestionDetail();
            _elem46.read(iprot);
            struct.subQuestionList.add(_elem46);
          }
        }
        struct.setSubQuestionListIsSet(true);
      }
    }
  }

}

