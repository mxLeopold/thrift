/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-28")
public class QuestionDetail implements org.apache.thrift.TBase<QuestionDetail, QuestionDetail._Fields>, java.io.Serializable, Cloneable, Comparable<QuestionDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuestionDetail");

  private static final org.apache.thrift.protocol.TField QUESTION_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionContent", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("expertContent", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUESTION_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("questionOptions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OPTION_ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("optionAnswers", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField QUESTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("questionType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SCORE_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("scorePoints", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionDetailTupleSchemeFactory());
  }

  public String questionContent; // required
  public String expertContent; // required
  public List<Option> questionOptions; // required
  public List<OptionAnswer> optionAnswers; // required
  public String questionType; // required
  public List<ScorePoint> scorePoints; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUESTION_CONTENT((short)1, "questionContent"),
    EXPERT_CONTENT((short)2, "expertContent"),
    QUESTION_OPTIONS((short)3, "questionOptions"),
    OPTION_ANSWERS((short)4, "optionAnswers"),
    QUESTION_TYPE((short)5, "questionType"),
    SCORE_POINTS((short)6, "scorePoints");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUESTION_CONTENT
          return QUESTION_CONTENT;
        case 2: // EXPERT_CONTENT
          return EXPERT_CONTENT;
        case 3: // QUESTION_OPTIONS
          return QUESTION_OPTIONS;
        case 4: // OPTION_ANSWERS
          return OPTION_ANSWERS;
        case 5: // QUESTION_TYPE
          return QUESTION_TYPE;
        case 6: // SCORE_POINTS
          return SCORE_POINTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUESTION_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("questionContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("expertContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUESTION_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("questionOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Option"))));
    tmpMap.put(_Fields.OPTION_ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("optionAnswers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "OptionAnswer"))));
    tmpMap.put(_Fields.QUESTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("questionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE_POINTS, new org.apache.thrift.meta_data.FieldMetaData("scorePoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ScorePoint"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuestionDetail.class, metaDataMap);
  }

  public QuestionDetail() {
  }

  public QuestionDetail(
    String questionContent,
    String expertContent,
    List<Option> questionOptions,
    List<OptionAnswer> optionAnswers,
    String questionType,
    List<ScorePoint> scorePoints)
  {
    this();
    this.questionContent = questionContent;
    this.expertContent = expertContent;
    this.questionOptions = questionOptions;
    this.optionAnswers = optionAnswers;
    this.questionType = questionType;
    this.scorePoints = scorePoints;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuestionDetail(QuestionDetail other) {
    if (other.isSetQuestionContent()) {
      this.questionContent = other.questionContent;
    }
    if (other.isSetExpertContent()) {
      this.expertContent = other.expertContent;
    }
    if (other.isSetQuestionOptions()) {
      List<Option> __this__questionOptions = new ArrayList<Option>(other.questionOptions.size());
      for (Option other_element : other.questionOptions) {
        __this__questionOptions.add(other_element);
      }
      this.questionOptions = __this__questionOptions;
    }
    if (other.isSetOptionAnswers()) {
      List<OptionAnswer> __this__optionAnswers = new ArrayList<OptionAnswer>(other.optionAnswers.size());
      for (OptionAnswer other_element : other.optionAnswers) {
        __this__optionAnswers.add(other_element);
      }
      this.optionAnswers = __this__optionAnswers;
    }
    if (other.isSetQuestionType()) {
      this.questionType = other.questionType;
    }
    if (other.isSetScorePoints()) {
      List<ScorePoint> __this__scorePoints = new ArrayList<ScorePoint>(other.scorePoints.size());
      for (ScorePoint other_element : other.scorePoints) {
        __this__scorePoints.add(other_element);
      }
      this.scorePoints = __this__scorePoints;
    }
  }

  public QuestionDetail deepCopy() {
    return new QuestionDetail(this);
  }

  @Override
  public void clear() {
    this.questionContent = null;
    this.expertContent = null;
    this.questionOptions = null;
    this.optionAnswers = null;
    this.questionType = null;
    this.scorePoints = null;
  }

  public String getQuestionContent() {
    return this.questionContent;
  }

  public QuestionDetail setQuestionContent(String questionContent) {
    this.questionContent = questionContent;
    return this;
  }

  public void unsetQuestionContent() {
    this.questionContent = null;
  }

  /** Returns true if field questionContent is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionContent() {
    return this.questionContent != null;
  }

  public void setQuestionContentIsSet(boolean value) {
    if (!value) {
      this.questionContent = null;
    }
  }

  public String getExpertContent() {
    return this.expertContent;
  }

  public QuestionDetail setExpertContent(String expertContent) {
    this.expertContent = expertContent;
    return this;
  }

  public void unsetExpertContent() {
    this.expertContent = null;
  }

  /** Returns true if field expertContent is set (has been assigned a value) and false otherwise */
  public boolean isSetExpertContent() {
    return this.expertContent != null;
  }

  public void setExpertContentIsSet(boolean value) {
    if (!value) {
      this.expertContent = null;
    }
  }

  public int getQuestionOptionsSize() {
    return (this.questionOptions == null) ? 0 : this.questionOptions.size();
  }

  public java.util.Iterator<Option> getQuestionOptionsIterator() {
    return (this.questionOptions == null) ? null : this.questionOptions.iterator();
  }

  public void addToQuestionOptions(Option elem) {
    if (this.questionOptions == null) {
      this.questionOptions = new ArrayList<Option>();
    }
    this.questionOptions.add(elem);
  }

  public List<Option> getQuestionOptions() {
    return this.questionOptions;
  }

  public QuestionDetail setQuestionOptions(List<Option> questionOptions) {
    this.questionOptions = questionOptions;
    return this;
  }

  public void unsetQuestionOptions() {
    this.questionOptions = null;
  }

  /** Returns true if field questionOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionOptions() {
    return this.questionOptions != null;
  }

  public void setQuestionOptionsIsSet(boolean value) {
    if (!value) {
      this.questionOptions = null;
    }
  }

  public int getOptionAnswersSize() {
    return (this.optionAnswers == null) ? 0 : this.optionAnswers.size();
  }

  public java.util.Iterator<OptionAnswer> getOptionAnswersIterator() {
    return (this.optionAnswers == null) ? null : this.optionAnswers.iterator();
  }

  public void addToOptionAnswers(OptionAnswer elem) {
    if (this.optionAnswers == null) {
      this.optionAnswers = new ArrayList<OptionAnswer>();
    }
    this.optionAnswers.add(elem);
  }

  public List<OptionAnswer> getOptionAnswers() {
    return this.optionAnswers;
  }

  public QuestionDetail setOptionAnswers(List<OptionAnswer> optionAnswers) {
    this.optionAnswers = optionAnswers;
    return this;
  }

  public void unsetOptionAnswers() {
    this.optionAnswers = null;
  }

  /** Returns true if field optionAnswers is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionAnswers() {
    return this.optionAnswers != null;
  }

  public void setOptionAnswersIsSet(boolean value) {
    if (!value) {
      this.optionAnswers = null;
    }
  }

  public String getQuestionType() {
    return this.questionType;
  }

  public QuestionDetail setQuestionType(String questionType) {
    this.questionType = questionType;
    return this;
  }

  public void unsetQuestionType() {
    this.questionType = null;
  }

  /** Returns true if field questionType is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionType() {
    return this.questionType != null;
  }

  public void setQuestionTypeIsSet(boolean value) {
    if (!value) {
      this.questionType = null;
    }
  }

  public int getScorePointsSize() {
    return (this.scorePoints == null) ? 0 : this.scorePoints.size();
  }

  public java.util.Iterator<ScorePoint> getScorePointsIterator() {
    return (this.scorePoints == null) ? null : this.scorePoints.iterator();
  }

  public void addToScorePoints(ScorePoint elem) {
    if (this.scorePoints == null) {
      this.scorePoints = new ArrayList<ScorePoint>();
    }
    this.scorePoints.add(elem);
  }

  public List<ScorePoint> getScorePoints() {
    return this.scorePoints;
  }

  public QuestionDetail setScorePoints(List<ScorePoint> scorePoints) {
    this.scorePoints = scorePoints;
    return this;
  }

  public void unsetScorePoints() {
    this.scorePoints = null;
  }

  /** Returns true if field scorePoints is set (has been assigned a value) and false otherwise */
  public boolean isSetScorePoints() {
    return this.scorePoints != null;
  }

  public void setScorePointsIsSet(boolean value) {
    if (!value) {
      this.scorePoints = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUESTION_CONTENT:
      if (value == null) {
        unsetQuestionContent();
      } else {
        setQuestionContent((String)value);
      }
      break;

    case EXPERT_CONTENT:
      if (value == null) {
        unsetExpertContent();
      } else {
        setExpertContent((String)value);
      }
      break;

    case QUESTION_OPTIONS:
      if (value == null) {
        unsetQuestionOptions();
      } else {
        setQuestionOptions((List<Option>)value);
      }
      break;

    case OPTION_ANSWERS:
      if (value == null) {
        unsetOptionAnswers();
      } else {
        setOptionAnswers((List<OptionAnswer>)value);
      }
      break;

    case QUESTION_TYPE:
      if (value == null) {
        unsetQuestionType();
      } else {
        setQuestionType((String)value);
      }
      break;

    case SCORE_POINTS:
      if (value == null) {
        unsetScorePoints();
      } else {
        setScorePoints((List<ScorePoint>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUESTION_CONTENT:
      return getQuestionContent();

    case EXPERT_CONTENT:
      return getExpertContent();

    case QUESTION_OPTIONS:
      return getQuestionOptions();

    case OPTION_ANSWERS:
      return getOptionAnswers();

    case QUESTION_TYPE:
      return getQuestionType();

    case SCORE_POINTS:
      return getScorePoints();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUESTION_CONTENT:
      return isSetQuestionContent();
    case EXPERT_CONTENT:
      return isSetExpertContent();
    case QUESTION_OPTIONS:
      return isSetQuestionOptions();
    case OPTION_ANSWERS:
      return isSetOptionAnswers();
    case QUESTION_TYPE:
      return isSetQuestionType();
    case SCORE_POINTS:
      return isSetScorePoints();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuestionDetail)
      return this.equals((QuestionDetail)that);
    return false;
  }

  public boolean equals(QuestionDetail that) {
    if (that == null)
      return false;

    boolean this_present_questionContent = true && this.isSetQuestionContent();
    boolean that_present_questionContent = true && that.isSetQuestionContent();
    if (this_present_questionContent || that_present_questionContent) {
      if (!(this_present_questionContent && that_present_questionContent))
        return false;
      if (!this.questionContent.equals(that.questionContent))
        return false;
    }

    boolean this_present_expertContent = true && this.isSetExpertContent();
    boolean that_present_expertContent = true && that.isSetExpertContent();
    if (this_present_expertContent || that_present_expertContent) {
      if (!(this_present_expertContent && that_present_expertContent))
        return false;
      if (!this.expertContent.equals(that.expertContent))
        return false;
    }

    boolean this_present_questionOptions = true && this.isSetQuestionOptions();
    boolean that_present_questionOptions = true && that.isSetQuestionOptions();
    if (this_present_questionOptions || that_present_questionOptions) {
      if (!(this_present_questionOptions && that_present_questionOptions))
        return false;
      if (!this.questionOptions.equals(that.questionOptions))
        return false;
    }

    boolean this_present_optionAnswers = true && this.isSetOptionAnswers();
    boolean that_present_optionAnswers = true && that.isSetOptionAnswers();
    if (this_present_optionAnswers || that_present_optionAnswers) {
      if (!(this_present_optionAnswers && that_present_optionAnswers))
        return false;
      if (!this.optionAnswers.equals(that.optionAnswers))
        return false;
    }

    boolean this_present_questionType = true && this.isSetQuestionType();
    boolean that_present_questionType = true && that.isSetQuestionType();
    if (this_present_questionType || that_present_questionType) {
      if (!(this_present_questionType && that_present_questionType))
        return false;
      if (!this.questionType.equals(that.questionType))
        return false;
    }

    boolean this_present_scorePoints = true && this.isSetScorePoints();
    boolean that_present_scorePoints = true && that.isSetScorePoints();
    if (this_present_scorePoints || that_present_scorePoints) {
      if (!(this_present_scorePoints && that_present_scorePoints))
        return false;
      if (!this.scorePoints.equals(that.scorePoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_questionContent = true && (isSetQuestionContent());
    list.add(present_questionContent);
    if (present_questionContent)
      list.add(questionContent);

    boolean present_expertContent = true && (isSetExpertContent());
    list.add(present_expertContent);
    if (present_expertContent)
      list.add(expertContent);

    boolean present_questionOptions = true && (isSetQuestionOptions());
    list.add(present_questionOptions);
    if (present_questionOptions)
      list.add(questionOptions);

    boolean present_optionAnswers = true && (isSetOptionAnswers());
    list.add(present_optionAnswers);
    if (present_optionAnswers)
      list.add(optionAnswers);

    boolean present_questionType = true && (isSetQuestionType());
    list.add(present_questionType);
    if (present_questionType)
      list.add(questionType);

    boolean present_scorePoints = true && (isSetScorePoints());
    list.add(present_scorePoints);
    if (present_scorePoints)
      list.add(scorePoints);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuestionDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuestionContent()).compareTo(other.isSetQuestionContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionContent, other.questionContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpertContent()).compareTo(other.isSetExpertContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpertContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expertContent, other.expertContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionOptions()).compareTo(other.isSetQuestionOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionOptions, other.questionOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionAnswers()).compareTo(other.isSetOptionAnswers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionAnswers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionAnswers, other.optionAnswers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionType()).compareTo(other.isSetQuestionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionType, other.questionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScorePoints()).compareTo(other.isSetScorePoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScorePoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scorePoints, other.scorePoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuestionDetail(");
    boolean first = true;

    sb.append("questionContent:");
    if (this.questionContent == null) {
      sb.append("null");
    } else {
      sb.append(this.questionContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expertContent:");
    if (this.expertContent == null) {
      sb.append("null");
    } else {
      sb.append(this.expertContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionOptions:");
    if (this.questionOptions == null) {
      sb.append("null");
    } else {
      sb.append(this.questionOptions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionAnswers:");
    if (this.optionAnswers == null) {
      sb.append("null");
    } else {
      sb.append(this.optionAnswers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionType:");
    if (this.questionType == null) {
      sb.append("null");
    } else {
      sb.append(this.questionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scorePoints:");
    if (this.scorePoints == null) {
      sb.append("null");
    } else {
      sb.append(this.scorePoints);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionDetailStandardSchemeFactory implements SchemeFactory {
    public QuestionDetailStandardScheme getScheme() {
      return new QuestionDetailStandardScheme();
    }
  }

  private static class QuestionDetailStandardScheme extends StandardScheme<QuestionDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuestionDetail struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUESTION_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionContent = iprot.readString();
              struct.setQuestionContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expertContent = iprot.readString();
              struct.setExpertContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUESTION_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.questionOptions = new ArrayList<Option>(_list32.size);
                Option _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new Option();
                  _elem33.read(iprot);
                  struct.questionOptions.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setQuestionOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPTION_ANSWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.optionAnswers = new ArrayList<OptionAnswer>(_list35.size);
                OptionAnswer _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new OptionAnswer();
                  _elem36.read(iprot);
                  struct.optionAnswers.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setOptionAnswersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUESTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionType = iprot.readString();
              struct.setQuestionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCORE_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.scorePoints = new ArrayList<ScorePoint>(_list38.size);
                ScorePoint _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new ScorePoint();
                  _elem39.read(iprot);
                  struct.scorePoints.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setScorePointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuestionDetail struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.questionContent != null) {
        oprot.writeFieldBegin(QUESTION_CONTENT_FIELD_DESC);
        oprot.writeString(struct.questionContent);
        oprot.writeFieldEnd();
      }
      if (struct.expertContent != null) {
        oprot.writeFieldBegin(EXPERT_CONTENT_FIELD_DESC);
        oprot.writeString(struct.expertContent);
        oprot.writeFieldEnd();
      }
      if (struct.questionOptions != null) {
        oprot.writeFieldBegin(QUESTION_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questionOptions.size()));
          for (Option _iter41 : struct.questionOptions)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.optionAnswers != null) {
        oprot.writeFieldBegin(OPTION_ANSWERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.optionAnswers.size()));
          for (OptionAnswer _iter42 : struct.optionAnswers)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.questionType != null) {
        oprot.writeFieldBegin(QUESTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.questionType);
        oprot.writeFieldEnd();
      }
      if (struct.scorePoints != null) {
        oprot.writeFieldBegin(SCORE_POINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.scorePoints.size()));
          for (ScorePoint _iter43 : struct.scorePoints)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionDetailTupleSchemeFactory implements SchemeFactory {
    public QuestionDetailTupleScheme getScheme() {
      return new QuestionDetailTupleScheme();
    }
  }

  private static class QuestionDetailTupleScheme extends TupleScheme<QuestionDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuestionDetail struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuestionContent()) {
        optionals.set(0);
      }
      if (struct.isSetExpertContent()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionOptions()) {
        optionals.set(2);
      }
      if (struct.isSetOptionAnswers()) {
        optionals.set(3);
      }
      if (struct.isSetQuestionType()) {
        optionals.set(4);
      }
      if (struct.isSetScorePoints()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetQuestionContent()) {
        oprot.writeString(struct.questionContent);
      }
      if (struct.isSetExpertContent()) {
        oprot.writeString(struct.expertContent);
      }
      if (struct.isSetQuestionOptions()) {
        {
          oprot.writeI32(struct.questionOptions.size());
          for (Option _iter44 : struct.questionOptions)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetOptionAnswers()) {
        {
          oprot.writeI32(struct.optionAnswers.size());
          for (OptionAnswer _iter45 : struct.optionAnswers)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetQuestionType()) {
        oprot.writeString(struct.questionType);
      }
      if (struct.isSetScorePoints()) {
        {
          oprot.writeI32(struct.scorePoints.size());
          for (ScorePoint _iter46 : struct.scorePoints)
          {
            _iter46.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuestionDetail struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.questionContent = iprot.readString();
        struct.setQuestionContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expertContent = iprot.readString();
        struct.setExpertContentIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.questionOptions = new ArrayList<Option>(_list47.size);
          Option _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new Option();
            _elem48.read(iprot);
            struct.questionOptions.add(_elem48);
          }
        }
        struct.setQuestionOptionsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.optionAnswers = new ArrayList<OptionAnswer>(_list50.size);
          OptionAnswer _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new OptionAnswer();
            _elem51.read(iprot);
            struct.optionAnswers.add(_elem51);
          }
        }
        struct.setOptionAnswersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.questionType = iprot.readString();
        struct.setQuestionTypeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.scorePoints = new ArrayList<ScorePoint>(_list53.size);
          ScorePoint _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new ScorePoint();
            _elem54.read(iprot);
            struct.scorePoints.add(_elem54);
          }
        }
        struct.setScorePointsIsSet(true);
      }
    }
  }

}

