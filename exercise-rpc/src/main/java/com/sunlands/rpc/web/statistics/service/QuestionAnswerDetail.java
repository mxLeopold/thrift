/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-03")
public class QuestionAnswerDetail implements org.apache.thrift.TBase<QuestionAnswerDetail, QuestionAnswerDetail._Fields>, java.io.Serializable, Cloneable, Comparable<QuestionAnswerDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuestionAnswerDetail");

  private static final org.apache.thrift.protocol.TField SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTION_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionContent", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAnswerNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CORRECT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("correctFlag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField QUESTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("questionId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CORRECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("correctNum", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField WRONG_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("wrongNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CORRECT_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("correctPercent", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionAnswerDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionAnswerDetailTupleSchemeFactory());
  }

  public int sequence; // required
  public String questionContent; // required
  public int totalAnswerNum; // required
  public int correctFlag; // required
  public int questionId; // required
  public int correctNum; // required
  public int wrongNum; // required
  public String correctPercent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SEQUENCE((short)1, "sequence"),
    QUESTION_CONTENT((short)2, "questionContent"),
    TOTAL_ANSWER_NUM((short)3, "totalAnswerNum"),
    CORRECT_FLAG((short)4, "correctFlag"),
    QUESTION_ID((short)5, "questionId"),
    CORRECT_NUM((short)6, "correctNum"),
    WRONG_NUM((short)7, "wrongNum"),
    CORRECT_PERCENT((short)8, "correctPercent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SEQUENCE
          return SEQUENCE;
        case 2: // QUESTION_CONTENT
          return QUESTION_CONTENT;
        case 3: // TOTAL_ANSWER_NUM
          return TOTAL_ANSWER_NUM;
        case 4: // CORRECT_FLAG
          return CORRECT_FLAG;
        case 5: // QUESTION_ID
          return QUESTION_ID;
        case 6: // CORRECT_NUM
          return CORRECT_NUM;
        case 7: // WRONG_NUM
          return WRONG_NUM;
        case 8: // CORRECT_PERCENT
          return CORRECT_PERCENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SEQUENCE_ISSET_ID = 0;
  private static final int __TOTALANSWERNUM_ISSET_ID = 1;
  private static final int __CORRECTFLAG_ISSET_ID = 2;
  private static final int __QUESTIONID_ISSET_ID = 3;
  private static final int __CORRECTNUM_ISSET_ID = 4;
  private static final int __WRONGNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("sequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("questionContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("correctFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_ID, new org.apache.thrift.meta_data.FieldMetaData("questionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("correctNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRONG_NUM, new org.apache.thrift.meta_data.FieldMetaData("wrongNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("correctPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuestionAnswerDetail.class, metaDataMap);
  }

  public QuestionAnswerDetail() {
  }

  public QuestionAnswerDetail(
    int sequence,
    String questionContent,
    int totalAnswerNum,
    int correctFlag,
    int questionId,
    int correctNum,
    int wrongNum,
    String correctPercent)
  {
    this();
    this.sequence = sequence;
    setSequenceIsSet(true);
    this.questionContent = questionContent;
    this.totalAnswerNum = totalAnswerNum;
    setTotalAnswerNumIsSet(true);
    this.correctFlag = correctFlag;
    setCorrectFlagIsSet(true);
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    this.correctNum = correctNum;
    setCorrectNumIsSet(true);
    this.wrongNum = wrongNum;
    setWrongNumIsSet(true);
    this.correctPercent = correctPercent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuestionAnswerDetail(QuestionAnswerDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sequence = other.sequence;
    if (other.isSetQuestionContent()) {
      this.questionContent = other.questionContent;
    }
    this.totalAnswerNum = other.totalAnswerNum;
    this.correctFlag = other.correctFlag;
    this.questionId = other.questionId;
    this.correctNum = other.correctNum;
    this.wrongNum = other.wrongNum;
    if (other.isSetCorrectPercent()) {
      this.correctPercent = other.correctPercent;
    }
  }

  public QuestionAnswerDetail deepCopy() {
    return new QuestionAnswerDetail(this);
  }

  @Override
  public void clear() {
    setSequenceIsSet(false);
    this.sequence = 0;
    this.questionContent = null;
    setTotalAnswerNumIsSet(false);
    this.totalAnswerNum = 0;
    setCorrectFlagIsSet(false);
    this.correctFlag = 0;
    setQuestionIdIsSet(false);
    this.questionId = 0;
    setCorrectNumIsSet(false);
    this.correctNum = 0;
    setWrongNumIsSet(false);
    this.wrongNum = 0;
    this.correctPercent = null;
  }

  public int getSequence() {
    return this.sequence;
  }

  public QuestionAnswerDetail setSequence(int sequence) {
    this.sequence = sequence;
    setSequenceIsSet(true);
    return this;
  }

  public void unsetSequence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  /** Returns true if field sequence is set (has been assigned a value) and false otherwise */
  public boolean isSetSequence() {
    return EncodingUtils.testBit(__isset_bitfield, __SEQUENCE_ISSET_ID);
  }

  public void setSequenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQUENCE_ISSET_ID, value);
  }

  public String getQuestionContent() {
    return this.questionContent;
  }

  public QuestionAnswerDetail setQuestionContent(String questionContent) {
    this.questionContent = questionContent;
    return this;
  }

  public void unsetQuestionContent() {
    this.questionContent = null;
  }

  /** Returns true if field questionContent is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionContent() {
    return this.questionContent != null;
  }

  public void setQuestionContentIsSet(boolean value) {
    if (!value) {
      this.questionContent = null;
    }
  }

  public int getTotalAnswerNum() {
    return this.totalAnswerNum;
  }

  public QuestionAnswerDetail setTotalAnswerNum(int totalAnswerNum) {
    this.totalAnswerNum = totalAnswerNum;
    setTotalAnswerNumIsSet(true);
    return this;
  }

  public void unsetTotalAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID);
  }

  /** Returns true if field totalAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID);
  }

  public void setTotalAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALANSWERNUM_ISSET_ID, value);
  }

  public int getCorrectFlag() {
    return this.correctFlag;
  }

  public QuestionAnswerDetail setCorrectFlag(int correctFlag) {
    this.correctFlag = correctFlag;
    setCorrectFlagIsSet(true);
    return this;
  }

  public void unsetCorrectFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTFLAG_ISSET_ID);
  }

  /** Returns true if field correctFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTFLAG_ISSET_ID);
  }

  public void setCorrectFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTFLAG_ISSET_ID, value);
  }

  public int getQuestionId() {
    return this.questionId;
  }

  public QuestionAnswerDetail setQuestionId(int questionId) {
    this.questionId = questionId;
    setQuestionIdIsSet(true);
    return this;
  }

  public void unsetQuestionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  /** Returns true if field questionId is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionId() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONID_ISSET_ID);
  }

  public void setQuestionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONID_ISSET_ID, value);
  }

  public int getCorrectNum() {
    return this.correctNum;
  }

  public QuestionAnswerDetail setCorrectNum(int correctNum) {
    this.correctNum = correctNum;
    setCorrectNumIsSet(true);
    return this;
  }

  public void unsetCorrectNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTNUM_ISSET_ID);
  }

  /** Returns true if field correctNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTNUM_ISSET_ID);
  }

  public void setCorrectNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTNUM_ISSET_ID, value);
  }

  public int getWrongNum() {
    return this.wrongNum;
  }

  public QuestionAnswerDetail setWrongNum(int wrongNum) {
    this.wrongNum = wrongNum;
    setWrongNumIsSet(true);
    return this;
  }

  public void unsetWrongNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRONGNUM_ISSET_ID);
  }

  /** Returns true if field wrongNum is set (has been assigned a value) and false otherwise */
  public boolean isSetWrongNum() {
    return EncodingUtils.testBit(__isset_bitfield, __WRONGNUM_ISSET_ID);
  }

  public void setWrongNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRONGNUM_ISSET_ID, value);
  }

  public String getCorrectPercent() {
    return this.correctPercent;
  }

  public QuestionAnswerDetail setCorrectPercent(String correctPercent) {
    this.correctPercent = correctPercent;
    return this;
  }

  public void unsetCorrectPercent() {
    this.correctPercent = null;
  }

  /** Returns true if field correctPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectPercent() {
    return this.correctPercent != null;
  }

  public void setCorrectPercentIsSet(boolean value) {
    if (!value) {
      this.correctPercent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SEQUENCE:
      if (value == null) {
        unsetSequence();
      } else {
        setSequence((Integer)value);
      }
      break;

    case QUESTION_CONTENT:
      if (value == null) {
        unsetQuestionContent();
      } else {
        setQuestionContent((String)value);
      }
      break;

    case TOTAL_ANSWER_NUM:
      if (value == null) {
        unsetTotalAnswerNum();
      } else {
        setTotalAnswerNum((Integer)value);
      }
      break;

    case CORRECT_FLAG:
      if (value == null) {
        unsetCorrectFlag();
      } else {
        setCorrectFlag((Integer)value);
      }
      break;

    case QUESTION_ID:
      if (value == null) {
        unsetQuestionId();
      } else {
        setQuestionId((Integer)value);
      }
      break;

    case CORRECT_NUM:
      if (value == null) {
        unsetCorrectNum();
      } else {
        setCorrectNum((Integer)value);
      }
      break;

    case WRONG_NUM:
      if (value == null) {
        unsetWrongNum();
      } else {
        setWrongNum((Integer)value);
      }
      break;

    case CORRECT_PERCENT:
      if (value == null) {
        unsetCorrectPercent();
      } else {
        setCorrectPercent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SEQUENCE:
      return getSequence();

    case QUESTION_CONTENT:
      return getQuestionContent();

    case TOTAL_ANSWER_NUM:
      return getTotalAnswerNum();

    case CORRECT_FLAG:
      return getCorrectFlag();

    case QUESTION_ID:
      return getQuestionId();

    case CORRECT_NUM:
      return getCorrectNum();

    case WRONG_NUM:
      return getWrongNum();

    case CORRECT_PERCENT:
      return getCorrectPercent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SEQUENCE:
      return isSetSequence();
    case QUESTION_CONTENT:
      return isSetQuestionContent();
    case TOTAL_ANSWER_NUM:
      return isSetTotalAnswerNum();
    case CORRECT_FLAG:
      return isSetCorrectFlag();
    case QUESTION_ID:
      return isSetQuestionId();
    case CORRECT_NUM:
      return isSetCorrectNum();
    case WRONG_NUM:
      return isSetWrongNum();
    case CORRECT_PERCENT:
      return isSetCorrectPercent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuestionAnswerDetail)
      return this.equals((QuestionAnswerDetail)that);
    return false;
  }

  public boolean equals(QuestionAnswerDetail that) {
    if (that == null)
      return false;

    boolean this_present_sequence = true;
    boolean that_present_sequence = true;
    if (this_present_sequence || that_present_sequence) {
      if (!(this_present_sequence && that_present_sequence))
        return false;
      if (this.sequence != that.sequence)
        return false;
    }

    boolean this_present_questionContent = true && this.isSetQuestionContent();
    boolean that_present_questionContent = true && that.isSetQuestionContent();
    if (this_present_questionContent || that_present_questionContent) {
      if (!(this_present_questionContent && that_present_questionContent))
        return false;
      if (!this.questionContent.equals(that.questionContent))
        return false;
    }

    boolean this_present_totalAnswerNum = true;
    boolean that_present_totalAnswerNum = true;
    if (this_present_totalAnswerNum || that_present_totalAnswerNum) {
      if (!(this_present_totalAnswerNum && that_present_totalAnswerNum))
        return false;
      if (this.totalAnswerNum != that.totalAnswerNum)
        return false;
    }

    boolean this_present_correctFlag = true;
    boolean that_present_correctFlag = true;
    if (this_present_correctFlag || that_present_correctFlag) {
      if (!(this_present_correctFlag && that_present_correctFlag))
        return false;
      if (this.correctFlag != that.correctFlag)
        return false;
    }

    boolean this_present_questionId = true;
    boolean that_present_questionId = true;
    if (this_present_questionId || that_present_questionId) {
      if (!(this_present_questionId && that_present_questionId))
        return false;
      if (this.questionId != that.questionId)
        return false;
    }

    boolean this_present_correctNum = true;
    boolean that_present_correctNum = true;
    if (this_present_correctNum || that_present_correctNum) {
      if (!(this_present_correctNum && that_present_correctNum))
        return false;
      if (this.correctNum != that.correctNum)
        return false;
    }

    boolean this_present_wrongNum = true;
    boolean that_present_wrongNum = true;
    if (this_present_wrongNum || that_present_wrongNum) {
      if (!(this_present_wrongNum && that_present_wrongNum))
        return false;
      if (this.wrongNum != that.wrongNum)
        return false;
    }

    boolean this_present_correctPercent = true && this.isSetCorrectPercent();
    boolean that_present_correctPercent = true && that.isSetCorrectPercent();
    if (this_present_correctPercent || that_present_correctPercent) {
      if (!(this_present_correctPercent && that_present_correctPercent))
        return false;
      if (!this.correctPercent.equals(that.correctPercent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sequence = true;
    list.add(present_sequence);
    if (present_sequence)
      list.add(sequence);

    boolean present_questionContent = true && (isSetQuestionContent());
    list.add(present_questionContent);
    if (present_questionContent)
      list.add(questionContent);

    boolean present_totalAnswerNum = true;
    list.add(present_totalAnswerNum);
    if (present_totalAnswerNum)
      list.add(totalAnswerNum);

    boolean present_correctFlag = true;
    list.add(present_correctFlag);
    if (present_correctFlag)
      list.add(correctFlag);

    boolean present_questionId = true;
    list.add(present_questionId);
    if (present_questionId)
      list.add(questionId);

    boolean present_correctNum = true;
    list.add(present_correctNum);
    if (present_correctNum)
      list.add(correctNum);

    boolean present_wrongNum = true;
    list.add(present_wrongNum);
    if (present_wrongNum)
      list.add(wrongNum);

    boolean present_correctPercent = true && (isSetCorrectPercent());
    list.add(present_correctPercent);
    if (present_correctPercent)
      list.add(correctPercent);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuestionAnswerDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSequence()).compareTo(other.isSetSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence, other.sequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionContent()).compareTo(other.isSetQuestionContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionContent, other.questionContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAnswerNum()).compareTo(other.isSetTotalAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAnswerNum, other.totalAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectFlag()).compareTo(other.isSetCorrectFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctFlag, other.correctFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionId()).compareTo(other.isSetQuestionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionId, other.questionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectNum()).compareTo(other.isSetCorrectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctNum, other.correctNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrongNum()).compareTo(other.isSetWrongNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrongNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrongNum, other.wrongNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectPercent()).compareTo(other.isSetCorrectPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctPercent, other.correctPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuestionAnswerDetail(");
    boolean first = true;

    sb.append("sequence:");
    sb.append(this.sequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionContent:");
    if (this.questionContent == null) {
      sb.append("null");
    } else {
      sb.append(this.questionContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAnswerNum:");
    sb.append(this.totalAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctFlag:");
    sb.append(this.correctFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionId:");
    sb.append(this.questionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctNum:");
    sb.append(this.correctNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wrongNum:");
    sb.append(this.wrongNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctPercent:");
    if (this.correctPercent == null) {
      sb.append("null");
    } else {
      sb.append(this.correctPercent);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionAnswerDetailStandardSchemeFactory implements SchemeFactory {
    public QuestionAnswerDetailStandardScheme getScheme() {
      return new QuestionAnswerDetailStandardScheme();
    }
  }

  private static class QuestionAnswerDetailStandardScheme extends StandardScheme<QuestionAnswerDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuestionAnswerDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sequence = iprot.readI32();
              struct.setSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTION_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionContent = iprot.readString();
              struct.setQuestionContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalAnswerNum = iprot.readI32();
              struct.setTotalAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CORRECT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correctFlag = iprot.readI32();
              struct.setCorrectFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUESTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionId = iprot.readI32();
              struct.setQuestionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CORRECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correctNum = iprot.readI32();
              struct.setCorrectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WRONG_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wrongNum = iprot.readI32();
              struct.setWrongNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CORRECT_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.correctPercent = iprot.readString();
              struct.setCorrectPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuestionAnswerDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQUENCE_FIELD_DESC);
      oprot.writeI32(struct.sequence);
      oprot.writeFieldEnd();
      if (struct.questionContent != null) {
        oprot.writeFieldBegin(QUESTION_CONTENT_FIELD_DESC);
        oprot.writeString(struct.questionContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.totalAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_FLAG_FIELD_DESC);
      oprot.writeI32(struct.correctFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUESTION_ID_FIELD_DESC);
      oprot.writeI32(struct.questionId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_NUM_FIELD_DESC);
      oprot.writeI32(struct.correctNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRONG_NUM_FIELD_DESC);
      oprot.writeI32(struct.wrongNum);
      oprot.writeFieldEnd();
      if (struct.correctPercent != null) {
        oprot.writeFieldBegin(CORRECT_PERCENT_FIELD_DESC);
        oprot.writeString(struct.correctPercent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionAnswerDetailTupleSchemeFactory implements SchemeFactory {
    public QuestionAnswerDetailTupleScheme getScheme() {
      return new QuestionAnswerDetailTupleScheme();
    }
  }

  private static class QuestionAnswerDetailTupleScheme extends TupleScheme<QuestionAnswerDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuestionAnswerDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSequence()) {
        optionals.set(0);
      }
      if (struct.isSetQuestionContent()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAnswerNum()) {
        optionals.set(2);
      }
      if (struct.isSetCorrectFlag()) {
        optionals.set(3);
      }
      if (struct.isSetQuestionId()) {
        optionals.set(4);
      }
      if (struct.isSetCorrectNum()) {
        optionals.set(5);
      }
      if (struct.isSetWrongNum()) {
        optionals.set(6);
      }
      if (struct.isSetCorrectPercent()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSequence()) {
        oprot.writeI32(struct.sequence);
      }
      if (struct.isSetQuestionContent()) {
        oprot.writeString(struct.questionContent);
      }
      if (struct.isSetTotalAnswerNum()) {
        oprot.writeI32(struct.totalAnswerNum);
      }
      if (struct.isSetCorrectFlag()) {
        oprot.writeI32(struct.correctFlag);
      }
      if (struct.isSetQuestionId()) {
        oprot.writeI32(struct.questionId);
      }
      if (struct.isSetCorrectNum()) {
        oprot.writeI32(struct.correctNum);
      }
      if (struct.isSetWrongNum()) {
        oprot.writeI32(struct.wrongNum);
      }
      if (struct.isSetCorrectPercent()) {
        oprot.writeString(struct.correctPercent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuestionAnswerDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.sequence = iprot.readI32();
        struct.setSequenceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.questionContent = iprot.readString();
        struct.setQuestionContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAnswerNum = iprot.readI32();
        struct.setTotalAnswerNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.correctFlag = iprot.readI32();
        struct.setCorrectFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.questionId = iprot.readI32();
        struct.setQuestionIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.correctNum = iprot.readI32();
        struct.setCorrectNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wrongNum = iprot.readI32();
        struct.setWrongNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.correctPercent = iprot.readString();
        struct.setCorrectPercentIsSet(true);
      }
    }
  }

}

