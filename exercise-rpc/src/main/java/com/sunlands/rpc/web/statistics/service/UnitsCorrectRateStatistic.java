/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-27")
public class UnitsCorrectRateStatistic implements org.apache.thrift.TBase<UnitsCorrectRateStatistic, UnitsCorrectRateStatistic._Fields>, java.io.Serializable, Cloneable, Comparable<UnitsCorrectRateStatistic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnitsCorrectRateStatistic");

  private static final org.apache.thrift.protocol.TField TEACH_UNIT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("teachUnitIds", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOMEWORK_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkAnswerNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUIZZES_ANSWER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesAnswerNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HOMEWORK_MAX_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkMaxCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField HOMEWORK_AVG_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkAvgCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField HOMEWORK_MIN_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeworkMinCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField QUIZZES_MAX_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesMaxCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField QUIZZES_AVG_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesAvgCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField QUIZZES_MIN_CORRECT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("quizzesMinCorrectRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UnitsCorrectRateStatisticStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UnitsCorrectRateStatisticTupleSchemeFactory());
  }

  public String teachUnitIds; // required
  public int homeworkAnswerNum; // required
  public int quizzesAnswerNum; // required
  public double homeworkMaxCorrectRate; // required
  public double homeworkAvgCorrectRate; // required
  public double homeworkMinCorrectRate; // required
  public double quizzesMaxCorrectRate; // required
  public double quizzesAvgCorrectRate; // required
  public double quizzesMinCorrectRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEACH_UNIT_IDS((short)1, "teachUnitIds"),
    HOMEWORK_ANSWER_NUM((short)2, "homeworkAnswerNum"),
    QUIZZES_ANSWER_NUM((short)3, "quizzesAnswerNum"),
    HOMEWORK_MAX_CORRECT_RATE((short)4, "homeworkMaxCorrectRate"),
    HOMEWORK_AVG_CORRECT_RATE((short)5, "homeworkAvgCorrectRate"),
    HOMEWORK_MIN_CORRECT_RATE((short)6, "homeworkMinCorrectRate"),
    QUIZZES_MAX_CORRECT_RATE((short)7, "quizzesMaxCorrectRate"),
    QUIZZES_AVG_CORRECT_RATE((short)8, "quizzesAvgCorrectRate"),
    QUIZZES_MIN_CORRECT_RATE((short)9, "quizzesMinCorrectRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEACH_UNIT_IDS
          return TEACH_UNIT_IDS;
        case 2: // HOMEWORK_ANSWER_NUM
          return HOMEWORK_ANSWER_NUM;
        case 3: // QUIZZES_ANSWER_NUM
          return QUIZZES_ANSWER_NUM;
        case 4: // HOMEWORK_MAX_CORRECT_RATE
          return HOMEWORK_MAX_CORRECT_RATE;
        case 5: // HOMEWORK_AVG_CORRECT_RATE
          return HOMEWORK_AVG_CORRECT_RATE;
        case 6: // HOMEWORK_MIN_CORRECT_RATE
          return HOMEWORK_MIN_CORRECT_RATE;
        case 7: // QUIZZES_MAX_CORRECT_RATE
          return QUIZZES_MAX_CORRECT_RATE;
        case 8: // QUIZZES_AVG_CORRECT_RATE
          return QUIZZES_AVG_CORRECT_RATE;
        case 9: // QUIZZES_MIN_CORRECT_RATE
          return QUIZZES_MIN_CORRECT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOMEWORKANSWERNUM_ISSET_ID = 0;
  private static final int __QUIZZESANSWERNUM_ISSET_ID = 1;
  private static final int __HOMEWORKMAXCORRECTRATE_ISSET_ID = 2;
  private static final int __HOMEWORKAVGCORRECTRATE_ISSET_ID = 3;
  private static final int __HOMEWORKMINCORRECTRATE_ISSET_ID = 4;
  private static final int __QUIZZESMAXCORRECTRATE_ISSET_ID = 5;
  private static final int __QUIZZESAVGCORRECTRATE_ISSET_ID = 6;
  private static final int __QUIZZESMINCORRECTRATE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEACH_UNIT_IDS, new org.apache.thrift.meta_data.FieldMetaData("teachUnitIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOMEWORK_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("homeworkAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUIZZES_ANSWER_NUM, new org.apache.thrift.meta_data.FieldMetaData("quizzesAnswerNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOMEWORK_MAX_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("homeworkMaxCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOMEWORK_AVG_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("homeworkAvgCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOMEWORK_MIN_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("homeworkMinCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUIZZES_MAX_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("quizzesMaxCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUIZZES_AVG_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("quizzesAvgCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUIZZES_MIN_CORRECT_RATE, new org.apache.thrift.meta_data.FieldMetaData("quizzesMinCorrectRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnitsCorrectRateStatistic.class, metaDataMap);
  }

  public UnitsCorrectRateStatistic() {
  }

  public UnitsCorrectRateStatistic(
    String teachUnitIds,
    int homeworkAnswerNum,
    int quizzesAnswerNum,
    double homeworkMaxCorrectRate,
    double homeworkAvgCorrectRate,
    double homeworkMinCorrectRate,
    double quizzesMaxCorrectRate,
    double quizzesAvgCorrectRate,
    double quizzesMinCorrectRate)
  {
    this();
    this.teachUnitIds = teachUnitIds;
    this.homeworkAnswerNum = homeworkAnswerNum;
    setHomeworkAnswerNumIsSet(true);
    this.quizzesAnswerNum = quizzesAnswerNum;
    setQuizzesAnswerNumIsSet(true);
    this.homeworkMaxCorrectRate = homeworkMaxCorrectRate;
    setHomeworkMaxCorrectRateIsSet(true);
    this.homeworkAvgCorrectRate = homeworkAvgCorrectRate;
    setHomeworkAvgCorrectRateIsSet(true);
    this.homeworkMinCorrectRate = homeworkMinCorrectRate;
    setHomeworkMinCorrectRateIsSet(true);
    this.quizzesMaxCorrectRate = quizzesMaxCorrectRate;
    setQuizzesMaxCorrectRateIsSet(true);
    this.quizzesAvgCorrectRate = quizzesAvgCorrectRate;
    setQuizzesAvgCorrectRateIsSet(true);
    this.quizzesMinCorrectRate = quizzesMinCorrectRate;
    setQuizzesMinCorrectRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UnitsCorrectRateStatistic(UnitsCorrectRateStatistic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTeachUnitIds()) {
      this.teachUnitIds = other.teachUnitIds;
    }
    this.homeworkAnswerNum = other.homeworkAnswerNum;
    this.quizzesAnswerNum = other.quizzesAnswerNum;
    this.homeworkMaxCorrectRate = other.homeworkMaxCorrectRate;
    this.homeworkAvgCorrectRate = other.homeworkAvgCorrectRate;
    this.homeworkMinCorrectRate = other.homeworkMinCorrectRate;
    this.quizzesMaxCorrectRate = other.quizzesMaxCorrectRate;
    this.quizzesAvgCorrectRate = other.quizzesAvgCorrectRate;
    this.quizzesMinCorrectRate = other.quizzesMinCorrectRate;
  }

  public UnitsCorrectRateStatistic deepCopy() {
    return new UnitsCorrectRateStatistic(this);
  }

  @Override
  public void clear() {
    this.teachUnitIds = null;
    setHomeworkAnswerNumIsSet(false);
    this.homeworkAnswerNum = 0;
    setQuizzesAnswerNumIsSet(false);
    this.quizzesAnswerNum = 0;
    setHomeworkMaxCorrectRateIsSet(false);
    this.homeworkMaxCorrectRate = 0.0;
    setHomeworkAvgCorrectRateIsSet(false);
    this.homeworkAvgCorrectRate = 0.0;
    setHomeworkMinCorrectRateIsSet(false);
    this.homeworkMinCorrectRate = 0.0;
    setQuizzesMaxCorrectRateIsSet(false);
    this.quizzesMaxCorrectRate = 0.0;
    setQuizzesAvgCorrectRateIsSet(false);
    this.quizzesAvgCorrectRate = 0.0;
    setQuizzesMinCorrectRateIsSet(false);
    this.quizzesMinCorrectRate = 0.0;
  }

  public String getTeachUnitIds() {
    return this.teachUnitIds;
  }

  public UnitsCorrectRateStatistic setTeachUnitIds(String teachUnitIds) {
    this.teachUnitIds = teachUnitIds;
    return this;
  }

  public void unsetTeachUnitIds() {
    this.teachUnitIds = null;
  }

  /** Returns true if field teachUnitIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachUnitIds() {
    return this.teachUnitIds != null;
  }

  public void setTeachUnitIdsIsSet(boolean value) {
    if (!value) {
      this.teachUnitIds = null;
    }
  }

  public int getHomeworkAnswerNum() {
    return this.homeworkAnswerNum;
  }

  public UnitsCorrectRateStatistic setHomeworkAnswerNum(int homeworkAnswerNum) {
    this.homeworkAnswerNum = homeworkAnswerNum;
    setHomeworkAnswerNumIsSet(true);
    return this;
  }

  public void unsetHomeworkAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKANSWERNUM_ISSET_ID);
  }

  /** Returns true if field homeworkAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKANSWERNUM_ISSET_ID);
  }

  public void setHomeworkAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKANSWERNUM_ISSET_ID, value);
  }

  public int getQuizzesAnswerNum() {
    return this.quizzesAnswerNum;
  }

  public UnitsCorrectRateStatistic setQuizzesAnswerNum(int quizzesAnswerNum) {
    this.quizzesAnswerNum = quizzesAnswerNum;
    setQuizzesAnswerNumIsSet(true);
    return this;
  }

  public void unsetQuizzesAnswerNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESANSWERNUM_ISSET_ID);
  }

  /** Returns true if field quizzesAnswerNum is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesAnswerNum() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESANSWERNUM_ISSET_ID);
  }

  public void setQuizzesAnswerNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESANSWERNUM_ISSET_ID, value);
  }

  public double getHomeworkMaxCorrectRate() {
    return this.homeworkMaxCorrectRate;
  }

  public UnitsCorrectRateStatistic setHomeworkMaxCorrectRate(double homeworkMaxCorrectRate) {
    this.homeworkMaxCorrectRate = homeworkMaxCorrectRate;
    setHomeworkMaxCorrectRateIsSet(true);
    return this;
  }

  public void unsetHomeworkMaxCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKMAXCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field homeworkMaxCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkMaxCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKMAXCORRECTRATE_ISSET_ID);
  }

  public void setHomeworkMaxCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKMAXCORRECTRATE_ISSET_ID, value);
  }

  public double getHomeworkAvgCorrectRate() {
    return this.homeworkAvgCorrectRate;
  }

  public UnitsCorrectRateStatistic setHomeworkAvgCorrectRate(double homeworkAvgCorrectRate) {
    this.homeworkAvgCorrectRate = homeworkAvgCorrectRate;
    setHomeworkAvgCorrectRateIsSet(true);
    return this;
  }

  public void unsetHomeworkAvgCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKAVGCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field homeworkAvgCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkAvgCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKAVGCORRECTRATE_ISSET_ID);
  }

  public void setHomeworkAvgCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKAVGCORRECTRATE_ISSET_ID, value);
  }

  public double getHomeworkMinCorrectRate() {
    return this.homeworkMinCorrectRate;
  }

  public UnitsCorrectRateStatistic setHomeworkMinCorrectRate(double homeworkMinCorrectRate) {
    this.homeworkMinCorrectRate = homeworkMinCorrectRate;
    setHomeworkMinCorrectRateIsSet(true);
    return this;
  }

  public void unsetHomeworkMinCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOMEWORKMINCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field homeworkMinCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeworkMinCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __HOMEWORKMINCORRECTRATE_ISSET_ID);
  }

  public void setHomeworkMinCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOMEWORKMINCORRECTRATE_ISSET_ID, value);
  }

  public double getQuizzesMaxCorrectRate() {
    return this.quizzesMaxCorrectRate;
  }

  public UnitsCorrectRateStatistic setQuizzesMaxCorrectRate(double quizzesMaxCorrectRate) {
    this.quizzesMaxCorrectRate = quizzesMaxCorrectRate;
    setQuizzesMaxCorrectRateIsSet(true);
    return this;
  }

  public void unsetQuizzesMaxCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESMAXCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field quizzesMaxCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesMaxCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESMAXCORRECTRATE_ISSET_ID);
  }

  public void setQuizzesMaxCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESMAXCORRECTRATE_ISSET_ID, value);
  }

  public double getQuizzesAvgCorrectRate() {
    return this.quizzesAvgCorrectRate;
  }

  public UnitsCorrectRateStatistic setQuizzesAvgCorrectRate(double quizzesAvgCorrectRate) {
    this.quizzesAvgCorrectRate = quizzesAvgCorrectRate;
    setQuizzesAvgCorrectRateIsSet(true);
    return this;
  }

  public void unsetQuizzesAvgCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESAVGCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field quizzesAvgCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesAvgCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESAVGCORRECTRATE_ISSET_ID);
  }

  public void setQuizzesAvgCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESAVGCORRECTRATE_ISSET_ID, value);
  }

  public double getQuizzesMinCorrectRate() {
    return this.quizzesMinCorrectRate;
  }

  public UnitsCorrectRateStatistic setQuizzesMinCorrectRate(double quizzesMinCorrectRate) {
    this.quizzesMinCorrectRate = quizzesMinCorrectRate;
    setQuizzesMinCorrectRateIsSet(true);
    return this;
  }

  public void unsetQuizzesMinCorrectRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUIZZESMINCORRECTRATE_ISSET_ID);
  }

  /** Returns true if field quizzesMinCorrectRate is set (has been assigned a value) and false otherwise */
  public boolean isSetQuizzesMinCorrectRate() {
    return EncodingUtils.testBit(__isset_bitfield, __QUIZZESMINCORRECTRATE_ISSET_ID);
  }

  public void setQuizzesMinCorrectRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUIZZESMINCORRECTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEACH_UNIT_IDS:
      if (value == null) {
        unsetTeachUnitIds();
      } else {
        setTeachUnitIds((String)value);
      }
      break;

    case HOMEWORK_ANSWER_NUM:
      if (value == null) {
        unsetHomeworkAnswerNum();
      } else {
        setHomeworkAnswerNum((Integer)value);
      }
      break;

    case QUIZZES_ANSWER_NUM:
      if (value == null) {
        unsetQuizzesAnswerNum();
      } else {
        setQuizzesAnswerNum((Integer)value);
      }
      break;

    case HOMEWORK_MAX_CORRECT_RATE:
      if (value == null) {
        unsetHomeworkMaxCorrectRate();
      } else {
        setHomeworkMaxCorrectRate((Double)value);
      }
      break;

    case HOMEWORK_AVG_CORRECT_RATE:
      if (value == null) {
        unsetHomeworkAvgCorrectRate();
      } else {
        setHomeworkAvgCorrectRate((Double)value);
      }
      break;

    case HOMEWORK_MIN_CORRECT_RATE:
      if (value == null) {
        unsetHomeworkMinCorrectRate();
      } else {
        setHomeworkMinCorrectRate((Double)value);
      }
      break;

    case QUIZZES_MAX_CORRECT_RATE:
      if (value == null) {
        unsetQuizzesMaxCorrectRate();
      } else {
        setQuizzesMaxCorrectRate((Double)value);
      }
      break;

    case QUIZZES_AVG_CORRECT_RATE:
      if (value == null) {
        unsetQuizzesAvgCorrectRate();
      } else {
        setQuizzesAvgCorrectRate((Double)value);
      }
      break;

    case QUIZZES_MIN_CORRECT_RATE:
      if (value == null) {
        unsetQuizzesMinCorrectRate();
      } else {
        setQuizzesMinCorrectRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEACH_UNIT_IDS:
      return getTeachUnitIds();

    case HOMEWORK_ANSWER_NUM:
      return getHomeworkAnswerNum();

    case QUIZZES_ANSWER_NUM:
      return getQuizzesAnswerNum();

    case HOMEWORK_MAX_CORRECT_RATE:
      return getHomeworkMaxCorrectRate();

    case HOMEWORK_AVG_CORRECT_RATE:
      return getHomeworkAvgCorrectRate();

    case HOMEWORK_MIN_CORRECT_RATE:
      return getHomeworkMinCorrectRate();

    case QUIZZES_MAX_CORRECT_RATE:
      return getQuizzesMaxCorrectRate();

    case QUIZZES_AVG_CORRECT_RATE:
      return getQuizzesAvgCorrectRate();

    case QUIZZES_MIN_CORRECT_RATE:
      return getQuizzesMinCorrectRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEACH_UNIT_IDS:
      return isSetTeachUnitIds();
    case HOMEWORK_ANSWER_NUM:
      return isSetHomeworkAnswerNum();
    case QUIZZES_ANSWER_NUM:
      return isSetQuizzesAnswerNum();
    case HOMEWORK_MAX_CORRECT_RATE:
      return isSetHomeworkMaxCorrectRate();
    case HOMEWORK_AVG_CORRECT_RATE:
      return isSetHomeworkAvgCorrectRate();
    case HOMEWORK_MIN_CORRECT_RATE:
      return isSetHomeworkMinCorrectRate();
    case QUIZZES_MAX_CORRECT_RATE:
      return isSetQuizzesMaxCorrectRate();
    case QUIZZES_AVG_CORRECT_RATE:
      return isSetQuizzesAvgCorrectRate();
    case QUIZZES_MIN_CORRECT_RATE:
      return isSetQuizzesMinCorrectRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UnitsCorrectRateStatistic)
      return this.equals((UnitsCorrectRateStatistic)that);
    return false;
  }

  public boolean equals(UnitsCorrectRateStatistic that) {
    if (that == null)
      return false;

    boolean this_present_teachUnitIds = true && this.isSetTeachUnitIds();
    boolean that_present_teachUnitIds = true && that.isSetTeachUnitIds();
    if (this_present_teachUnitIds || that_present_teachUnitIds) {
      if (!(this_present_teachUnitIds && that_present_teachUnitIds))
        return false;
      if (!this.teachUnitIds.equals(that.teachUnitIds))
        return false;
    }

    boolean this_present_homeworkAnswerNum = true;
    boolean that_present_homeworkAnswerNum = true;
    if (this_present_homeworkAnswerNum || that_present_homeworkAnswerNum) {
      if (!(this_present_homeworkAnswerNum && that_present_homeworkAnswerNum))
        return false;
      if (this.homeworkAnswerNum != that.homeworkAnswerNum)
        return false;
    }

    boolean this_present_quizzesAnswerNum = true;
    boolean that_present_quizzesAnswerNum = true;
    if (this_present_quizzesAnswerNum || that_present_quizzesAnswerNum) {
      if (!(this_present_quizzesAnswerNum && that_present_quizzesAnswerNum))
        return false;
      if (this.quizzesAnswerNum != that.quizzesAnswerNum)
        return false;
    }

    boolean this_present_homeworkMaxCorrectRate = true;
    boolean that_present_homeworkMaxCorrectRate = true;
    if (this_present_homeworkMaxCorrectRate || that_present_homeworkMaxCorrectRate) {
      if (!(this_present_homeworkMaxCorrectRate && that_present_homeworkMaxCorrectRate))
        return false;
      if (this.homeworkMaxCorrectRate != that.homeworkMaxCorrectRate)
        return false;
    }

    boolean this_present_homeworkAvgCorrectRate = true;
    boolean that_present_homeworkAvgCorrectRate = true;
    if (this_present_homeworkAvgCorrectRate || that_present_homeworkAvgCorrectRate) {
      if (!(this_present_homeworkAvgCorrectRate && that_present_homeworkAvgCorrectRate))
        return false;
      if (this.homeworkAvgCorrectRate != that.homeworkAvgCorrectRate)
        return false;
    }

    boolean this_present_homeworkMinCorrectRate = true;
    boolean that_present_homeworkMinCorrectRate = true;
    if (this_present_homeworkMinCorrectRate || that_present_homeworkMinCorrectRate) {
      if (!(this_present_homeworkMinCorrectRate && that_present_homeworkMinCorrectRate))
        return false;
      if (this.homeworkMinCorrectRate != that.homeworkMinCorrectRate)
        return false;
    }

    boolean this_present_quizzesMaxCorrectRate = true;
    boolean that_present_quizzesMaxCorrectRate = true;
    if (this_present_quizzesMaxCorrectRate || that_present_quizzesMaxCorrectRate) {
      if (!(this_present_quizzesMaxCorrectRate && that_present_quizzesMaxCorrectRate))
        return false;
      if (this.quizzesMaxCorrectRate != that.quizzesMaxCorrectRate)
        return false;
    }

    boolean this_present_quizzesAvgCorrectRate = true;
    boolean that_present_quizzesAvgCorrectRate = true;
    if (this_present_quizzesAvgCorrectRate || that_present_quizzesAvgCorrectRate) {
      if (!(this_present_quizzesAvgCorrectRate && that_present_quizzesAvgCorrectRate))
        return false;
      if (this.quizzesAvgCorrectRate != that.quizzesAvgCorrectRate)
        return false;
    }

    boolean this_present_quizzesMinCorrectRate = true;
    boolean that_present_quizzesMinCorrectRate = true;
    if (this_present_quizzesMinCorrectRate || that_present_quizzesMinCorrectRate) {
      if (!(this_present_quizzesMinCorrectRate && that_present_quizzesMinCorrectRate))
        return false;
      if (this.quizzesMinCorrectRate != that.quizzesMinCorrectRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teachUnitIds = true && (isSetTeachUnitIds());
    list.add(present_teachUnitIds);
    if (present_teachUnitIds)
      list.add(teachUnitIds);

    boolean present_homeworkAnswerNum = true;
    list.add(present_homeworkAnswerNum);
    if (present_homeworkAnswerNum)
      list.add(homeworkAnswerNum);

    boolean present_quizzesAnswerNum = true;
    list.add(present_quizzesAnswerNum);
    if (present_quizzesAnswerNum)
      list.add(quizzesAnswerNum);

    boolean present_homeworkMaxCorrectRate = true;
    list.add(present_homeworkMaxCorrectRate);
    if (present_homeworkMaxCorrectRate)
      list.add(homeworkMaxCorrectRate);

    boolean present_homeworkAvgCorrectRate = true;
    list.add(present_homeworkAvgCorrectRate);
    if (present_homeworkAvgCorrectRate)
      list.add(homeworkAvgCorrectRate);

    boolean present_homeworkMinCorrectRate = true;
    list.add(present_homeworkMinCorrectRate);
    if (present_homeworkMinCorrectRate)
      list.add(homeworkMinCorrectRate);

    boolean present_quizzesMaxCorrectRate = true;
    list.add(present_quizzesMaxCorrectRate);
    if (present_quizzesMaxCorrectRate)
      list.add(quizzesMaxCorrectRate);

    boolean present_quizzesAvgCorrectRate = true;
    list.add(present_quizzesAvgCorrectRate);
    if (present_quizzesAvgCorrectRate)
      list.add(quizzesAvgCorrectRate);

    boolean present_quizzesMinCorrectRate = true;
    list.add(present_quizzesMinCorrectRate);
    if (present_quizzesMinCorrectRate)
      list.add(quizzesMinCorrectRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(UnitsCorrectRateStatistic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeachUnitIds()).compareTo(other.isSetTeachUnitIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachUnitIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachUnitIds, other.teachUnitIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkAnswerNum()).compareTo(other.isSetHomeworkAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkAnswerNum, other.homeworkAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesAnswerNum()).compareTo(other.isSetQuizzesAnswerNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesAnswerNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesAnswerNum, other.quizzesAnswerNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkMaxCorrectRate()).compareTo(other.isSetHomeworkMaxCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkMaxCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkMaxCorrectRate, other.homeworkMaxCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkAvgCorrectRate()).compareTo(other.isSetHomeworkAvgCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkAvgCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkAvgCorrectRate, other.homeworkAvgCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeworkMinCorrectRate()).compareTo(other.isSetHomeworkMinCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeworkMinCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeworkMinCorrectRate, other.homeworkMinCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesMaxCorrectRate()).compareTo(other.isSetQuizzesMaxCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesMaxCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesMaxCorrectRate, other.quizzesMaxCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesAvgCorrectRate()).compareTo(other.isSetQuizzesAvgCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesAvgCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesAvgCorrectRate, other.quizzesAvgCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuizzesMinCorrectRate()).compareTo(other.isSetQuizzesMinCorrectRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuizzesMinCorrectRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quizzesMinCorrectRate, other.quizzesMinCorrectRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UnitsCorrectRateStatistic(");
    boolean first = true;

    sb.append("teachUnitIds:");
    if (this.teachUnitIds == null) {
      sb.append("null");
    } else {
      sb.append(this.teachUnitIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkAnswerNum:");
    sb.append(this.homeworkAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesAnswerNum:");
    sb.append(this.quizzesAnswerNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkMaxCorrectRate:");
    sb.append(this.homeworkMaxCorrectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkAvgCorrectRate:");
    sb.append(this.homeworkAvgCorrectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeworkMinCorrectRate:");
    sb.append(this.homeworkMinCorrectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesMaxCorrectRate:");
    sb.append(this.quizzesMaxCorrectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesAvgCorrectRate:");
    sb.append(this.quizzesAvgCorrectRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quizzesMinCorrectRate:");
    sb.append(this.quizzesMinCorrectRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnitsCorrectRateStatisticStandardSchemeFactory implements SchemeFactory {
    public UnitsCorrectRateStatisticStandardScheme getScheme() {
      return new UnitsCorrectRateStatisticStandardScheme();
    }
  }

  private static class UnitsCorrectRateStatisticStandardScheme extends StandardScheme<UnitsCorrectRateStatistic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UnitsCorrectRateStatistic struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEACH_UNIT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teachUnitIds = iprot.readString();
              struct.setTeachUnitIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOMEWORK_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.homeworkAnswerNum = iprot.readI32();
              struct.setHomeworkAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUIZZES_ANSWER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quizzesAnswerNum = iprot.readI32();
              struct.setQuizzesAnswerNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOMEWORK_MAX_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.homeworkMaxCorrectRate = iprot.readDouble();
              struct.setHomeworkMaxCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOMEWORK_AVG_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.homeworkAvgCorrectRate = iprot.readDouble();
              struct.setHomeworkAvgCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOMEWORK_MIN_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.homeworkMinCorrectRate = iprot.readDouble();
              struct.setHomeworkMinCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUIZZES_MAX_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quizzesMaxCorrectRate = iprot.readDouble();
              struct.setQuizzesMaxCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUIZZES_AVG_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quizzesAvgCorrectRate = iprot.readDouble();
              struct.setQuizzesAvgCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QUIZZES_MIN_CORRECT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quizzesMinCorrectRate = iprot.readDouble();
              struct.setQuizzesMinCorrectRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UnitsCorrectRateStatistic struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teachUnitIds != null) {
        oprot.writeFieldBegin(TEACH_UNIT_IDS_FIELD_DESC);
        oprot.writeString(struct.teachUnitIds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HOMEWORK_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.homeworkAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_ANSWER_NUM_FIELD_DESC);
      oprot.writeI32(struct.quizzesAnswerNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOMEWORK_MAX_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.homeworkMaxCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOMEWORK_AVG_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.homeworkAvgCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOMEWORK_MIN_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.homeworkMinCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_MAX_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.quizzesMaxCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_AVG_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.quizzesAvgCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUIZZES_MIN_CORRECT_RATE_FIELD_DESC);
      oprot.writeDouble(struct.quizzesMinCorrectRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnitsCorrectRateStatisticTupleSchemeFactory implements SchemeFactory {
    public UnitsCorrectRateStatisticTupleScheme getScheme() {
      return new UnitsCorrectRateStatisticTupleScheme();
    }
  }

  private static class UnitsCorrectRateStatisticTupleScheme extends TupleScheme<UnitsCorrectRateStatistic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UnitsCorrectRateStatistic struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeachUnitIds()) {
        optionals.set(0);
      }
      if (struct.isSetHomeworkAnswerNum()) {
        optionals.set(1);
      }
      if (struct.isSetQuizzesAnswerNum()) {
        optionals.set(2);
      }
      if (struct.isSetHomeworkMaxCorrectRate()) {
        optionals.set(3);
      }
      if (struct.isSetHomeworkAvgCorrectRate()) {
        optionals.set(4);
      }
      if (struct.isSetHomeworkMinCorrectRate()) {
        optionals.set(5);
      }
      if (struct.isSetQuizzesMaxCorrectRate()) {
        optionals.set(6);
      }
      if (struct.isSetQuizzesAvgCorrectRate()) {
        optionals.set(7);
      }
      if (struct.isSetQuizzesMinCorrectRate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTeachUnitIds()) {
        oprot.writeString(struct.teachUnitIds);
      }
      if (struct.isSetHomeworkAnswerNum()) {
        oprot.writeI32(struct.homeworkAnswerNum);
      }
      if (struct.isSetQuizzesAnswerNum()) {
        oprot.writeI32(struct.quizzesAnswerNum);
      }
      if (struct.isSetHomeworkMaxCorrectRate()) {
        oprot.writeDouble(struct.homeworkMaxCorrectRate);
      }
      if (struct.isSetHomeworkAvgCorrectRate()) {
        oprot.writeDouble(struct.homeworkAvgCorrectRate);
      }
      if (struct.isSetHomeworkMinCorrectRate()) {
        oprot.writeDouble(struct.homeworkMinCorrectRate);
      }
      if (struct.isSetQuizzesMaxCorrectRate()) {
        oprot.writeDouble(struct.quizzesMaxCorrectRate);
      }
      if (struct.isSetQuizzesAvgCorrectRate()) {
        oprot.writeDouble(struct.quizzesAvgCorrectRate);
      }
      if (struct.isSetQuizzesMinCorrectRate()) {
        oprot.writeDouble(struct.quizzesMinCorrectRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UnitsCorrectRateStatistic struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.teachUnitIds = iprot.readString();
        struct.setTeachUnitIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.homeworkAnswerNum = iprot.readI32();
        struct.setHomeworkAnswerNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quizzesAnswerNum = iprot.readI32();
        struct.setQuizzesAnswerNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.homeworkMaxCorrectRate = iprot.readDouble();
        struct.setHomeworkMaxCorrectRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.homeworkAvgCorrectRate = iprot.readDouble();
        struct.setHomeworkAvgCorrectRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.homeworkMinCorrectRate = iprot.readDouble();
        struct.setHomeworkMinCorrectRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.quizzesMaxCorrectRate = iprot.readDouble();
        struct.setQuizzesMaxCorrectRateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.quizzesAvgCorrectRate = iprot.readDouble();
        struct.setQuizzesAvgCorrectRateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.quizzesMinCorrectRate = iprot.readDouble();
        struct.setQuizzesMinCorrectRateIsSet(true);
      }
    }
  }

}

