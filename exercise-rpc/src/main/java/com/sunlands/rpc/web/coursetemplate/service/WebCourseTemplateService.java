/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-21")
public class WebCourseTemplateService {

  public interface Iface {

    public List<KnowledgeTree> getCourseTemplateKnowledgeTreeListBySubjectAndType(int subjectId, String type) throws TException;

    public List<CourseTemplate> getCourseTemplateListByCondition(int subjectId, String type, int knowledgeTreeId) throws TException;

    public CourseTemplateDetail getCourseTemplateDetailById(int courseTemplateId) throws TException;

    public int operateMockExam(ReqMockExam reqMockExam) throws TException;

  }

  public interface AsyncIface {

    public void getCourseTemplateKnowledgeTreeListBySubjectAndType(int subjectId, String type, AsyncMethodCallback resultHandler) throws TException;

    public void getCourseTemplateListByCondition(int subjectId, String type, int knowledgeTreeId, AsyncMethodCallback resultHandler) throws TException;

    public void getCourseTemplateDetailById(int courseTemplateId, AsyncMethodCallback resultHandler) throws TException;

    public void operateMockExam(ReqMockExam reqMockExam, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<KnowledgeTree> getCourseTemplateKnowledgeTreeListBySubjectAndType(int subjectId, String type) throws TException
    {
      send_getCourseTemplateKnowledgeTreeListBySubjectAndType(subjectId, type);
      return recv_getCourseTemplateKnowledgeTreeListBySubjectAndType();
    }

    public void send_getCourseTemplateKnowledgeTreeListBySubjectAndType(int subjectId, String type) throws TException
    {
      getCourseTemplateKnowledgeTreeListBySubjectAndType_args args = new getCourseTemplateKnowledgeTreeListBySubjectAndType_args();
      args.setSubjectId(subjectId);
      args.setType(type);
      sendBase("getCourseTemplateKnowledgeTreeListBySubjectAndType", args);
    }

    public List<KnowledgeTree> recv_getCourseTemplateKnowledgeTreeListBySubjectAndType() throws TException
    {
      getCourseTemplateKnowledgeTreeListBySubjectAndType_result result = new getCourseTemplateKnowledgeTreeListBySubjectAndType_result();
      receiveBase(result, "getCourseTemplateKnowledgeTreeListBySubjectAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCourseTemplateKnowledgeTreeListBySubjectAndType failed: unknown result");
    }

    public List<CourseTemplate> getCourseTemplateListByCondition(int subjectId, String type, int knowledgeTreeId) throws TException
    {
      send_getCourseTemplateListByCondition(subjectId, type, knowledgeTreeId);
      return recv_getCourseTemplateListByCondition();
    }

    public void send_getCourseTemplateListByCondition(int subjectId, String type, int knowledgeTreeId) throws TException
    {
      getCourseTemplateListByCondition_args args = new getCourseTemplateListByCondition_args();
      args.setSubjectId(subjectId);
      args.setType(type);
      args.setKnowledgeTreeId(knowledgeTreeId);
      sendBase("getCourseTemplateListByCondition", args);
    }

    public List<CourseTemplate> recv_getCourseTemplateListByCondition() throws TException
    {
      getCourseTemplateListByCondition_result result = new getCourseTemplateListByCondition_result();
      receiveBase(result, "getCourseTemplateListByCondition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCourseTemplateListByCondition failed: unknown result");
    }

    public CourseTemplateDetail getCourseTemplateDetailById(int courseTemplateId) throws TException
    {
      send_getCourseTemplateDetailById(courseTemplateId);
      return recv_getCourseTemplateDetailById();
    }

    public void send_getCourseTemplateDetailById(int courseTemplateId) throws TException
    {
      getCourseTemplateDetailById_args args = new getCourseTemplateDetailById_args();
      args.setCourseTemplateId(courseTemplateId);
      sendBase("getCourseTemplateDetailById", args);
    }

    public CourseTemplateDetail recv_getCourseTemplateDetailById() throws TException
    {
      getCourseTemplateDetailById_result result = new getCourseTemplateDetailById_result();
      receiveBase(result, "getCourseTemplateDetailById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCourseTemplateDetailById failed: unknown result");
    }

    public int operateMockExam(ReqMockExam reqMockExam) throws TException
    {
      send_operateMockExam(reqMockExam);
      return recv_operateMockExam();
    }

    public void send_operateMockExam(ReqMockExam reqMockExam) throws TException
    {
      operateMockExam_args args = new operateMockExam_args();
      args.setReqMockExam(reqMockExam);
      sendBase("operateMockExam", args);
    }

    public int recv_operateMockExam() throws TException
    {
      operateMockExam_result result = new operateMockExam_result();
      receiveBase(result, "operateMockExam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "operateMockExam failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getCourseTemplateKnowledgeTreeListBySubjectAndType(int subjectId, String type, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCourseTemplateKnowledgeTreeListBySubjectAndType_call method_call = new getCourseTemplateKnowledgeTreeListBySubjectAndType_call(subjectId, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCourseTemplateKnowledgeTreeListBySubjectAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int subjectId;
      private String type;
      public getCourseTemplateKnowledgeTreeListBySubjectAndType_call(int subjectId, String type, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.subjectId = subjectId;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCourseTemplateKnowledgeTreeListBySubjectAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCourseTemplateKnowledgeTreeListBySubjectAndType_args args = new getCourseTemplateKnowledgeTreeListBySubjectAndType_args();
        args.setSubjectId(subjectId);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<KnowledgeTree> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCourseTemplateKnowledgeTreeListBySubjectAndType();
      }
    }

    public void getCourseTemplateListByCondition(int subjectId, String type, int knowledgeTreeId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCourseTemplateListByCondition_call method_call = new getCourseTemplateListByCondition_call(subjectId, type, knowledgeTreeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCourseTemplateListByCondition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int subjectId;
      private String type;
      private int knowledgeTreeId;
      public getCourseTemplateListByCondition_call(int subjectId, String type, int knowledgeTreeId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.subjectId = subjectId;
        this.type = type;
        this.knowledgeTreeId = knowledgeTreeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCourseTemplateListByCondition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCourseTemplateListByCondition_args args = new getCourseTemplateListByCondition_args();
        args.setSubjectId(subjectId);
        args.setType(type);
        args.setKnowledgeTreeId(knowledgeTreeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CourseTemplate> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCourseTemplateListByCondition();
      }
    }

    public void getCourseTemplateDetailById(int courseTemplateId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCourseTemplateDetailById_call method_call = new getCourseTemplateDetailById_call(courseTemplateId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCourseTemplateDetailById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int courseTemplateId;
      public getCourseTemplateDetailById_call(int courseTemplateId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateId = courseTemplateId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCourseTemplateDetailById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCourseTemplateDetailById_args args = new getCourseTemplateDetailById_args();
        args.setCourseTemplateId(courseTemplateId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CourseTemplateDetail getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCourseTemplateDetailById();
      }
    }

    public void operateMockExam(ReqMockExam reqMockExam, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      operateMockExam_call method_call = new operateMockExam_call(reqMockExam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class operateMockExam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ReqMockExam reqMockExam;
      public operateMockExam_call(ReqMockExam reqMockExam, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reqMockExam = reqMockExam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("operateMockExam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        operateMockExam_args args = new operateMockExam_args();
        args.setReqMockExam(reqMockExam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_operateMockExam();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getCourseTemplateKnowledgeTreeListBySubjectAndType", new getCourseTemplateKnowledgeTreeListBySubjectAndType());
      processMap.put("getCourseTemplateListByCondition", new getCourseTemplateListByCondition());
      processMap.put("getCourseTemplateDetailById", new getCourseTemplateDetailById());
      processMap.put("operateMockExam", new operateMockExam());
      return processMap;
    }

    public static class getCourseTemplateKnowledgeTreeListBySubjectAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCourseTemplateKnowledgeTreeListBySubjectAndType_args> {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType() {
        super("getCourseTemplateKnowledgeTreeListBySubjectAndType");
      }

      public getCourseTemplateKnowledgeTreeListBySubjectAndType_args getEmptyArgsInstance() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCourseTemplateKnowledgeTreeListBySubjectAndType_result getResult(I iface, getCourseTemplateKnowledgeTreeListBySubjectAndType_args args) throws TException {
        getCourseTemplateKnowledgeTreeListBySubjectAndType_result result = new getCourseTemplateKnowledgeTreeListBySubjectAndType_result();
        result.success = iface.getCourseTemplateKnowledgeTreeListBySubjectAndType(args.subjectId, args.type);
        return result;
      }
    }

    public static class getCourseTemplateListByCondition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCourseTemplateListByCondition_args> {
      public getCourseTemplateListByCondition() {
        super("getCourseTemplateListByCondition");
      }

      public getCourseTemplateListByCondition_args getEmptyArgsInstance() {
        return new getCourseTemplateListByCondition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCourseTemplateListByCondition_result getResult(I iface, getCourseTemplateListByCondition_args args) throws TException {
        getCourseTemplateListByCondition_result result = new getCourseTemplateListByCondition_result();
        result.success = iface.getCourseTemplateListByCondition(args.subjectId, args.type, args.knowledgeTreeId);
        return result;
      }
    }

    public static class getCourseTemplateDetailById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCourseTemplateDetailById_args> {
      public getCourseTemplateDetailById() {
        super("getCourseTemplateDetailById");
      }

      public getCourseTemplateDetailById_args getEmptyArgsInstance() {
        return new getCourseTemplateDetailById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCourseTemplateDetailById_result getResult(I iface, getCourseTemplateDetailById_args args) throws TException {
        getCourseTemplateDetailById_result result = new getCourseTemplateDetailById_result();
        result.success = iface.getCourseTemplateDetailById(args.courseTemplateId);
        return result;
      }
    }

    public static class operateMockExam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, operateMockExam_args> {
      public operateMockExam() {
        super("operateMockExam");
      }

      public operateMockExam_args getEmptyArgsInstance() {
        return new operateMockExam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public operateMockExam_result getResult(I iface, operateMockExam_args args) throws TException {
        operateMockExam_result result = new operateMockExam_result();
        result.success = iface.operateMockExam(args.reqMockExam);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getCourseTemplateKnowledgeTreeListBySubjectAndType", new getCourseTemplateKnowledgeTreeListBySubjectAndType());
      processMap.put("getCourseTemplateListByCondition", new getCourseTemplateListByCondition());
      processMap.put("getCourseTemplateDetailById", new getCourseTemplateDetailById());
      processMap.put("operateMockExam", new operateMockExam());
      return processMap;
    }

    public static class getCourseTemplateKnowledgeTreeListBySubjectAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCourseTemplateKnowledgeTreeListBySubjectAndType_args, List<KnowledgeTree>> {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType() {
        super("getCourseTemplateKnowledgeTreeListBySubjectAndType");
      }

      public getCourseTemplateKnowledgeTreeListBySubjectAndType_args getEmptyArgsInstance() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_args();
      }

      public AsyncMethodCallback<List<KnowledgeTree>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<KnowledgeTree>>() { 
          public void onComplete(List<KnowledgeTree> o) {
            getCourseTemplateKnowledgeTreeListBySubjectAndType_result result = new getCourseTemplateKnowledgeTreeListBySubjectAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCourseTemplateKnowledgeTreeListBySubjectAndType_result result = new getCourseTemplateKnowledgeTreeListBySubjectAndType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCourseTemplateKnowledgeTreeListBySubjectAndType_args args, AsyncMethodCallback<List<KnowledgeTree>> resultHandler) throws TException {
        iface.getCourseTemplateKnowledgeTreeListBySubjectAndType(args.subjectId, args.type,resultHandler);
      }
    }

    public static class getCourseTemplateListByCondition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCourseTemplateListByCondition_args, List<CourseTemplate>> {
      public getCourseTemplateListByCondition() {
        super("getCourseTemplateListByCondition");
      }

      public getCourseTemplateListByCondition_args getEmptyArgsInstance() {
        return new getCourseTemplateListByCondition_args();
      }

      public AsyncMethodCallback<List<CourseTemplate>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CourseTemplate>>() { 
          public void onComplete(List<CourseTemplate> o) {
            getCourseTemplateListByCondition_result result = new getCourseTemplateListByCondition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCourseTemplateListByCondition_result result = new getCourseTemplateListByCondition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCourseTemplateListByCondition_args args, AsyncMethodCallback<List<CourseTemplate>> resultHandler) throws TException {
        iface.getCourseTemplateListByCondition(args.subjectId, args.type, args.knowledgeTreeId,resultHandler);
      }
    }

    public static class getCourseTemplateDetailById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCourseTemplateDetailById_args, CourseTemplateDetail> {
      public getCourseTemplateDetailById() {
        super("getCourseTemplateDetailById");
      }

      public getCourseTemplateDetailById_args getEmptyArgsInstance() {
        return new getCourseTemplateDetailById_args();
      }

      public AsyncMethodCallback<CourseTemplateDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CourseTemplateDetail>() { 
          public void onComplete(CourseTemplateDetail o) {
            getCourseTemplateDetailById_result result = new getCourseTemplateDetailById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCourseTemplateDetailById_result result = new getCourseTemplateDetailById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCourseTemplateDetailById_args args, AsyncMethodCallback<CourseTemplateDetail> resultHandler) throws TException {
        iface.getCourseTemplateDetailById(args.courseTemplateId,resultHandler);
      }
    }

    public static class operateMockExam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, operateMockExam_args, Integer> {
      public operateMockExam() {
        super("operateMockExam");
      }

      public operateMockExam_args getEmptyArgsInstance() {
        return new operateMockExam_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            operateMockExam_result result = new operateMockExam_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            operateMockExam_result result = new operateMockExam_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, operateMockExam_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.operateMockExam(args.reqMockExam,resultHandler);
      }
    }

  }

  public static class getCourseTemplateKnowledgeTreeListBySubjectAndType_args implements org.apache.thrift.TBase<getCourseTemplateKnowledgeTreeListBySubjectAndType_args, getCourseTemplateKnowledgeTreeListBySubjectAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateKnowledgeTreeListBySubjectAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateKnowledgeTreeListBySubjectAndType_args");

    private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateKnowledgeTreeListBySubjectAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateKnowledgeTreeListBySubjectAndType_argsTupleSchemeFactory());
    }

    public int subjectId; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUBJECT_ID((short)1, "subjectId"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUBJECT_ID
            return SUBJECT_ID;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateKnowledgeTreeListBySubjectAndType_args.class, metaDataMap);
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args() {
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args(
      int subjectId,
      String type)
    {
      this();
      this.subjectId = subjectId;
      setSubjectIdIsSet(true);
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args(getCourseTemplateKnowledgeTreeListBySubjectAndType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.subjectId = other.subjectId;
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args deepCopy() {
      return new getCourseTemplateKnowledgeTreeListBySubjectAndType_args(this);
    }

    @Override
    public void clear() {
      setSubjectIdIsSet(false);
      this.subjectId = 0;
      this.type = null;
    }

    public int getSubjectId() {
      return this.subjectId;
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args setSubjectId(int subjectId) {
      this.subjectId = subjectId;
      setSubjectIdIsSet(true);
      return this;
    }

    public void unsetSubjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
    }

    /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
    }

    public void setSubjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
    }

    public String getType() {
      return this.type;
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUBJECT_ID:
        if (value == null) {
          unsetSubjectId();
        } else {
          setSubjectId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUBJECT_ID:
        return getSubjectId();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUBJECT_ID:
        return isSetSubjectId();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateKnowledgeTreeListBySubjectAndType_args)
        return this.equals((getCourseTemplateKnowledgeTreeListBySubjectAndType_args)that);
      return false;
    }

    public boolean equals(getCourseTemplateKnowledgeTreeListBySubjectAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_subjectId = true;
      boolean that_present_subjectId = true;
      if (this_present_subjectId || that_present_subjectId) {
        if (!(this_present_subjectId && that_present_subjectId))
          return false;
        if (this.subjectId != that.subjectId)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_subjectId = true;
      list.add(present_subjectId);
      if (present_subjectId)
        list.add(subjectId);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateKnowledgeTreeListBySubjectAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateKnowledgeTreeListBySubjectAndType_args(");
      boolean first = true;

      sb.append("subjectId:");
      sb.append(this.subjectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_argsStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType_argsStandardScheme getScheme() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_argsStandardScheme();
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_argsStandardScheme extends StandardScheme<getCourseTemplateKnowledgeTreeListBySubjectAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateKnowledgeTreeListBySubjectAndType_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.subjectId = iprot.readI32();
                struct.setSubjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateKnowledgeTreeListBySubjectAndType_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.subjectId);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_argsTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType_argsTupleScheme getScheme() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_argsTupleScheme();
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_argsTupleScheme extends TupleScheme<getCourseTemplateKnowledgeTreeListBySubjectAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateKnowledgeTreeListBySubjectAndType_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSubjectId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSubjectId()) {
          oprot.writeI32(struct.subjectId);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateKnowledgeTreeListBySubjectAndType_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.subjectId = iprot.readI32();
          struct.setSubjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getCourseTemplateKnowledgeTreeListBySubjectAndType_result implements org.apache.thrift.TBase<getCourseTemplateKnowledgeTreeListBySubjectAndType_result, getCourseTemplateKnowledgeTreeListBySubjectAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateKnowledgeTreeListBySubjectAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateKnowledgeTreeListBySubjectAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateKnowledgeTreeListBySubjectAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateKnowledgeTreeListBySubjectAndType_resultTupleSchemeFactory());
    }

    public List<KnowledgeTree> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KnowledgeTree.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateKnowledgeTreeListBySubjectAndType_result.class, metaDataMap);
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_result() {
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_result(
      List<KnowledgeTree> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateKnowledgeTreeListBySubjectAndType_result(getCourseTemplateKnowledgeTreeListBySubjectAndType_result other) {
      if (other.isSetSuccess()) {
        List<KnowledgeTree> __this__success = new ArrayList<KnowledgeTree>(other.success.size());
        for (KnowledgeTree other_element : other.success) {
          __this__success.add(new KnowledgeTree(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_result deepCopy() {
      return new getCourseTemplateKnowledgeTreeListBySubjectAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<KnowledgeTree> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(KnowledgeTree elem) {
      if (this.success == null) {
        this.success = new ArrayList<KnowledgeTree>();
      }
      this.success.add(elem);
    }

    public List<KnowledgeTree> getSuccess() {
      return this.success;
    }

    public getCourseTemplateKnowledgeTreeListBySubjectAndType_result setSuccess(List<KnowledgeTree> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<KnowledgeTree>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateKnowledgeTreeListBySubjectAndType_result)
        return this.equals((getCourseTemplateKnowledgeTreeListBySubjectAndType_result)that);
      return false;
    }

    public boolean equals(getCourseTemplateKnowledgeTreeListBySubjectAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateKnowledgeTreeListBySubjectAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateKnowledgeTreeListBySubjectAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_resultStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType_resultStandardScheme getScheme() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_resultStandardScheme();
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_resultStandardScheme extends StandardScheme<getCourseTemplateKnowledgeTreeListBySubjectAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateKnowledgeTreeListBySubjectAndType_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<KnowledgeTree>(_list40.size);
                  KnowledgeTree _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new KnowledgeTree();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateKnowledgeTreeListBySubjectAndType_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (KnowledgeTree _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_resultTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateKnowledgeTreeListBySubjectAndType_resultTupleScheme getScheme() {
        return new getCourseTemplateKnowledgeTreeListBySubjectAndType_resultTupleScheme();
      }
    }

    private static class getCourseTemplateKnowledgeTreeListBySubjectAndType_resultTupleScheme extends TupleScheme<getCourseTemplateKnowledgeTreeListBySubjectAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateKnowledgeTreeListBySubjectAndType_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (KnowledgeTree _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateKnowledgeTreeListBySubjectAndType_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<KnowledgeTree>(_list45.size);
            KnowledgeTree _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new KnowledgeTree();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCourseTemplateListByCondition_args implements org.apache.thrift.TBase<getCourseTemplateListByCondition_args, getCourseTemplateListByCondition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateListByCondition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateListByCondition_args");

    private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KNOWLEDGE_TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeTreeId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateListByCondition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateListByCondition_argsTupleSchemeFactory());
    }

    public int subjectId; // required
    public String type; // required
    public int knowledgeTreeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUBJECT_ID((short)1, "subjectId"),
      TYPE((short)2, "type"),
      KNOWLEDGE_TREE_ID((short)3, "knowledgeTreeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUBJECT_ID
            return SUBJECT_ID;
          case 2: // TYPE
            return TYPE;
          case 3: // KNOWLEDGE_TREE_ID
            return KNOWLEDGE_TREE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBJECTID_ISSET_ID = 0;
    private static final int __KNOWLEDGETREEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KNOWLEDGE_TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("knowledgeTreeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateListByCondition_args.class, metaDataMap);
    }

    public getCourseTemplateListByCondition_args() {
    }

    public getCourseTemplateListByCondition_args(
      int subjectId,
      String type,
      int knowledgeTreeId)
    {
      this();
      this.subjectId = subjectId;
      setSubjectIdIsSet(true);
      this.type = type;
      this.knowledgeTreeId = knowledgeTreeId;
      setKnowledgeTreeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateListByCondition_args(getCourseTemplateListByCondition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.subjectId = other.subjectId;
      if (other.isSetType()) {
        this.type = other.type;
      }
      this.knowledgeTreeId = other.knowledgeTreeId;
    }

    public getCourseTemplateListByCondition_args deepCopy() {
      return new getCourseTemplateListByCondition_args(this);
    }

    @Override
    public void clear() {
      setSubjectIdIsSet(false);
      this.subjectId = 0;
      this.type = null;
      setKnowledgeTreeIdIsSet(false);
      this.knowledgeTreeId = 0;
    }

    public int getSubjectId() {
      return this.subjectId;
    }

    public getCourseTemplateListByCondition_args setSubjectId(int subjectId) {
      this.subjectId = subjectId;
      setSubjectIdIsSet(true);
      return this;
    }

    public void unsetSubjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
    }

    /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
    }

    public void setSubjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
    }

    public String getType() {
      return this.type;
    }

    public getCourseTemplateListByCondition_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getKnowledgeTreeId() {
      return this.knowledgeTreeId;
    }

    public getCourseTemplateListByCondition_args setKnowledgeTreeId(int knowledgeTreeId) {
      this.knowledgeTreeId = knowledgeTreeId;
      setKnowledgeTreeIdIsSet(true);
      return this;
    }

    public void unsetKnowledgeTreeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID);
    }

    /** Returns true if field knowledgeTreeId is set (has been assigned a value) and false otherwise */
    public boolean isSetKnowledgeTreeId() {
      return EncodingUtils.testBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID);
    }

    public void setKnowledgeTreeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUBJECT_ID:
        if (value == null) {
          unsetSubjectId();
        } else {
          setSubjectId((Integer)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case KNOWLEDGE_TREE_ID:
        if (value == null) {
          unsetKnowledgeTreeId();
        } else {
          setKnowledgeTreeId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUBJECT_ID:
        return getSubjectId();

      case TYPE:
        return getType();

      case KNOWLEDGE_TREE_ID:
        return getKnowledgeTreeId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUBJECT_ID:
        return isSetSubjectId();
      case TYPE:
        return isSetType();
      case KNOWLEDGE_TREE_ID:
        return isSetKnowledgeTreeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateListByCondition_args)
        return this.equals((getCourseTemplateListByCondition_args)that);
      return false;
    }

    public boolean equals(getCourseTemplateListByCondition_args that) {
      if (that == null)
        return false;

      boolean this_present_subjectId = true;
      boolean that_present_subjectId = true;
      if (this_present_subjectId || that_present_subjectId) {
        if (!(this_present_subjectId && that_present_subjectId))
          return false;
        if (this.subjectId != that.subjectId)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_knowledgeTreeId = true;
      boolean that_present_knowledgeTreeId = true;
      if (this_present_knowledgeTreeId || that_present_knowledgeTreeId) {
        if (!(this_present_knowledgeTreeId && that_present_knowledgeTreeId))
          return false;
        if (this.knowledgeTreeId != that.knowledgeTreeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_subjectId = true;
      list.add(present_subjectId);
      if (present_subjectId)
        list.add(subjectId);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_knowledgeTreeId = true;
      list.add(present_knowledgeTreeId);
      if (present_knowledgeTreeId)
        list.add(knowledgeTreeId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateListByCondition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKnowledgeTreeId()).compareTo(other.isSetKnowledgeTreeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnowledgeTreeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeTreeId, other.knowledgeTreeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateListByCondition_args(");
      boolean first = true;

      sb.append("subjectId:");
      sb.append(this.subjectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("knowledgeTreeId:");
      sb.append(this.knowledgeTreeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateListByCondition_argsStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateListByCondition_argsStandardScheme getScheme() {
        return new getCourseTemplateListByCondition_argsStandardScheme();
      }
    }

    private static class getCourseTemplateListByCondition_argsStandardScheme extends StandardScheme<getCourseTemplateListByCondition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateListByCondition_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.subjectId = iprot.readI32();
                struct.setSubjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KNOWLEDGE_TREE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.knowledgeTreeId = iprot.readI32();
                struct.setKnowledgeTreeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateListByCondition_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.subjectId);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(KNOWLEDGE_TREE_ID_FIELD_DESC);
        oprot.writeI32(struct.knowledgeTreeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateListByCondition_argsTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateListByCondition_argsTupleScheme getScheme() {
        return new getCourseTemplateListByCondition_argsTupleScheme();
      }
    }

    private static class getCourseTemplateListByCondition_argsTupleScheme extends TupleScheme<getCourseTemplateListByCondition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateListByCondition_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSubjectId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetKnowledgeTreeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSubjectId()) {
          oprot.writeI32(struct.subjectId);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetKnowledgeTreeId()) {
          oprot.writeI32(struct.knowledgeTreeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateListByCondition_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.subjectId = iprot.readI32();
          struct.setSubjectIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.knowledgeTreeId = iprot.readI32();
          struct.setKnowledgeTreeIdIsSet(true);
        }
      }
    }

  }

  public static class getCourseTemplateListByCondition_result implements org.apache.thrift.TBase<getCourseTemplateListByCondition_result, getCourseTemplateListByCondition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateListByCondition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateListByCondition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateListByCondition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateListByCondition_resultTupleSchemeFactory());
    }

    public List<CourseTemplate> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTemplate.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateListByCondition_result.class, metaDataMap);
    }

    public getCourseTemplateListByCondition_result() {
    }

    public getCourseTemplateListByCondition_result(
      List<CourseTemplate> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateListByCondition_result(getCourseTemplateListByCondition_result other) {
      if (other.isSetSuccess()) {
        List<CourseTemplate> __this__success = new ArrayList<CourseTemplate>(other.success.size());
        for (CourseTemplate other_element : other.success) {
          __this__success.add(new CourseTemplate(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCourseTemplateListByCondition_result deepCopy() {
      return new getCourseTemplateListByCondition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CourseTemplate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CourseTemplate elem) {
      if (this.success == null) {
        this.success = new ArrayList<CourseTemplate>();
      }
      this.success.add(elem);
    }

    public List<CourseTemplate> getSuccess() {
      return this.success;
    }

    public getCourseTemplateListByCondition_result setSuccess(List<CourseTemplate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CourseTemplate>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateListByCondition_result)
        return this.equals((getCourseTemplateListByCondition_result)that);
      return false;
    }

    public boolean equals(getCourseTemplateListByCondition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateListByCondition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateListByCondition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateListByCondition_resultStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateListByCondition_resultStandardScheme getScheme() {
        return new getCourseTemplateListByCondition_resultStandardScheme();
      }
    }

    private static class getCourseTemplateListByCondition_resultStandardScheme extends StandardScheme<getCourseTemplateListByCondition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateListByCondition_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<CourseTemplate>(_list48.size);
                  CourseTemplate _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new CourseTemplate();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateListByCondition_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CourseTemplate _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateListByCondition_resultTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateListByCondition_resultTupleScheme getScheme() {
        return new getCourseTemplateListByCondition_resultTupleScheme();
      }
    }

    private static class getCourseTemplateListByCondition_resultTupleScheme extends TupleScheme<getCourseTemplateListByCondition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateListByCondition_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CourseTemplate _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateListByCondition_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CourseTemplate>(_list53.size);
            CourseTemplate _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new CourseTemplate();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCourseTemplateDetailById_args implements org.apache.thrift.TBase<getCourseTemplateDetailById_args, getCourseTemplateDetailById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateDetailById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateDetailById_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateDetailById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateDetailById_argsTupleSchemeFactory());
    }

    public int courseTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_ID((short)1, "courseTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_ID
            return COURSE_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSETEMPLATEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateDetailById_args.class, metaDataMap);
    }

    public getCourseTemplateDetailById_args() {
    }

    public getCourseTemplateDetailById_args(
      int courseTemplateId)
    {
      this();
      this.courseTemplateId = courseTemplateId;
      setCourseTemplateIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateDetailById_args(getCourseTemplateDetailById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.courseTemplateId = other.courseTemplateId;
    }

    public getCourseTemplateDetailById_args deepCopy() {
      return new getCourseTemplateDetailById_args(this);
    }

    @Override
    public void clear() {
      setCourseTemplateIdIsSet(false);
      this.courseTemplateId = 0;
    }

    public int getCourseTemplateId() {
      return this.courseTemplateId;
    }

    public getCourseTemplateDetailById_args setCourseTemplateId(int courseTemplateId) {
      this.courseTemplateId = courseTemplateId;
      setCourseTemplateIdIsSet(true);
      return this;
    }

    public void unsetCourseTemplateId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
    }

    /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateId() {
      return EncodingUtils.testBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
    }

    public void setCourseTemplateIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TEMPLATE_ID:
        if (value == null) {
          unsetCourseTemplateId();
        } else {
          setCourseTemplateId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TEMPLATE_ID:
        return getCourseTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TEMPLATE_ID:
        return isSetCourseTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateDetailById_args)
        return this.equals((getCourseTemplateDetailById_args)that);
      return false;
    }

    public boolean equals(getCourseTemplateDetailById_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateId = true;
      boolean that_present_courseTemplateId = true;
      if (this_present_courseTemplateId || that_present_courseTemplateId) {
        if (!(this_present_courseTemplateId && that_present_courseTemplateId))
          return false;
        if (this.courseTemplateId != that.courseTemplateId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_courseTemplateId = true;
      list.add(present_courseTemplateId);
      if (present_courseTemplateId)
        list.add(courseTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateDetailById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateDetailById_args(");
      boolean first = true;

      sb.append("courseTemplateId:");
      sb.append(this.courseTemplateId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateDetailById_argsStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateDetailById_argsStandardScheme getScheme() {
        return new getCourseTemplateDetailById_argsStandardScheme();
      }
    }

    private static class getCourseTemplateDetailById_argsStandardScheme extends StandardScheme<getCourseTemplateDetailById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateDetailById_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.courseTemplateId = iprot.readI32();
                struct.setCourseTemplateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateDetailById_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.courseTemplateId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateDetailById_argsTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateDetailById_argsTupleScheme getScheme() {
        return new getCourseTemplateDetailById_argsTupleScheme();
      }
    }

    private static class getCourseTemplateDetailById_argsTupleScheme extends TupleScheme<getCourseTemplateDetailById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateDetailById_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCourseTemplateId()) {
          oprot.writeI32(struct.courseTemplateId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateDetailById_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.courseTemplateId = iprot.readI32();
          struct.setCourseTemplateIdIsSet(true);
        }
      }
    }

  }

  public static class getCourseTemplateDetailById_result implements org.apache.thrift.TBase<getCourseTemplateDetailById_result, getCourseTemplateDetailById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCourseTemplateDetailById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCourseTemplateDetailById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCourseTemplateDetailById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCourseTemplateDetailById_resultTupleSchemeFactory());
    }

    public CourseTemplateDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CourseTemplateDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCourseTemplateDetailById_result.class, metaDataMap);
    }

    public getCourseTemplateDetailById_result() {
    }

    public getCourseTemplateDetailById_result(
      CourseTemplateDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCourseTemplateDetailById_result(getCourseTemplateDetailById_result other) {
      if (other.isSetSuccess()) {
        this.success = new CourseTemplateDetail(other.success);
      }
    }

    public getCourseTemplateDetailById_result deepCopy() {
      return new getCourseTemplateDetailById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CourseTemplateDetail getSuccess() {
      return this.success;
    }

    public getCourseTemplateDetailById_result setSuccess(CourseTemplateDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CourseTemplateDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCourseTemplateDetailById_result)
        return this.equals((getCourseTemplateDetailById_result)that);
      return false;
    }

    public boolean equals(getCourseTemplateDetailById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCourseTemplateDetailById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCourseTemplateDetailById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCourseTemplateDetailById_resultStandardSchemeFactory implements SchemeFactory {
      public getCourseTemplateDetailById_resultStandardScheme getScheme() {
        return new getCourseTemplateDetailById_resultStandardScheme();
      }
    }

    private static class getCourseTemplateDetailById_resultStandardScheme extends StandardScheme<getCourseTemplateDetailById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCourseTemplateDetailById_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CourseTemplateDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCourseTemplateDetailById_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCourseTemplateDetailById_resultTupleSchemeFactory implements SchemeFactory {
      public getCourseTemplateDetailById_resultTupleScheme getScheme() {
        return new getCourseTemplateDetailById_resultTupleScheme();
      }
    }

    private static class getCourseTemplateDetailById_resultTupleScheme extends TupleScheme<getCourseTemplateDetailById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateDetailById_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCourseTemplateDetailById_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CourseTemplateDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class operateMockExam_args implements org.apache.thrift.TBase<operateMockExam_args, operateMockExam_args._Fields>, java.io.Serializable, Cloneable, Comparable<operateMockExam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateMockExam_args");

    private static final org.apache.thrift.protocol.TField REQ_MOCK_EXAM_FIELD_DESC = new org.apache.thrift.protocol.TField("reqMockExam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new operateMockExam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new operateMockExam_argsTupleSchemeFactory());
    }

    public ReqMockExam reqMockExam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ_MOCK_EXAM((short)1, "reqMockExam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ_MOCK_EXAM
            return REQ_MOCK_EXAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ_MOCK_EXAM, new org.apache.thrift.meta_data.FieldMetaData("reqMockExam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqMockExam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateMockExam_args.class, metaDataMap);
    }

    public operateMockExam_args() {
    }

    public operateMockExam_args(
      ReqMockExam reqMockExam)
    {
      this();
      this.reqMockExam = reqMockExam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateMockExam_args(operateMockExam_args other) {
      if (other.isSetReqMockExam()) {
        this.reqMockExam = new ReqMockExam(other.reqMockExam);
      }
    }

    public operateMockExam_args deepCopy() {
      return new operateMockExam_args(this);
    }

    @Override
    public void clear() {
      this.reqMockExam = null;
    }

    public ReqMockExam getReqMockExam() {
      return this.reqMockExam;
    }

    public operateMockExam_args setReqMockExam(ReqMockExam reqMockExam) {
      this.reqMockExam = reqMockExam;
      return this;
    }

    public void unsetReqMockExam() {
      this.reqMockExam = null;
    }

    /** Returns true if field reqMockExam is set (has been assigned a value) and false otherwise */
    public boolean isSetReqMockExam() {
      return this.reqMockExam != null;
    }

    public void setReqMockExamIsSet(boolean value) {
      if (!value) {
        this.reqMockExam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ_MOCK_EXAM:
        if (value == null) {
          unsetReqMockExam();
        } else {
          setReqMockExam((ReqMockExam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ_MOCK_EXAM:
        return getReqMockExam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ_MOCK_EXAM:
        return isSetReqMockExam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operateMockExam_args)
        return this.equals((operateMockExam_args)that);
      return false;
    }

    public boolean equals(operateMockExam_args that) {
      if (that == null)
        return false;

      boolean this_present_reqMockExam = true && this.isSetReqMockExam();
      boolean that_present_reqMockExam = true && that.isSetReqMockExam();
      if (this_present_reqMockExam || that_present_reqMockExam) {
        if (!(this_present_reqMockExam && that_present_reqMockExam))
          return false;
        if (!this.reqMockExam.equals(that.reqMockExam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reqMockExam = true && (isSetReqMockExam());
      list.add(present_reqMockExam);
      if (present_reqMockExam)
        list.add(reqMockExam);

      return list.hashCode();
    }

    @Override
    public int compareTo(operateMockExam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReqMockExam()).compareTo(other.isSetReqMockExam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqMockExam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqMockExam, other.reqMockExam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateMockExam_args(");
      boolean first = true;

      sb.append("reqMockExam:");
      if (this.reqMockExam == null) {
        sb.append("null");
      } else {
        sb.append(this.reqMockExam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (reqMockExam != null) {
        reqMockExam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateMockExam_argsStandardSchemeFactory implements SchemeFactory {
      public operateMockExam_argsStandardScheme getScheme() {
        return new operateMockExam_argsStandardScheme();
      }
    }

    private static class operateMockExam_argsStandardScheme extends StandardScheme<operateMockExam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateMockExam_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ_MOCK_EXAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reqMockExam = new ReqMockExam();
                struct.reqMockExam.read(iprot);
                struct.setReqMockExamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateMockExam_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reqMockExam != null) {
          oprot.writeFieldBegin(REQ_MOCK_EXAM_FIELD_DESC);
          struct.reqMockExam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateMockExam_argsTupleSchemeFactory implements SchemeFactory {
      public operateMockExam_argsTupleScheme getScheme() {
        return new operateMockExam_argsTupleScheme();
      }
    }

    private static class operateMockExam_argsTupleScheme extends TupleScheme<operateMockExam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateMockExam_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReqMockExam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReqMockExam()) {
          struct.reqMockExam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateMockExam_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reqMockExam = new ReqMockExam();
          struct.reqMockExam.read(iprot);
          struct.setReqMockExamIsSet(true);
        }
      }
    }

  }

  public static class operateMockExam_result implements org.apache.thrift.TBase<operateMockExam_result, operateMockExam_result._Fields>, java.io.Serializable, Cloneable, Comparable<operateMockExam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateMockExam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new operateMockExam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new operateMockExam_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateMockExam_result.class, metaDataMap);
    }

    public operateMockExam_result() {
    }

    public operateMockExam_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateMockExam_result(operateMockExam_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public operateMockExam_result deepCopy() {
      return new operateMockExam_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public operateMockExam_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operateMockExam_result)
        return this.equals((operateMockExam_result)that);
      return false;
    }

    public boolean equals(operateMockExam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(operateMockExam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateMockExam_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateMockExam_resultStandardSchemeFactory implements SchemeFactory {
      public operateMockExam_resultStandardScheme getScheme() {
        return new operateMockExam_resultStandardScheme();
      }
    }

    private static class operateMockExam_resultStandardScheme extends StandardScheme<operateMockExam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateMockExam_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateMockExam_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateMockExam_resultTupleSchemeFactory implements SchemeFactory {
      public operateMockExam_resultTupleScheme getScheme() {
        return new operateMockExam_resultTupleScheme();
      }
    }

    private static class operateMockExam_resultTupleScheme extends TupleScheme<operateMockExam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateMockExam_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateMockExam_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
