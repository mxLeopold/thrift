/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-19")
public class WebStatisticsService {

  public interface Iface {

    public boolean isPaperIdValid(String paperId) throws TException;

    public boolean checkPaperType(String paperId, String exerciseType) throws TException;

    public List<PaperReport> getPaperReport(String paperId, String unitIdStr) throws TException;

    public List<PaperDetail> getPaperDetail(String paperId, String unitIdStr) throws TException;

    public List<StuAnswerDetail> getStuAnswerDetail(List<TikuUserRecord> recordList) throws TException;

  }

  public interface AsyncIface {

    public void isPaperIdValid(String paperId, AsyncMethodCallback resultHandler) throws TException;

    public void checkPaperType(String paperId, String exerciseType, AsyncMethodCallback resultHandler) throws TException;

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getStuAnswerDetail(List<TikuUserRecord> recordList, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean isPaperIdValid(String paperId) throws TException
    {
      send_isPaperIdValid(paperId);
      return recv_isPaperIdValid();
    }

    public void send_isPaperIdValid(String paperId) throws TException
    {
      isPaperIdValid_args args = new isPaperIdValid_args();
      args.setPaperId(paperId);
      sendBase("isPaperIdValid", args);
    }

    public boolean recv_isPaperIdValid() throws TException
    {
      isPaperIdValid_result result = new isPaperIdValid_result();
      receiveBase(result, "isPaperIdValid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isPaperIdValid failed: unknown result");
    }

    public boolean checkPaperType(String paperId, String exerciseType) throws TException
    {
      send_checkPaperType(paperId, exerciseType);
      return recv_checkPaperType();
    }

    public void send_checkPaperType(String paperId, String exerciseType) throws TException
    {
      checkPaperType_args args = new checkPaperType_args();
      args.setPaperId(paperId);
      args.setExerciseType(exerciseType);
      sendBase("checkPaperType", args);
    }

    public boolean recv_checkPaperType() throws TException
    {
      checkPaperType_result result = new checkPaperType_result();
      receiveBase(result, "checkPaperType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkPaperType failed: unknown result");
    }

    public List<PaperReport> getPaperReport(String paperId, String unitIdStr) throws TException
    {
      send_getPaperReport(paperId, unitIdStr);
      return recv_getPaperReport();
    }

    public void send_getPaperReport(String paperId, String unitIdStr) throws TException
    {
      getPaperReport_args args = new getPaperReport_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperReport", args);
    }

    public List<PaperReport> recv_getPaperReport() throws TException
    {
      getPaperReport_result result = new getPaperReport_result();
      receiveBase(result, "getPaperReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperReport failed: unknown result");
    }

    public List<PaperDetail> getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      send_getPaperDetail(paperId, unitIdStr);
      return recv_getPaperDetail();
    }

    public void send_getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      getPaperDetail_args args = new getPaperDetail_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperDetail", args);
    }

    public List<PaperDetail> recv_getPaperDetail() throws TException
    {
      getPaperDetail_result result = new getPaperDetail_result();
      receiveBase(result, "getPaperDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperDetail failed: unknown result");
    }

    public List<StuAnswerDetail> getStuAnswerDetail(List<TikuUserRecord> recordList) throws TException
    {
      send_getStuAnswerDetail(recordList);
      return recv_getStuAnswerDetail();
    }

    public void send_getStuAnswerDetail(List<TikuUserRecord> recordList) throws TException
    {
      getStuAnswerDetail_args args = new getStuAnswerDetail_args();
      args.setRecordList(recordList);
      sendBase("getStuAnswerDetail", args);
    }

    public List<StuAnswerDetail> recv_getStuAnswerDetail() throws TException
    {
      getStuAnswerDetail_result result = new getStuAnswerDetail_result();
      receiveBase(result, "getStuAnswerDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStuAnswerDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void isPaperIdValid(String paperId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      isPaperIdValid_call method_call = new isPaperIdValid_call(paperId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isPaperIdValid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      public isPaperIdValid_call(String paperId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isPaperIdValid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isPaperIdValid_args args = new isPaperIdValid_args();
        args.setPaperId(paperId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isPaperIdValid();
      }
    }

    public void checkPaperType(String paperId, String exerciseType, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkPaperType_call method_call = new checkPaperType_call(paperId, exerciseType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkPaperType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String exerciseType;
      public checkPaperType_call(String paperId, String exerciseType, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.exerciseType = exerciseType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkPaperType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkPaperType_args args = new checkPaperType_args();
        args.setPaperId(paperId);
        args.setExerciseType(exerciseType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkPaperType();
      }
    }

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperReport_call method_call = new getPaperReport_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperReport_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperReport_args args = new getPaperReport_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PaperReport> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperReport();
      }
    }

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperDetail_call method_call = new getPaperDetail_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperDetail_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperDetail_args args = new getPaperDetail_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PaperDetail> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperDetail();
      }
    }

    public void getStuAnswerDetail(List<TikuUserRecord> recordList, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStuAnswerDetail_call method_call = new getStuAnswerDetail_call(recordList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStuAnswerDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TikuUserRecord> recordList;
      public getStuAnswerDetail_call(List<TikuUserRecord> recordList, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recordList = recordList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStuAnswerDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStuAnswerDetail_args args = new getStuAnswerDetail_args();
        args.setRecordList(recordList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<StuAnswerDetail> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStuAnswerDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("isPaperIdValid", new isPaperIdValid());
      processMap.put("checkPaperType", new checkPaperType());
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerDetail", new getStuAnswerDetail());
      return processMap;
    }

    public static class isPaperIdValid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isPaperIdValid_args> {
      public isPaperIdValid() {
        super("isPaperIdValid");
      }

      public isPaperIdValid_args getEmptyArgsInstance() {
        return new isPaperIdValid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isPaperIdValid_result getResult(I iface, isPaperIdValid_args args) throws TException {
        isPaperIdValid_result result = new isPaperIdValid_result();
        result.success = iface.isPaperIdValid(args.paperId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkPaperType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkPaperType_args> {
      public checkPaperType() {
        super("checkPaperType");
      }

      public checkPaperType_args getEmptyArgsInstance() {
        return new checkPaperType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkPaperType_result getResult(I iface, checkPaperType_args args) throws TException {
        checkPaperType_result result = new checkPaperType_result();
        result.success = iface.checkPaperType(args.paperId, args.exerciseType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPaperReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperReport_args> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperReport_result getResult(I iface, getPaperReport_args args) throws TException {
        getPaperReport_result result = new getPaperReport_result();
        result.success = iface.getPaperReport(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getPaperDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperDetail_args> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperDetail_result getResult(I iface, getPaperDetail_args args) throws TException {
        getPaperDetail_result result = new getPaperDetail_result();
        result.success = iface.getPaperDetail(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getStuAnswerDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStuAnswerDetail_args> {
      public getStuAnswerDetail() {
        super("getStuAnswerDetail");
      }

      public getStuAnswerDetail_args getEmptyArgsInstance() {
        return new getStuAnswerDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStuAnswerDetail_result getResult(I iface, getStuAnswerDetail_args args) throws TException {
        getStuAnswerDetail_result result = new getStuAnswerDetail_result();
        result.success = iface.getStuAnswerDetail(args.recordList);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("isPaperIdValid", new isPaperIdValid());
      processMap.put("checkPaperType", new checkPaperType());
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerDetail", new getStuAnswerDetail());
      return processMap;
    }

    public static class isPaperIdValid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isPaperIdValid_args, Boolean> {
      public isPaperIdValid() {
        super("isPaperIdValid");
      }

      public isPaperIdValid_args getEmptyArgsInstance() {
        return new isPaperIdValid_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isPaperIdValid_result result = new isPaperIdValid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isPaperIdValid_result result = new isPaperIdValid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isPaperIdValid_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isPaperIdValid(args.paperId,resultHandler);
      }
    }

    public static class checkPaperType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkPaperType_args, Boolean> {
      public checkPaperType() {
        super("checkPaperType");
      }

      public checkPaperType_args getEmptyArgsInstance() {
        return new checkPaperType_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkPaperType_result result = new checkPaperType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkPaperType_result result = new checkPaperType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkPaperType_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkPaperType(args.paperId, args.exerciseType,resultHandler);
      }
    }

    public static class getPaperReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperReport_args, List<PaperReport>> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      public AsyncMethodCallback<List<PaperReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PaperReport>>() { 
          public void onComplete(List<PaperReport> o) {
            getPaperReport_result result = new getPaperReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperReport_result result = new getPaperReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperReport_args args, AsyncMethodCallback<List<PaperReport>> resultHandler) throws TException {
        iface.getPaperReport(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getPaperDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperDetail_args, List<PaperDetail>> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      public AsyncMethodCallback<List<PaperDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PaperDetail>>() { 
          public void onComplete(List<PaperDetail> o) {
            getPaperDetail_result result = new getPaperDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperDetail_result result = new getPaperDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperDetail_args args, AsyncMethodCallback<List<PaperDetail>> resultHandler) throws TException {
        iface.getPaperDetail(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getStuAnswerDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStuAnswerDetail_args, List<StuAnswerDetail>> {
      public getStuAnswerDetail() {
        super("getStuAnswerDetail");
      }

      public getStuAnswerDetail_args getEmptyArgsInstance() {
        return new getStuAnswerDetail_args();
      }

      public AsyncMethodCallback<List<StuAnswerDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<StuAnswerDetail>>() { 
          public void onComplete(List<StuAnswerDetail> o) {
            getStuAnswerDetail_result result = new getStuAnswerDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStuAnswerDetail_result result = new getStuAnswerDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStuAnswerDetail_args args, AsyncMethodCallback<List<StuAnswerDetail>> resultHandler) throws TException {
        iface.getStuAnswerDetail(args.recordList,resultHandler);
      }
    }

  }

  public static class isPaperIdValid_args implements org.apache.thrift.TBase<isPaperIdValid_args, isPaperIdValid_args._Fields>, java.io.Serializable, Cloneable, Comparable<isPaperIdValid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPaperIdValid_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPaperIdValid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPaperIdValid_argsTupleSchemeFactory());
    }

    public String paperId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPaperIdValid_args.class, metaDataMap);
    }

    public isPaperIdValid_args() {
    }

    public isPaperIdValid_args(
      String paperId)
    {
      this();
      this.paperId = paperId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPaperIdValid_args(isPaperIdValid_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
    }

    public isPaperIdValid_args deepCopy() {
      return new isPaperIdValid_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public isPaperIdValid_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPaperIdValid_args)
        return this.equals((isPaperIdValid_args)that);
      return false;
    }

    public boolean equals(isPaperIdValid_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isPaperIdValid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPaperIdValid_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPaperIdValid_argsStandardSchemeFactory implements SchemeFactory {
      public isPaperIdValid_argsStandardScheme getScheme() {
        return new isPaperIdValid_argsStandardScheme();
      }
    }

    private static class isPaperIdValid_argsStandardScheme extends StandardScheme<isPaperIdValid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPaperIdValid_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPaperIdValid_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPaperIdValid_argsTupleSchemeFactory implements SchemeFactory {
      public isPaperIdValid_argsTupleScheme getScheme() {
        return new isPaperIdValid_argsTupleScheme();
      }
    }

    private static class isPaperIdValid_argsTupleScheme extends TupleScheme<isPaperIdValid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPaperIdValid_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPaperIdValid_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
      }
    }

  }

  public static class isPaperIdValid_result implements org.apache.thrift.TBase<isPaperIdValid_result, isPaperIdValid_result._Fields>, java.io.Serializable, Cloneable, Comparable<isPaperIdValid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isPaperIdValid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isPaperIdValid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isPaperIdValid_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isPaperIdValid_result.class, metaDataMap);
    }

    public isPaperIdValid_result() {
    }

    public isPaperIdValid_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isPaperIdValid_result(isPaperIdValid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isPaperIdValid_result deepCopy() {
      return new isPaperIdValid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isPaperIdValid_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isPaperIdValid_result)
        return this.equals((isPaperIdValid_result)that);
      return false;
    }

    public boolean equals(isPaperIdValid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isPaperIdValid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isPaperIdValid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isPaperIdValid_resultStandardSchemeFactory implements SchemeFactory {
      public isPaperIdValid_resultStandardScheme getScheme() {
        return new isPaperIdValid_resultStandardScheme();
      }
    }

    private static class isPaperIdValid_resultStandardScheme extends StandardScheme<isPaperIdValid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isPaperIdValid_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isPaperIdValid_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isPaperIdValid_resultTupleSchemeFactory implements SchemeFactory {
      public isPaperIdValid_resultTupleScheme getScheme() {
        return new isPaperIdValid_resultTupleScheme();
      }
    }

    private static class isPaperIdValid_resultTupleScheme extends TupleScheme<isPaperIdValid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isPaperIdValid_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isPaperIdValid_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkPaperType_args implements org.apache.thrift.TBase<checkPaperType_args, checkPaperType_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkPaperType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkPaperType_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EXERCISE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkPaperType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkPaperType_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String exerciseType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      EXERCISE_TYPE((short)2, "exerciseType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // EXERCISE_TYPE
            return EXERCISE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXERCISE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exerciseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPaperType_args.class, metaDataMap);
    }

    public checkPaperType_args() {
    }

    public checkPaperType_args(
      String paperId,
      String exerciseType)
    {
      this();
      this.paperId = paperId;
      this.exerciseType = exerciseType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkPaperType_args(checkPaperType_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetExerciseType()) {
        this.exerciseType = other.exerciseType;
      }
    }

    public checkPaperType_args deepCopy() {
      return new checkPaperType_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.exerciseType = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public checkPaperType_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getExerciseType() {
      return this.exerciseType;
    }

    public checkPaperType_args setExerciseType(String exerciseType) {
      this.exerciseType = exerciseType;
      return this;
    }

    public void unsetExerciseType() {
      this.exerciseType = null;
    }

    /** Returns true if field exerciseType is set (has been assigned a value) and false otherwise */
    public boolean isSetExerciseType() {
      return this.exerciseType != null;
    }

    public void setExerciseTypeIsSet(boolean value) {
      if (!value) {
        this.exerciseType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case EXERCISE_TYPE:
        if (value == null) {
          unsetExerciseType();
        } else {
          setExerciseType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case EXERCISE_TYPE:
        return getExerciseType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case EXERCISE_TYPE:
        return isSetExerciseType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkPaperType_args)
        return this.equals((checkPaperType_args)that);
      return false;
    }

    public boolean equals(checkPaperType_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_exerciseType = true && this.isSetExerciseType();
      boolean that_present_exerciseType = true && that.isSetExerciseType();
      if (this_present_exerciseType || that_present_exerciseType) {
        if (!(this_present_exerciseType && that_present_exerciseType))
          return false;
        if (!this.exerciseType.equals(that.exerciseType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_exerciseType = true && (isSetExerciseType());
      list.add(present_exerciseType);
      if (present_exerciseType)
        list.add(exerciseType);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkPaperType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExerciseType()).compareTo(other.isSetExerciseType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExerciseType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseType, other.exerciseType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkPaperType_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exerciseType:");
      if (this.exerciseType == null) {
        sb.append("null");
      } else {
        sb.append(this.exerciseType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkPaperType_argsStandardSchemeFactory implements SchemeFactory {
      public checkPaperType_argsStandardScheme getScheme() {
        return new checkPaperType_argsStandardScheme();
      }
    }

    private static class checkPaperType_argsStandardScheme extends StandardScheme<checkPaperType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkPaperType_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXERCISE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exerciseType = iprot.readString();
                struct.setExerciseTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkPaperType_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.exerciseType != null) {
          oprot.writeFieldBegin(EXERCISE_TYPE_FIELD_DESC);
          oprot.writeString(struct.exerciseType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkPaperType_argsTupleSchemeFactory implements SchemeFactory {
      public checkPaperType_argsTupleScheme getScheme() {
        return new checkPaperType_argsTupleScheme();
      }
    }

    private static class checkPaperType_argsTupleScheme extends TupleScheme<checkPaperType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkPaperType_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetExerciseType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetExerciseType()) {
          oprot.writeString(struct.exerciseType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkPaperType_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exerciseType = iprot.readString();
          struct.setExerciseTypeIsSet(true);
        }
      }
    }

  }

  public static class checkPaperType_result implements org.apache.thrift.TBase<checkPaperType_result, checkPaperType_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkPaperType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkPaperType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkPaperType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkPaperType_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPaperType_result.class, metaDataMap);
    }

    public checkPaperType_result() {
    }

    public checkPaperType_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkPaperType_result(checkPaperType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkPaperType_result deepCopy() {
      return new checkPaperType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkPaperType_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkPaperType_result)
        return this.equals((checkPaperType_result)that);
      return false;
    }

    public boolean equals(checkPaperType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkPaperType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkPaperType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkPaperType_resultStandardSchemeFactory implements SchemeFactory {
      public checkPaperType_resultStandardScheme getScheme() {
        return new checkPaperType_resultStandardScheme();
      }
    }

    private static class checkPaperType_resultStandardScheme extends StandardScheme<checkPaperType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkPaperType_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkPaperType_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkPaperType_resultTupleSchemeFactory implements SchemeFactory {
      public checkPaperType_resultTupleScheme getScheme() {
        return new checkPaperType_resultTupleScheme();
      }
    }

    private static class checkPaperType_resultTupleScheme extends TupleScheme<checkPaperType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkPaperType_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkPaperType_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaperReport_args implements org.apache.thrift.TBase<getPaperReport_args, getPaperReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_args.class, metaDataMap);
    }

    public getPaperReport_args() {
    }

    public getPaperReport_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_args(getPaperReport_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperReport_args deepCopy() {
      return new getPaperReport_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperReport_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperReport_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_args)
        return this.equals((getPaperReport_args)that);
      return false;
    }

    public boolean equals(getPaperReport_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_argsStandardScheme getScheme() {
        return new getPaperReport_argsStandardScheme();
      }
    }

    private static class getPaperReport_argsStandardScheme extends StandardScheme<getPaperReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_argsTupleScheme getScheme() {
        return new getPaperReport_argsTupleScheme();
      }
    }

    private static class getPaperReport_argsTupleScheme extends TupleScheme<getPaperReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperReport_result implements org.apache.thrift.TBase<getPaperReport_result, getPaperReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_resultTupleSchemeFactory());
    }

    public List<PaperReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PaperReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_result.class, metaDataMap);
    }

    public getPaperReport_result() {
    }

    public getPaperReport_result(
      List<PaperReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_result(getPaperReport_result other) {
      if (other.isSetSuccess()) {
        List<PaperReport> __this__success = new ArrayList<PaperReport>(other.success.size());
        for (PaperReport other_element : other.success) {
          __this__success.add(new PaperReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPaperReport_result deepCopy() {
      return new getPaperReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PaperReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PaperReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<PaperReport>();
      }
      this.success.add(elem);
    }

    public List<PaperReport> getSuccess() {
      return this.success;
    }

    public getPaperReport_result setSuccess(List<PaperReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PaperReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_result)
        return this.equals((getPaperReport_result)that);
      return false;
    }

    public boolean equals(getPaperReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_resultStandardScheme getScheme() {
        return new getPaperReport_resultStandardScheme();
      }
    }

    private static class getPaperReport_resultStandardScheme extends StandardScheme<getPaperReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<PaperReport>(_list56.size);
                  PaperReport _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new PaperReport();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PaperReport _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_resultTupleScheme getScheme() {
        return new getPaperReport_resultTupleScheme();
      }
    }

    private static class getPaperReport_resultTupleScheme extends TupleScheme<getPaperReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PaperReport _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PaperReport>(_list61.size);
            PaperReport _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new PaperReport();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_args implements org.apache.thrift.TBase<getPaperDetail_args, getPaperDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_args.class, metaDataMap);
    }

    public getPaperDetail_args() {
    }

    public getPaperDetail_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_args(getPaperDetail_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperDetail_args deepCopy() {
      return new getPaperDetail_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperDetail_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperDetail_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_args)
        return this.equals((getPaperDetail_args)that);
      return false;
    }

    public boolean equals(getPaperDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsStandardScheme getScheme() {
        return new getPaperDetail_argsStandardScheme();
      }
    }

    private static class getPaperDetail_argsStandardScheme extends StandardScheme<getPaperDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsTupleScheme getScheme() {
        return new getPaperDetail_argsTupleScheme();
      }
    }

    private static class getPaperDetail_argsTupleScheme extends TupleScheme<getPaperDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_result implements org.apache.thrift.TBase<getPaperDetail_result, getPaperDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_resultTupleSchemeFactory());
    }

    public List<PaperDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PaperDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_result.class, metaDataMap);
    }

    public getPaperDetail_result() {
    }

    public getPaperDetail_result(
      List<PaperDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_result(getPaperDetail_result other) {
      if (other.isSetSuccess()) {
        List<PaperDetail> __this__success = new ArrayList<PaperDetail>(other.success.size());
        for (PaperDetail other_element : other.success) {
          __this__success.add(new PaperDetail(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPaperDetail_result deepCopy() {
      return new getPaperDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PaperDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PaperDetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<PaperDetail>();
      }
      this.success.add(elem);
    }

    public List<PaperDetail> getSuccess() {
      return this.success;
    }

    public getPaperDetail_result setSuccess(List<PaperDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PaperDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_result)
        return this.equals((getPaperDetail_result)that);
      return false;
    }

    public boolean equals(getPaperDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultStandardScheme getScheme() {
        return new getPaperDetail_resultStandardScheme();
      }
    }

    private static class getPaperDetail_resultStandardScheme extends StandardScheme<getPaperDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<PaperDetail>(_list64.size);
                  PaperDetail _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new PaperDetail();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PaperDetail _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultTupleScheme getScheme() {
        return new getPaperDetail_resultTupleScheme();
      }
    }

    private static class getPaperDetail_resultTupleScheme extends TupleScheme<getPaperDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PaperDetail _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PaperDetail>(_list69.size);
            PaperDetail _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new PaperDetail();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerDetail_args implements org.apache.thrift.TBase<getStuAnswerDetail_args, getStuAnswerDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerDetail_args");

    private static final org.apache.thrift.protocol.TField RECORD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("recordList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerDetail_argsTupleSchemeFactory());
    }

    public List<TikuUserRecord> recordList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECORD_LIST((short)1, "recordList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECORD_LIST
            return RECORD_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECORD_LIST, new org.apache.thrift.meta_data.FieldMetaData("recordList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TikuUserRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerDetail_args.class, metaDataMap);
    }

    public getStuAnswerDetail_args() {
    }

    public getStuAnswerDetail_args(
      List<TikuUserRecord> recordList)
    {
      this();
      this.recordList = recordList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerDetail_args(getStuAnswerDetail_args other) {
      if (other.isSetRecordList()) {
        List<TikuUserRecord> __this__recordList = new ArrayList<TikuUserRecord>(other.recordList.size());
        for (TikuUserRecord other_element : other.recordList) {
          __this__recordList.add(new TikuUserRecord(other_element));
        }
        this.recordList = __this__recordList;
      }
    }

    public getStuAnswerDetail_args deepCopy() {
      return new getStuAnswerDetail_args(this);
    }

    @Override
    public void clear() {
      this.recordList = null;
    }

    public int getRecordListSize() {
      return (this.recordList == null) ? 0 : this.recordList.size();
    }

    public java.util.Iterator<TikuUserRecord> getRecordListIterator() {
      return (this.recordList == null) ? null : this.recordList.iterator();
    }

    public void addToRecordList(TikuUserRecord elem) {
      if (this.recordList == null) {
        this.recordList = new ArrayList<TikuUserRecord>();
      }
      this.recordList.add(elem);
    }

    public List<TikuUserRecord> getRecordList() {
      return this.recordList;
    }

    public getStuAnswerDetail_args setRecordList(List<TikuUserRecord> recordList) {
      this.recordList = recordList;
      return this;
    }

    public void unsetRecordList() {
      this.recordList = null;
    }

    /** Returns true if field recordList is set (has been assigned a value) and false otherwise */
    public boolean isSetRecordList() {
      return this.recordList != null;
    }

    public void setRecordListIsSet(boolean value) {
      if (!value) {
        this.recordList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECORD_LIST:
        if (value == null) {
          unsetRecordList();
        } else {
          setRecordList((List<TikuUserRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECORD_LIST:
        return getRecordList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECORD_LIST:
        return isSetRecordList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerDetail_args)
        return this.equals((getStuAnswerDetail_args)that);
      return false;
    }

    public boolean equals(getStuAnswerDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_recordList = true && this.isSetRecordList();
      boolean that_present_recordList = true && that.isSetRecordList();
      if (this_present_recordList || that_present_recordList) {
        if (!(this_present_recordList && that_present_recordList))
          return false;
        if (!this.recordList.equals(that.recordList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recordList = true && (isSetRecordList());
      list.add(present_recordList);
      if (present_recordList)
        list.add(recordList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecordList()).compareTo(other.isSetRecordList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecordList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordList, other.recordList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerDetail_args(");
      boolean first = true;

      sb.append("recordList:");
      if (this.recordList == null) {
        sb.append("null");
      } else {
        sb.append(this.recordList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerDetail_argsStandardScheme getScheme() {
        return new getStuAnswerDetail_argsStandardScheme();
      }
    }

    private static class getStuAnswerDetail_argsStandardScheme extends StandardScheme<getStuAnswerDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECORD_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.recordList = new ArrayList<TikuUserRecord>(_list72.size);
                  TikuUserRecord _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new TikuUserRecord();
                    _elem73.read(iprot);
                    struct.recordList.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setRecordListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recordList != null) {
          oprot.writeFieldBegin(RECORD_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.recordList.size()));
            for (TikuUserRecord _iter75 : struct.recordList)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerDetail_argsTupleScheme getScheme() {
        return new getStuAnswerDetail_argsTupleScheme();
      }
    }

    private static class getStuAnswerDetail_argsTupleScheme extends TupleScheme<getStuAnswerDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecordList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecordList()) {
          {
            oprot.writeI32(struct.recordList.size());
            for (TikuUserRecord _iter76 : struct.recordList)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.recordList = new ArrayList<TikuUserRecord>(_list77.size);
            TikuUserRecord _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new TikuUserRecord();
              _elem78.read(iprot);
              struct.recordList.add(_elem78);
            }
          }
          struct.setRecordListIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerDetail_result implements org.apache.thrift.TBase<getStuAnswerDetail_result, getStuAnswerDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerDetail_resultTupleSchemeFactory());
    }

    public List<StuAnswerDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerDetail_result.class, metaDataMap);
    }

    public getStuAnswerDetail_result() {
    }

    public getStuAnswerDetail_result(
      List<StuAnswerDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerDetail_result(getStuAnswerDetail_result other) {
      if (other.isSetSuccess()) {
        List<StuAnswerDetail> __this__success = new ArrayList<StuAnswerDetail>(other.success.size());
        for (StuAnswerDetail other_element : other.success) {
          __this__success.add(new StuAnswerDetail(other_element));
        }
        this.success = __this__success;
      }
    }

    public getStuAnswerDetail_result deepCopy() {
      return new getStuAnswerDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<StuAnswerDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(StuAnswerDetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<StuAnswerDetail>();
      }
      this.success.add(elem);
    }

    public List<StuAnswerDetail> getSuccess() {
      return this.success;
    }

    public getStuAnswerDetail_result setSuccess(List<StuAnswerDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<StuAnswerDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerDetail_result)
        return this.equals((getStuAnswerDetail_result)that);
      return false;
    }

    public boolean equals(getStuAnswerDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerDetail_resultStandardScheme getScheme() {
        return new getStuAnswerDetail_resultStandardScheme();
      }
    }

    private static class getStuAnswerDetail_resultStandardScheme extends StandardScheme<getStuAnswerDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<StuAnswerDetail>(_list80.size);
                  StuAnswerDetail _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new StuAnswerDetail();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (StuAnswerDetail _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerDetail_resultTupleScheme getScheme() {
        return new getStuAnswerDetail_resultTupleScheme();
      }
    }

    private static class getStuAnswerDetail_resultTupleScheme extends TupleScheme<getStuAnswerDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (StuAnswerDetail _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<StuAnswerDetail>(_list85.size);
            StuAnswerDetail _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new StuAnswerDetail();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
