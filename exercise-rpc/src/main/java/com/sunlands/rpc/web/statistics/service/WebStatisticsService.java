/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-29")
public class WebStatisticsService {

  public interface Iface {

    public List<WorkPaperReport> getPaperReport(String paperId, String unitIdStr) throws TException;

    public PaperDetail getPaperDetail(String paperId, String unitIdStr) throws TException;

    public StuAnswerResult getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException;

    public int checkQuizId(String paperCode) throws TException;

    public int checkAssignmentId(String paperCode) throws TException;

  }

  public interface AsyncIface {

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getStuAnswerResult(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler) throws TException;

    public void checkQuizId(String paperCode, AsyncMethodCallback resultHandler) throws TException;

    public void checkAssignmentId(String paperCode, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<WorkPaperReport> getPaperReport(String paperId, String unitIdStr) throws TException
    {
      send_getPaperReport(paperId, unitIdStr);
      return recv_getPaperReport();
    }

    public void send_getPaperReport(String paperId, String unitIdStr) throws TException
    {
      getPaperReport_args args = new getPaperReport_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperReport", args);
    }

    public List<WorkPaperReport> recv_getPaperReport() throws TException
    {
      getPaperReport_result result = new getPaperReport_result();
      receiveBase(result, "getPaperReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperReport failed: unknown result");
    }

    public PaperDetail getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      send_getPaperDetail(paperId, unitIdStr);
      return recv_getPaperDetail();
    }

    public void send_getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      getPaperDetail_args args = new getPaperDetail_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperDetail", args);
    }

    public PaperDetail recv_getPaperDetail() throws TException
    {
      getPaperDetail_result result = new getPaperDetail_result();
      receiveBase(result, "getPaperDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperDetail failed: unknown result");
    }

    public StuAnswerResult getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException
    {
      send_getStuAnswerResult(stuAnswerResult);
      return recv_getStuAnswerResult();
    }

    public void send_getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException
    {
      getStuAnswerResult_args args = new getStuAnswerResult_args();
      args.setStuAnswerResult(stuAnswerResult);
      sendBase("getStuAnswerResult", args);
    }

    public StuAnswerResult recv_getStuAnswerResult() throws TException
    {
      getStuAnswerResult_result result = new getStuAnswerResult_result();
      receiveBase(result, "getStuAnswerResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStuAnswerResult failed: unknown result");
    }

    public int checkQuizId(String paperCode) throws TException
    {
      send_checkQuizId(paperCode);
      return recv_checkQuizId();
    }

    public void send_checkQuizId(String paperCode) throws TException
    {
      checkQuizId_args args = new checkQuizId_args();
      args.setPaperCode(paperCode);
      sendBase("checkQuizId", args);
    }

    public int recv_checkQuizId() throws TException
    {
      checkQuizId_result result = new checkQuizId_result();
      receiveBase(result, "checkQuizId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkQuizId failed: unknown result");
    }

    public int checkAssignmentId(String paperCode) throws TException
    {
      send_checkAssignmentId(paperCode);
      return recv_checkAssignmentId();
    }

    public void send_checkAssignmentId(String paperCode) throws TException
    {
      checkAssignmentId_args args = new checkAssignmentId_args();
      args.setPaperCode(paperCode);
      sendBase("checkAssignmentId", args);
    }

    public int recv_checkAssignmentId() throws TException
    {
      checkAssignmentId_result result = new checkAssignmentId_result();
      receiveBase(result, "checkAssignmentId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAssignmentId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperReport_call method_call = new getPaperReport_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperReport_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperReport_args args = new getPaperReport_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WorkPaperReport> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperReport();
      }
    }

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperDetail_call method_call = new getPaperDetail_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperDetail_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperDetail_args args = new getPaperDetail_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PaperDetail getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperDetail();
      }
    }

    public void getStuAnswerResult(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStuAnswerResult_call method_call = new getStuAnswerResult_call(stuAnswerResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStuAnswerResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StuAnswerResult stuAnswerResult;
      public getStuAnswerResult_call(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuAnswerResult = stuAnswerResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStuAnswerResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStuAnswerResult_args args = new getStuAnswerResult_args();
        args.setStuAnswerResult(stuAnswerResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StuAnswerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStuAnswerResult();
      }
    }

    public void checkQuizId(String paperCode, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkQuizId_call method_call = new checkQuizId_call(paperCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkQuizId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      public checkQuizId_call(String paperCode, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkQuizId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkQuizId_args args = new checkQuizId_args();
        args.setPaperCode(paperCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkQuizId();
      }
    }

    public void checkAssignmentId(String paperCode, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkAssignmentId_call method_call = new checkAssignmentId_call(paperCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAssignmentId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      public checkAssignmentId_call(String paperCode, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAssignmentId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAssignmentId_args args = new checkAssignmentId_args();
        args.setPaperCode(paperCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAssignmentId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerResult", new getStuAnswerResult());
      processMap.put("checkQuizId", new checkQuizId());
      processMap.put("checkAssignmentId", new checkAssignmentId());
      return processMap;
    }

    public static class getPaperReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperReport_args> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperReport_result getResult(I iface, getPaperReport_args args) throws TException {
        getPaperReport_result result = new getPaperReport_result();
        result.success = iface.getPaperReport(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getPaperDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperDetail_args> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperDetail_result getResult(I iface, getPaperDetail_args args) throws TException {
        getPaperDetail_result result = new getPaperDetail_result();
        result.success = iface.getPaperDetail(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getStuAnswerResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStuAnswerResult_args> {
      public getStuAnswerResult() {
        super("getStuAnswerResult");
      }

      public getStuAnswerResult_args getEmptyArgsInstance() {
        return new getStuAnswerResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStuAnswerResult_result getResult(I iface, getStuAnswerResult_args args) throws TException {
        getStuAnswerResult_result result = new getStuAnswerResult_result();
        result.success = iface.getStuAnswerResult(args.stuAnswerResult);
        return result;
      }
    }

    public static class checkQuizId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkQuizId_args> {
      public checkQuizId() {
        super("checkQuizId");
      }

      public checkQuizId_args getEmptyArgsInstance() {
        return new checkQuizId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkQuizId_result getResult(I iface, checkQuizId_args args) throws TException {
        checkQuizId_result result = new checkQuizId_result();
        result.success = iface.checkQuizId(args.paperCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkAssignmentId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAssignmentId_args> {
      public checkAssignmentId() {
        super("checkAssignmentId");
      }

      public checkAssignmentId_args getEmptyArgsInstance() {
        return new checkAssignmentId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkAssignmentId_result getResult(I iface, checkAssignmentId_args args) throws TException {
        checkAssignmentId_result result = new checkAssignmentId_result();
        result.success = iface.checkAssignmentId(args.paperCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerResult", new getStuAnswerResult());
      processMap.put("checkQuizId", new checkQuizId());
      processMap.put("checkAssignmentId", new checkAssignmentId());
      return processMap;
    }

    public static class getPaperReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperReport_args, List<WorkPaperReport>> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      public AsyncMethodCallback<List<WorkPaperReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WorkPaperReport>>() { 
          public void onComplete(List<WorkPaperReport> o) {
            getPaperReport_result result = new getPaperReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperReport_result result = new getPaperReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperReport_args args, AsyncMethodCallback<List<WorkPaperReport>> resultHandler) throws TException {
        iface.getPaperReport(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getPaperDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperDetail_args, PaperDetail> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      public AsyncMethodCallback<PaperDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PaperDetail>() { 
          public void onComplete(PaperDetail o) {
            getPaperDetail_result result = new getPaperDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperDetail_result result = new getPaperDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperDetail_args args, AsyncMethodCallback<PaperDetail> resultHandler) throws TException {
        iface.getPaperDetail(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getStuAnswerResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStuAnswerResult_args, StuAnswerResult> {
      public getStuAnswerResult() {
        super("getStuAnswerResult");
      }

      public getStuAnswerResult_args getEmptyArgsInstance() {
        return new getStuAnswerResult_args();
      }

      public AsyncMethodCallback<StuAnswerResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StuAnswerResult>() { 
          public void onComplete(StuAnswerResult o) {
            getStuAnswerResult_result result = new getStuAnswerResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStuAnswerResult_result result = new getStuAnswerResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStuAnswerResult_args args, AsyncMethodCallback<StuAnswerResult> resultHandler) throws TException {
        iface.getStuAnswerResult(args.stuAnswerResult,resultHandler);
      }
    }

    public static class checkQuizId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkQuizId_args, Integer> {
      public checkQuizId() {
        super("checkQuizId");
      }

      public checkQuizId_args getEmptyArgsInstance() {
        return new checkQuizId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkQuizId_result result = new checkQuizId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkQuizId_result result = new checkQuizId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkQuizId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkQuizId(args.paperCode,resultHandler);
      }
    }

    public static class checkAssignmentId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAssignmentId_args, Integer> {
      public checkAssignmentId() {
        super("checkAssignmentId");
      }

      public checkAssignmentId_args getEmptyArgsInstance() {
        return new checkAssignmentId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkAssignmentId_result result = new checkAssignmentId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkAssignmentId_result result = new checkAssignmentId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAssignmentId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkAssignmentId(args.paperCode,resultHandler);
      }
    }

  }

  public static class getPaperReport_args implements org.apache.thrift.TBase<getPaperReport_args, getPaperReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_args.class, metaDataMap);
    }

    public getPaperReport_args() {
    }

    public getPaperReport_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_args(getPaperReport_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperReport_args deepCopy() {
      return new getPaperReport_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperReport_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperReport_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_args)
        return this.equals((getPaperReport_args)that);
      return false;
    }

    public boolean equals(getPaperReport_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_argsStandardScheme getScheme() {
        return new getPaperReport_argsStandardScheme();
      }
    }

    private static class getPaperReport_argsStandardScheme extends StandardScheme<getPaperReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_argsTupleScheme getScheme() {
        return new getPaperReport_argsTupleScheme();
      }
    }

    private static class getPaperReport_argsTupleScheme extends TupleScheme<getPaperReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperReport_result implements org.apache.thrift.TBase<getPaperReport_result, getPaperReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_resultTupleSchemeFactory());
    }

    public List<WorkPaperReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkPaperReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_result.class, metaDataMap);
    }

    public getPaperReport_result() {
    }

    public getPaperReport_result(
      List<WorkPaperReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_result(getPaperReport_result other) {
      if (other.isSetSuccess()) {
        List<WorkPaperReport> __this__success = new ArrayList<WorkPaperReport>(other.success.size());
        for (WorkPaperReport other_element : other.success) {
          __this__success.add(new WorkPaperReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPaperReport_result deepCopy() {
      return new getPaperReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WorkPaperReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WorkPaperReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<WorkPaperReport>();
      }
      this.success.add(elem);
    }

    public List<WorkPaperReport> getSuccess() {
      return this.success;
    }

    public getPaperReport_result setSuccess(List<WorkPaperReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WorkPaperReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_result)
        return this.equals((getPaperReport_result)that);
      return false;
    }

    public boolean equals(getPaperReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_resultStandardScheme getScheme() {
        return new getPaperReport_resultStandardScheme();
      }
    }

    private static class getPaperReport_resultStandardScheme extends StandardScheme<getPaperReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<WorkPaperReport>(_list48.size);
                  WorkPaperReport _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new WorkPaperReport();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WorkPaperReport _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_resultTupleScheme getScheme() {
        return new getPaperReport_resultTupleScheme();
      }
    }

    private static class getPaperReport_resultTupleScheme extends TupleScheme<getPaperReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WorkPaperReport _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WorkPaperReport>(_list53.size);
            WorkPaperReport _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new WorkPaperReport();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_args implements org.apache.thrift.TBase<getPaperDetail_args, getPaperDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_args.class, metaDataMap);
    }

    public getPaperDetail_args() {
    }

    public getPaperDetail_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_args(getPaperDetail_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperDetail_args deepCopy() {
      return new getPaperDetail_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperDetail_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperDetail_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_args)
        return this.equals((getPaperDetail_args)that);
      return false;
    }

    public boolean equals(getPaperDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsStandardScheme getScheme() {
        return new getPaperDetail_argsStandardScheme();
      }
    }

    private static class getPaperDetail_argsStandardScheme extends StandardScheme<getPaperDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsTupleScheme getScheme() {
        return new getPaperDetail_argsTupleScheme();
      }
    }

    private static class getPaperDetail_argsTupleScheme extends TupleScheme<getPaperDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_result implements org.apache.thrift.TBase<getPaperDetail_result, getPaperDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_resultTupleSchemeFactory());
    }

    public PaperDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PaperDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_result.class, metaDataMap);
    }

    public getPaperDetail_result() {
    }

    public getPaperDetail_result(
      PaperDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_result(getPaperDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaperDetail(other.success);
      }
    }

    public getPaperDetail_result deepCopy() {
      return new getPaperDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PaperDetail getSuccess() {
      return this.success;
    }

    public getPaperDetail_result setSuccess(PaperDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PaperDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_result)
        return this.equals((getPaperDetail_result)that);
      return false;
    }

    public boolean equals(getPaperDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultStandardScheme getScheme() {
        return new getPaperDetail_resultStandardScheme();
      }
    }

    private static class getPaperDetail_resultStandardScheme extends StandardScheme<getPaperDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PaperDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultTupleScheme getScheme() {
        return new getPaperDetail_resultTupleScheme();
      }
    }

    private static class getPaperDetail_resultTupleScheme extends TupleScheme<getPaperDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PaperDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerResult_args implements org.apache.thrift.TBase<getStuAnswerResult_args, getStuAnswerResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerResult_args");

    private static final org.apache.thrift.protocol.TField STU_ANSWER_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("stuAnswerResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerResult_argsTupleSchemeFactory());
    }

    public StuAnswerResult stuAnswerResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ANSWER_RESULT((short)1, "stuAnswerResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ANSWER_RESULT
            return STU_ANSWER_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ANSWER_RESULT, new org.apache.thrift.meta_data.FieldMetaData("stuAnswerResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerResult_args.class, metaDataMap);
    }

    public getStuAnswerResult_args() {
    }

    public getStuAnswerResult_args(
      StuAnswerResult stuAnswerResult)
    {
      this();
      this.stuAnswerResult = stuAnswerResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerResult_args(getStuAnswerResult_args other) {
      if (other.isSetStuAnswerResult()) {
        this.stuAnswerResult = new StuAnswerResult(other.stuAnswerResult);
      }
    }

    public getStuAnswerResult_args deepCopy() {
      return new getStuAnswerResult_args(this);
    }

    @Override
    public void clear() {
      this.stuAnswerResult = null;
    }

    public StuAnswerResult getStuAnswerResult() {
      return this.stuAnswerResult;
    }

    public getStuAnswerResult_args setStuAnswerResult(StuAnswerResult stuAnswerResult) {
      this.stuAnswerResult = stuAnswerResult;
      return this;
    }

    public void unsetStuAnswerResult() {
      this.stuAnswerResult = null;
    }

    /** Returns true if field stuAnswerResult is set (has been assigned a value) and false otherwise */
    public boolean isSetStuAnswerResult() {
      return this.stuAnswerResult != null;
    }

    public void setStuAnswerResultIsSet(boolean value) {
      if (!value) {
        this.stuAnswerResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ANSWER_RESULT:
        if (value == null) {
          unsetStuAnswerResult();
        } else {
          setStuAnswerResult((StuAnswerResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ANSWER_RESULT:
        return getStuAnswerResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ANSWER_RESULT:
        return isSetStuAnswerResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerResult_args)
        return this.equals((getStuAnswerResult_args)that);
      return false;
    }

    public boolean equals(getStuAnswerResult_args that) {
      if (that == null)
        return false;

      boolean this_present_stuAnswerResult = true && this.isSetStuAnswerResult();
      boolean that_present_stuAnswerResult = true && that.isSetStuAnswerResult();
      if (this_present_stuAnswerResult || that_present_stuAnswerResult) {
        if (!(this_present_stuAnswerResult && that_present_stuAnswerResult))
          return false;
        if (!this.stuAnswerResult.equals(that.stuAnswerResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuAnswerResult = true && (isSetStuAnswerResult());
      list.add(present_stuAnswerResult);
      if (present_stuAnswerResult)
        list.add(stuAnswerResult);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuAnswerResult()).compareTo(other.isSetStuAnswerResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuAnswerResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuAnswerResult, other.stuAnswerResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerResult_args(");
      boolean first = true;

      sb.append("stuAnswerResult:");
      if (this.stuAnswerResult == null) {
        sb.append("null");
      } else {
        sb.append(this.stuAnswerResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (stuAnswerResult != null) {
        stuAnswerResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerResult_argsStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_argsStandardScheme getScheme() {
        return new getStuAnswerResult_argsStandardScheme();
      }
    }

    private static class getStuAnswerResult_argsStandardScheme extends StandardScheme<getStuAnswerResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerResult_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ANSWER_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stuAnswerResult = new StuAnswerResult();
                struct.stuAnswerResult.read(iprot);
                struct.setStuAnswerResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerResult_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stuAnswerResult != null) {
          oprot.writeFieldBegin(STU_ANSWER_RESULT_FIELD_DESC);
          struct.stuAnswerResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerResult_argsTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_argsTupleScheme getScheme() {
        return new getStuAnswerResult_argsTupleScheme();
      }
    }

    private static class getStuAnswerResult_argsTupleScheme extends TupleScheme<getStuAnswerResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuAnswerResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuAnswerResult()) {
          struct.stuAnswerResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuAnswerResult = new StuAnswerResult();
          struct.stuAnswerResult.read(iprot);
          struct.setStuAnswerResultIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerResult_result implements org.apache.thrift.TBase<getStuAnswerResult_result, getStuAnswerResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerResult_resultTupleSchemeFactory());
    }

    public StuAnswerResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerResult_result.class, metaDataMap);
    }

    public getStuAnswerResult_result() {
    }

    public getStuAnswerResult_result(
      StuAnswerResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerResult_result(getStuAnswerResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new StuAnswerResult(other.success);
      }
    }

    public getStuAnswerResult_result deepCopy() {
      return new getStuAnswerResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StuAnswerResult getSuccess() {
      return this.success;
    }

    public getStuAnswerResult_result setSuccess(StuAnswerResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StuAnswerResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerResult_result)
        return this.equals((getStuAnswerResult_result)that);
      return false;
    }

    public boolean equals(getStuAnswerResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerResult_resultStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_resultStandardScheme getScheme() {
        return new getStuAnswerResult_resultStandardScheme();
      }
    }

    private static class getStuAnswerResult_resultStandardScheme extends StandardScheme<getStuAnswerResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerResult_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StuAnswerResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerResult_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerResult_resultTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_resultTupleScheme getScheme() {
        return new getStuAnswerResult_resultTupleScheme();
      }
    }

    private static class getStuAnswerResult_resultTupleScheme extends TupleScheme<getStuAnswerResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StuAnswerResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkQuizId_args implements org.apache.thrift.TBase<checkQuizId_args, checkQuizId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkQuizId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkQuizId_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkQuizId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkQuizId_argsTupleSchemeFactory());
    }

    public String paperCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkQuizId_args.class, metaDataMap);
    }

    public checkQuizId_args() {
    }

    public checkQuizId_args(
      String paperCode)
    {
      this();
      this.paperCode = paperCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkQuizId_args(checkQuizId_args other) {
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
    }

    public checkQuizId_args deepCopy() {
      return new checkQuizId_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public checkQuizId_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkQuizId_args)
        return this.equals((checkQuizId_args)that);
      return false;
    }

    public boolean equals(checkQuizId_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkQuizId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkQuizId_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkQuizId_argsStandardSchemeFactory implements SchemeFactory {
      public checkQuizId_argsStandardScheme getScheme() {
        return new checkQuizId_argsStandardScheme();
      }
    }

    private static class checkQuizId_argsStandardScheme extends StandardScheme<checkQuizId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkQuizId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkQuizId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkQuizId_argsTupleSchemeFactory implements SchemeFactory {
      public checkQuizId_argsTupleScheme getScheme() {
        return new checkQuizId_argsTupleScheme();
      }
    }

    private static class checkQuizId_argsTupleScheme extends TupleScheme<checkQuizId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkQuizId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkQuizId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
      }
    }

  }

  public static class checkQuizId_result implements org.apache.thrift.TBase<checkQuizId_result, checkQuizId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkQuizId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkQuizId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkQuizId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkQuizId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkQuizId_result.class, metaDataMap);
    }

    public checkQuizId_result() {
    }

    public checkQuizId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkQuizId_result(checkQuizId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkQuizId_result deepCopy() {
      return new checkQuizId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkQuizId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkQuizId_result)
        return this.equals((checkQuizId_result)that);
      return false;
    }

    public boolean equals(checkQuizId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkQuizId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkQuizId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkQuizId_resultStandardSchemeFactory implements SchemeFactory {
      public checkQuizId_resultStandardScheme getScheme() {
        return new checkQuizId_resultStandardScheme();
      }
    }

    private static class checkQuizId_resultStandardScheme extends StandardScheme<checkQuizId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkQuizId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkQuizId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkQuizId_resultTupleSchemeFactory implements SchemeFactory {
      public checkQuizId_resultTupleScheme getScheme() {
        return new checkQuizId_resultTupleScheme();
      }
    }

    private static class checkQuizId_resultTupleScheme extends TupleScheme<checkQuizId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkQuizId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkQuizId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkAssignmentId_args implements org.apache.thrift.TBase<checkAssignmentId_args, checkAssignmentId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAssignmentId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAssignmentId_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAssignmentId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAssignmentId_argsTupleSchemeFactory());
    }

    public String paperCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAssignmentId_args.class, metaDataMap);
    }

    public checkAssignmentId_args() {
    }

    public checkAssignmentId_args(
      String paperCode)
    {
      this();
      this.paperCode = paperCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAssignmentId_args(checkAssignmentId_args other) {
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
    }

    public checkAssignmentId_args deepCopy() {
      return new checkAssignmentId_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public checkAssignmentId_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAssignmentId_args)
        return this.equals((checkAssignmentId_args)that);
      return false;
    }

    public boolean equals(checkAssignmentId_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAssignmentId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAssignmentId_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAssignmentId_argsStandardSchemeFactory implements SchemeFactory {
      public checkAssignmentId_argsStandardScheme getScheme() {
        return new checkAssignmentId_argsStandardScheme();
      }
    }

    private static class checkAssignmentId_argsStandardScheme extends StandardScheme<checkAssignmentId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAssignmentId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAssignmentId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAssignmentId_argsTupleSchemeFactory implements SchemeFactory {
      public checkAssignmentId_argsTupleScheme getScheme() {
        return new checkAssignmentId_argsTupleScheme();
      }
    }

    private static class checkAssignmentId_argsTupleScheme extends TupleScheme<checkAssignmentId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
      }
    }

  }

  public static class checkAssignmentId_result implements org.apache.thrift.TBase<checkAssignmentId_result, checkAssignmentId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAssignmentId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAssignmentId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAssignmentId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAssignmentId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAssignmentId_result.class, metaDataMap);
    }

    public checkAssignmentId_result() {
    }

    public checkAssignmentId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAssignmentId_result(checkAssignmentId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkAssignmentId_result deepCopy() {
      return new checkAssignmentId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkAssignmentId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAssignmentId_result)
        return this.equals((checkAssignmentId_result)that);
      return false;
    }

    public boolean equals(checkAssignmentId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAssignmentId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAssignmentId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAssignmentId_resultStandardSchemeFactory implements SchemeFactory {
      public checkAssignmentId_resultStandardScheme getScheme() {
        return new checkAssignmentId_resultStandardScheme();
      }
    }

    private static class checkAssignmentId_resultStandardScheme extends StandardScheme<checkAssignmentId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAssignmentId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAssignmentId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAssignmentId_resultTupleSchemeFactory implements SchemeFactory {
      public checkAssignmentId_resultTupleScheme getScheme() {
        return new checkAssignmentId_resultTupleScheme();
      }
    }

    private static class checkAssignmentId_resultTupleScheme extends TupleScheme<checkAssignmentId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
