/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-07-11")
public class WebStatisticsService {

  public interface Iface {

    public List<WorkPaperReport> getPaperReport(String paperId, String unitIdStr) throws TException;

    public PaperDetail getPaperDetail(String paperId, String unitIdStr) throws TException;

    public StuAnswerResult getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException;

    public int checkQuizId(String paperCode) throws TException;

    public int checkAssignmentId(String paperCode) throws TException;

    public List<QuestionAnswerDetail> getQuestionAnswerDetails(String paperCode, int roundId) throws TException;

    public int getQuestionAnswerTotal(String paperCode, int roundId) throws TException;

    public List<RoundStatistics> getRoundStatistics(List<Integer> roundIds) throws TException;

    public List<QuizzesOrWorkUserCorrectRate> getPaperStudentCorrectRate(UnitReportCondition unitReportCondition, List<Integer> stuIds) throws TException;

    public UnitsStatistic retrieveQuizzesAndAssignmentsByUnitIds(int roundId, String teachUnitIds, int teacherId) throws TException;

    public Map<String,UnitsStatistic> retrieveQuizzesAndAssignmentListByUnitIds(List<UnitsStatisticCondition> unitsStatisticConditionList) throws TException;

    public UnitsCorrectRateStatistic retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(String teachUnitIds) throws TException;

    public Map<String,UnitsCorrectRateStatistic> retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(List<String> teachUnitIdsList) throws TException;

  }

  public interface AsyncIface {

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException;

    public void getStuAnswerResult(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler) throws TException;

    public void checkQuizId(String paperCode, AsyncMethodCallback resultHandler) throws TException;

    public void checkAssignmentId(String paperCode, AsyncMethodCallback resultHandler) throws TException;

    public void getQuestionAnswerDetails(String paperCode, int roundId, AsyncMethodCallback resultHandler) throws TException;

    public void getQuestionAnswerTotal(String paperCode, int roundId, AsyncMethodCallback resultHandler) throws TException;

    public void getRoundStatistics(List<Integer> roundIds, AsyncMethodCallback resultHandler) throws TException;

    public void getPaperStudentCorrectRate(UnitReportCondition unitReportCondition, List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveQuizzesAndAssignmentsByUnitIds(int roundId, String teachUnitIds, int teacherId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveQuizzesAndAssignmentListByUnitIds(List<UnitsStatisticCondition> unitsStatisticConditionList, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(String teachUnitIds, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(List<String> teachUnitIdsList, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<WorkPaperReport> getPaperReport(String paperId, String unitIdStr) throws TException
    {
      send_getPaperReport(paperId, unitIdStr);
      return recv_getPaperReport();
    }

    public void send_getPaperReport(String paperId, String unitIdStr) throws TException
    {
      getPaperReport_args args = new getPaperReport_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperReport", args);
    }

    public List<WorkPaperReport> recv_getPaperReport() throws TException
    {
      getPaperReport_result result = new getPaperReport_result();
      receiveBase(result, "getPaperReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperReport failed: unknown result");
    }

    public PaperDetail getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      send_getPaperDetail(paperId, unitIdStr);
      return recv_getPaperDetail();
    }

    public void send_getPaperDetail(String paperId, String unitIdStr) throws TException
    {
      getPaperDetail_args args = new getPaperDetail_args();
      args.setPaperId(paperId);
      args.setUnitIdStr(unitIdStr);
      sendBase("getPaperDetail", args);
    }

    public PaperDetail recv_getPaperDetail() throws TException
    {
      getPaperDetail_result result = new getPaperDetail_result();
      receiveBase(result, "getPaperDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperDetail failed: unknown result");
    }

    public StuAnswerResult getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException
    {
      send_getStuAnswerResult(stuAnswerResult);
      return recv_getStuAnswerResult();
    }

    public void send_getStuAnswerResult(StuAnswerResult stuAnswerResult) throws TException
    {
      getStuAnswerResult_args args = new getStuAnswerResult_args();
      args.setStuAnswerResult(stuAnswerResult);
      sendBase("getStuAnswerResult", args);
    }

    public StuAnswerResult recv_getStuAnswerResult() throws TException
    {
      getStuAnswerResult_result result = new getStuAnswerResult_result();
      receiveBase(result, "getStuAnswerResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStuAnswerResult failed: unknown result");
    }

    public int checkQuizId(String paperCode) throws TException
    {
      send_checkQuizId(paperCode);
      return recv_checkQuizId();
    }

    public void send_checkQuizId(String paperCode) throws TException
    {
      checkQuizId_args args = new checkQuizId_args();
      args.setPaperCode(paperCode);
      sendBase("checkQuizId", args);
    }

    public int recv_checkQuizId() throws TException
    {
      checkQuizId_result result = new checkQuizId_result();
      receiveBase(result, "checkQuizId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkQuizId failed: unknown result");
    }

    public int checkAssignmentId(String paperCode) throws TException
    {
      send_checkAssignmentId(paperCode);
      return recv_checkAssignmentId();
    }

    public void send_checkAssignmentId(String paperCode) throws TException
    {
      checkAssignmentId_args args = new checkAssignmentId_args();
      args.setPaperCode(paperCode);
      sendBase("checkAssignmentId", args);
    }

    public int recv_checkAssignmentId() throws TException
    {
      checkAssignmentId_result result = new checkAssignmentId_result();
      receiveBase(result, "checkAssignmentId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkAssignmentId failed: unknown result");
    }

    public List<QuestionAnswerDetail> getQuestionAnswerDetails(String paperCode, int roundId) throws TException
    {
      send_getQuestionAnswerDetails(paperCode, roundId);
      return recv_getQuestionAnswerDetails();
    }

    public void send_getQuestionAnswerDetails(String paperCode, int roundId) throws TException
    {
      getQuestionAnswerDetails_args args = new getQuestionAnswerDetails_args();
      args.setPaperCode(paperCode);
      args.setRoundId(roundId);
      sendBase("getQuestionAnswerDetails", args);
    }

    public List<QuestionAnswerDetail> recv_getQuestionAnswerDetails() throws TException
    {
      getQuestionAnswerDetails_result result = new getQuestionAnswerDetails_result();
      receiveBase(result, "getQuestionAnswerDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestionAnswerDetails failed: unknown result");
    }

    public int getQuestionAnswerTotal(String paperCode, int roundId) throws TException
    {
      send_getQuestionAnswerTotal(paperCode, roundId);
      return recv_getQuestionAnswerTotal();
    }

    public void send_getQuestionAnswerTotal(String paperCode, int roundId) throws TException
    {
      getQuestionAnswerTotal_args args = new getQuestionAnswerTotal_args();
      args.setPaperCode(paperCode);
      args.setRoundId(roundId);
      sendBase("getQuestionAnswerTotal", args);
    }

    public int recv_getQuestionAnswerTotal() throws TException
    {
      getQuestionAnswerTotal_result result = new getQuestionAnswerTotal_result();
      receiveBase(result, "getQuestionAnswerTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestionAnswerTotal failed: unknown result");
    }

    public List<RoundStatistics> getRoundStatistics(List<Integer> roundIds) throws TException
    {
      send_getRoundStatistics(roundIds);
      return recv_getRoundStatistics();
    }

    public void send_getRoundStatistics(List<Integer> roundIds) throws TException
    {
      getRoundStatistics_args args = new getRoundStatistics_args();
      args.setRoundIds(roundIds);
      sendBase("getRoundStatistics", args);
    }

    public List<RoundStatistics> recv_getRoundStatistics() throws TException
    {
      getRoundStatistics_result result = new getRoundStatistics_result();
      receiveBase(result, "getRoundStatistics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoundStatistics failed: unknown result");
    }

    public List<QuizzesOrWorkUserCorrectRate> getPaperStudentCorrectRate(UnitReportCondition unitReportCondition, List<Integer> stuIds) throws TException
    {
      send_getPaperStudentCorrectRate(unitReportCondition, stuIds);
      return recv_getPaperStudentCorrectRate();
    }

    public void send_getPaperStudentCorrectRate(UnitReportCondition unitReportCondition, List<Integer> stuIds) throws TException
    {
      getPaperStudentCorrectRate_args args = new getPaperStudentCorrectRate_args();
      args.setUnitReportCondition(unitReportCondition);
      args.setStuIds(stuIds);
      sendBase("getPaperStudentCorrectRate", args);
    }

    public List<QuizzesOrWorkUserCorrectRate> recv_getPaperStudentCorrectRate() throws TException
    {
      getPaperStudentCorrectRate_result result = new getPaperStudentCorrectRate_result();
      receiveBase(result, "getPaperStudentCorrectRate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaperStudentCorrectRate failed: unknown result");
    }

    public UnitsStatistic retrieveQuizzesAndAssignmentsByUnitIds(int roundId, String teachUnitIds, int teacherId) throws TException
    {
      send_retrieveQuizzesAndAssignmentsByUnitIds(roundId, teachUnitIds, teacherId);
      return recv_retrieveQuizzesAndAssignmentsByUnitIds();
    }

    public void send_retrieveQuizzesAndAssignmentsByUnitIds(int roundId, String teachUnitIds, int teacherId) throws TException
    {
      retrieveQuizzesAndAssignmentsByUnitIds_args args = new retrieveQuizzesAndAssignmentsByUnitIds_args();
      args.setRoundId(roundId);
      args.setTeachUnitIds(teachUnitIds);
      args.setTeacherId(teacherId);
      sendBase("retrieveQuizzesAndAssignmentsByUnitIds", args);
    }

    public UnitsStatistic recv_retrieveQuizzesAndAssignmentsByUnitIds() throws TException
    {
      retrieveQuizzesAndAssignmentsByUnitIds_result result = new retrieveQuizzesAndAssignmentsByUnitIds_result();
      receiveBase(result, "retrieveQuizzesAndAssignmentsByUnitIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveQuizzesAndAssignmentsByUnitIds failed: unknown result");
    }

    public Map<String,UnitsStatistic> retrieveQuizzesAndAssignmentListByUnitIds(List<UnitsStatisticCondition> unitsStatisticConditionList) throws TException
    {
      send_retrieveQuizzesAndAssignmentListByUnitIds(unitsStatisticConditionList);
      return recv_retrieveQuizzesAndAssignmentListByUnitIds();
    }

    public void send_retrieveQuizzesAndAssignmentListByUnitIds(List<UnitsStatisticCondition> unitsStatisticConditionList) throws TException
    {
      retrieveQuizzesAndAssignmentListByUnitIds_args args = new retrieveQuizzesAndAssignmentListByUnitIds_args();
      args.setUnitsStatisticConditionList(unitsStatisticConditionList);
      sendBase("retrieveQuizzesAndAssignmentListByUnitIds", args);
    }

    public Map<String,UnitsStatistic> recv_retrieveQuizzesAndAssignmentListByUnitIds() throws TException
    {
      retrieveQuizzesAndAssignmentListByUnitIds_result result = new retrieveQuizzesAndAssignmentListByUnitIds_result();
      receiveBase(result, "retrieveQuizzesAndAssignmentListByUnitIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveQuizzesAndAssignmentListByUnitIds failed: unknown result");
    }

    public UnitsCorrectRateStatistic retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(String teachUnitIds) throws TException
    {
      send_retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(teachUnitIds);
      return recv_retrieveQuizzesAndAssignmentsCorrectRateByUnitIds();
    }

    public void send_retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(String teachUnitIds) throws TException
    {
      retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args args = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args();
      args.setTeachUnitIds(teachUnitIds);
      sendBase("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds", args);
    }

    public UnitsCorrectRateStatistic recv_retrieveQuizzesAndAssignmentsCorrectRateByUnitIds() throws TException
    {
      retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result();
      receiveBase(result, "retrieveQuizzesAndAssignmentsCorrectRateByUnitIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveQuizzesAndAssignmentsCorrectRateByUnitIds failed: unknown result");
    }

    public Map<String,UnitsCorrectRateStatistic> retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(List<String> teachUnitIdsList) throws TException
    {
      send_retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(teachUnitIdsList);
      return recv_retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds();
    }

    public void send_retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(List<String> teachUnitIdsList) throws TException
    {
      retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args args = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args();
      args.setTeachUnitIdsList(teachUnitIdsList);
      sendBase("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds", args);
    }

    public Map<String,UnitsCorrectRateStatistic> recv_retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds() throws TException
    {
      retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result();
      receiveBase(result, "retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPaperReport(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperReport_call method_call = new getPaperReport_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperReport_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperReport_args args = new getPaperReport_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<WorkPaperReport> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperReport();
      }
    }

    public void getPaperDetail(String paperId, String unitIdStr, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperDetail_call method_call = new getPaperDetail_call(paperId, unitIdStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperId;
      private String unitIdStr;
      public getPaperDetail_call(String paperId, String unitIdStr, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperId = paperId;
        this.unitIdStr = unitIdStr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperDetail_args args = new getPaperDetail_args();
        args.setPaperId(paperId);
        args.setUnitIdStr(unitIdStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PaperDetail getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperDetail();
      }
    }

    public void getStuAnswerResult(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStuAnswerResult_call method_call = new getStuAnswerResult_call(stuAnswerResult, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStuAnswerResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StuAnswerResult stuAnswerResult;
      public getStuAnswerResult_call(StuAnswerResult stuAnswerResult, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuAnswerResult = stuAnswerResult;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStuAnswerResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStuAnswerResult_args args = new getStuAnswerResult_args();
        args.setStuAnswerResult(stuAnswerResult);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StuAnswerResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStuAnswerResult();
      }
    }

    public void checkQuizId(String paperCode, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkQuizId_call method_call = new checkQuizId_call(paperCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkQuizId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      public checkQuizId_call(String paperCode, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkQuizId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkQuizId_args args = new checkQuizId_args();
        args.setPaperCode(paperCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkQuizId();
      }
    }

    public void checkAssignmentId(String paperCode, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkAssignmentId_call method_call = new checkAssignmentId_call(paperCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkAssignmentId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      public checkAssignmentId_call(String paperCode, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAssignmentId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkAssignmentId_args args = new checkAssignmentId_args();
        args.setPaperCode(paperCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkAssignmentId();
      }
    }

    public void getQuestionAnswerDetails(String paperCode, int roundId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getQuestionAnswerDetails_call method_call = new getQuestionAnswerDetails_call(paperCode, roundId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestionAnswerDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      private int roundId;
      public getQuestionAnswerDetails_call(String paperCode, int roundId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
        this.roundId = roundId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestionAnswerDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestionAnswerDetails_args args = new getQuestionAnswerDetails_args();
        args.setPaperCode(paperCode);
        args.setRoundId(roundId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<QuestionAnswerDetail> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestionAnswerDetails();
      }
    }

    public void getQuestionAnswerTotal(String paperCode, int roundId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getQuestionAnswerTotal_call method_call = new getQuestionAnswerTotal_call(paperCode, roundId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestionAnswerTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String paperCode;
      private int roundId;
      public getQuestionAnswerTotal_call(String paperCode, int roundId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paperCode = paperCode;
        this.roundId = roundId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestionAnswerTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestionAnswerTotal_args args = new getQuestionAnswerTotal_args();
        args.setPaperCode(paperCode);
        args.setRoundId(roundId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestionAnswerTotal();
      }
    }

    public void getRoundStatistics(List<Integer> roundIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getRoundStatistics_call method_call = new getRoundStatistics_call(roundIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoundStatistics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> roundIds;
      public getRoundStatistics_call(List<Integer> roundIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roundIds = roundIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoundStatistics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoundStatistics_args args = new getRoundStatistics_args();
        args.setRoundIds(roundIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RoundStatistics> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoundStatistics();
      }
    }

    public void getPaperStudentCorrectRate(UnitReportCondition unitReportCondition, List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getPaperStudentCorrectRate_call method_call = new getPaperStudentCorrectRate_call(unitReportCondition, stuIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaperStudentCorrectRate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnitReportCondition unitReportCondition;
      private List<Integer> stuIds;
      public getPaperStudentCorrectRate_call(UnitReportCondition unitReportCondition, List<Integer> stuIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unitReportCondition = unitReportCondition;
        this.stuIds = stuIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaperStudentCorrectRate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaperStudentCorrectRate_args args = new getPaperStudentCorrectRate_args();
        args.setUnitReportCondition(unitReportCondition);
        args.setStuIds(stuIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<QuizzesOrWorkUserCorrectRate> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaperStudentCorrectRate();
      }
    }

    public void retrieveQuizzesAndAssignmentsByUnitIds(int roundId, String teachUnitIds, int teacherId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveQuizzesAndAssignmentsByUnitIds_call method_call = new retrieveQuizzesAndAssignmentsByUnitIds_call(roundId, teachUnitIds, teacherId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveQuizzesAndAssignmentsByUnitIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int roundId;
      private String teachUnitIds;
      private int teacherId;
      public retrieveQuizzesAndAssignmentsByUnitIds_call(int roundId, String teachUnitIds, int teacherId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roundId = roundId;
        this.teachUnitIds = teachUnitIds;
        this.teacherId = teacherId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveQuizzesAndAssignmentsByUnitIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveQuizzesAndAssignmentsByUnitIds_args args = new retrieveQuizzesAndAssignmentsByUnitIds_args();
        args.setRoundId(roundId);
        args.setTeachUnitIds(teachUnitIds);
        args.setTeacherId(teacherId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UnitsStatistic getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveQuizzesAndAssignmentsByUnitIds();
      }
    }

    public void retrieveQuizzesAndAssignmentListByUnitIds(List<UnitsStatisticCondition> unitsStatisticConditionList, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveQuizzesAndAssignmentListByUnitIds_call method_call = new retrieveQuizzesAndAssignmentListByUnitIds_call(unitsStatisticConditionList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveQuizzesAndAssignmentListByUnitIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<UnitsStatisticCondition> unitsStatisticConditionList;
      public retrieveQuizzesAndAssignmentListByUnitIds_call(List<UnitsStatisticCondition> unitsStatisticConditionList, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unitsStatisticConditionList = unitsStatisticConditionList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveQuizzesAndAssignmentListByUnitIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveQuizzesAndAssignmentListByUnitIds_args args = new retrieveQuizzesAndAssignmentListByUnitIds_args();
        args.setUnitsStatisticConditionList(unitsStatisticConditionList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,UnitsStatistic> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveQuizzesAndAssignmentListByUnitIds();
      }
    }

    public void retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(String teachUnitIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_call method_call = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_call(teachUnitIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String teachUnitIds;
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_call(String teachUnitIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teachUnitIds = teachUnitIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args args = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args();
        args.setTeachUnitIds(teachUnitIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UnitsCorrectRateStatistic getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveQuizzesAndAssignmentsCorrectRateByUnitIds();
      }
    }

    public void retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(List<String> teachUnitIdsList, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_call method_call = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_call(teachUnitIdsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> teachUnitIdsList;
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_call(List<String> teachUnitIdsList, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teachUnitIdsList = teachUnitIdsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args args = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args();
        args.setTeachUnitIdsList(teachUnitIdsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,UnitsCorrectRateStatistic> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerResult", new getStuAnswerResult());
      processMap.put("checkQuizId", new checkQuizId());
      processMap.put("checkAssignmentId", new checkAssignmentId());
      processMap.put("getQuestionAnswerDetails", new getQuestionAnswerDetails());
      processMap.put("getQuestionAnswerTotal", new getQuestionAnswerTotal());
      processMap.put("getRoundStatistics", new getRoundStatistics());
      processMap.put("getPaperStudentCorrectRate", new getPaperStudentCorrectRate());
      processMap.put("retrieveQuizzesAndAssignmentsByUnitIds", new retrieveQuizzesAndAssignmentsByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentListByUnitIds", new retrieveQuizzesAndAssignmentListByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds", new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds", new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds());
      return processMap;
    }

    public static class getPaperReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperReport_args> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperReport_result getResult(I iface, getPaperReport_args args) throws TException {
        getPaperReport_result result = new getPaperReport_result();
        result.success = iface.getPaperReport(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getPaperDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperDetail_args> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperDetail_result getResult(I iface, getPaperDetail_args args) throws TException {
        getPaperDetail_result result = new getPaperDetail_result();
        result.success = iface.getPaperDetail(args.paperId, args.unitIdStr);
        return result;
      }
    }

    public static class getStuAnswerResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStuAnswerResult_args> {
      public getStuAnswerResult() {
        super("getStuAnswerResult");
      }

      public getStuAnswerResult_args getEmptyArgsInstance() {
        return new getStuAnswerResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStuAnswerResult_result getResult(I iface, getStuAnswerResult_args args) throws TException {
        getStuAnswerResult_result result = new getStuAnswerResult_result();
        result.success = iface.getStuAnswerResult(args.stuAnswerResult);
        return result;
      }
    }

    public static class checkQuizId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkQuizId_args> {
      public checkQuizId() {
        super("checkQuizId");
      }

      public checkQuizId_args getEmptyArgsInstance() {
        return new checkQuizId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkQuizId_result getResult(I iface, checkQuizId_args args) throws TException {
        checkQuizId_result result = new checkQuizId_result();
        result.success = iface.checkQuizId(args.paperCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkAssignmentId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAssignmentId_args> {
      public checkAssignmentId() {
        super("checkAssignmentId");
      }

      public checkAssignmentId_args getEmptyArgsInstance() {
        return new checkAssignmentId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkAssignmentId_result getResult(I iface, checkAssignmentId_args args) throws TException {
        checkAssignmentId_result result = new checkAssignmentId_result();
        result.success = iface.checkAssignmentId(args.paperCode);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getQuestionAnswerDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestionAnswerDetails_args> {
      public getQuestionAnswerDetails() {
        super("getQuestionAnswerDetails");
      }

      public getQuestionAnswerDetails_args getEmptyArgsInstance() {
        return new getQuestionAnswerDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQuestionAnswerDetails_result getResult(I iface, getQuestionAnswerDetails_args args) throws TException {
        getQuestionAnswerDetails_result result = new getQuestionAnswerDetails_result();
        result.success = iface.getQuestionAnswerDetails(args.paperCode, args.roundId);
        return result;
      }
    }

    public static class getQuestionAnswerTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestionAnswerTotal_args> {
      public getQuestionAnswerTotal() {
        super("getQuestionAnswerTotal");
      }

      public getQuestionAnswerTotal_args getEmptyArgsInstance() {
        return new getQuestionAnswerTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQuestionAnswerTotal_result getResult(I iface, getQuestionAnswerTotal_args args) throws TException {
        getQuestionAnswerTotal_result result = new getQuestionAnswerTotal_result();
        result.success = iface.getQuestionAnswerTotal(args.paperCode, args.roundId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRoundStatistics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoundStatistics_args> {
      public getRoundStatistics() {
        super("getRoundStatistics");
      }

      public getRoundStatistics_args getEmptyArgsInstance() {
        return new getRoundStatistics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoundStatistics_result getResult(I iface, getRoundStatistics_args args) throws TException {
        getRoundStatistics_result result = new getRoundStatistics_result();
        result.success = iface.getRoundStatistics(args.roundIds);
        return result;
      }
    }

    public static class getPaperStudentCorrectRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaperStudentCorrectRate_args> {
      public getPaperStudentCorrectRate() {
        super("getPaperStudentCorrectRate");
      }

      public getPaperStudentCorrectRate_args getEmptyArgsInstance() {
        return new getPaperStudentCorrectRate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaperStudentCorrectRate_result getResult(I iface, getPaperStudentCorrectRate_args args) throws TException {
        getPaperStudentCorrectRate_result result = new getPaperStudentCorrectRate_result();
        result.success = iface.getPaperStudentCorrectRate(args.unitReportCondition, args.stuIds);
        return result;
      }
    }

    public static class retrieveQuizzesAndAssignmentsByUnitIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveQuizzesAndAssignmentsByUnitIds_args> {
      public retrieveQuizzesAndAssignmentsByUnitIds() {
        super("retrieveQuizzesAndAssignmentsByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveQuizzesAndAssignmentsByUnitIds_result getResult(I iface, retrieveQuizzesAndAssignmentsByUnitIds_args args) throws TException {
        retrieveQuizzesAndAssignmentsByUnitIds_result result = new retrieveQuizzesAndAssignmentsByUnitIds_result();
        result.success = iface.retrieveQuizzesAndAssignmentsByUnitIds(args.roundId, args.teachUnitIds, args.teacherId);
        return result;
      }
    }

    public static class retrieveQuizzesAndAssignmentListByUnitIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveQuizzesAndAssignmentListByUnitIds_args> {
      public retrieveQuizzesAndAssignmentListByUnitIds() {
        super("retrieveQuizzesAndAssignmentListByUnitIds");
      }

      public retrieveQuizzesAndAssignmentListByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveQuizzesAndAssignmentListByUnitIds_result getResult(I iface, retrieveQuizzesAndAssignmentListByUnitIds_args args) throws TException {
        retrieveQuizzesAndAssignmentListByUnitIds_result result = new retrieveQuizzesAndAssignmentListByUnitIds_result();
        result.success = iface.retrieveQuizzesAndAssignmentListByUnitIds(args.unitsStatisticConditionList);
        return result;
      }
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args> {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds() {
        super("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result getResult(I iface, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args args) throws TException {
        retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result();
        result.success = iface.retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(args.teachUnitIds);
        return result;
      }
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args> {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds() {
        super("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result getResult(I iface, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args args) throws TException {
        retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result();
        result.success = iface.retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(args.teachUnitIdsList);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPaperReport", new getPaperReport());
      processMap.put("getPaperDetail", new getPaperDetail());
      processMap.put("getStuAnswerResult", new getStuAnswerResult());
      processMap.put("checkQuizId", new checkQuizId());
      processMap.put("checkAssignmentId", new checkAssignmentId());
      processMap.put("getQuestionAnswerDetails", new getQuestionAnswerDetails());
      processMap.put("getQuestionAnswerTotal", new getQuestionAnswerTotal());
      processMap.put("getRoundStatistics", new getRoundStatistics());
      processMap.put("getPaperStudentCorrectRate", new getPaperStudentCorrectRate());
      processMap.put("retrieveQuizzesAndAssignmentsByUnitIds", new retrieveQuizzesAndAssignmentsByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentListByUnitIds", new retrieveQuizzesAndAssignmentListByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds", new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds());
      processMap.put("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds", new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds());
      return processMap;
    }

    public static class getPaperReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperReport_args, List<WorkPaperReport>> {
      public getPaperReport() {
        super("getPaperReport");
      }

      public getPaperReport_args getEmptyArgsInstance() {
        return new getPaperReport_args();
      }

      public AsyncMethodCallback<List<WorkPaperReport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<WorkPaperReport>>() { 
          public void onComplete(List<WorkPaperReport> o) {
            getPaperReport_result result = new getPaperReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperReport_result result = new getPaperReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperReport_args args, AsyncMethodCallback<List<WorkPaperReport>> resultHandler) throws TException {
        iface.getPaperReport(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getPaperDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperDetail_args, PaperDetail> {
      public getPaperDetail() {
        super("getPaperDetail");
      }

      public getPaperDetail_args getEmptyArgsInstance() {
        return new getPaperDetail_args();
      }

      public AsyncMethodCallback<PaperDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PaperDetail>() { 
          public void onComplete(PaperDetail o) {
            getPaperDetail_result result = new getPaperDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperDetail_result result = new getPaperDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperDetail_args args, AsyncMethodCallback<PaperDetail> resultHandler) throws TException {
        iface.getPaperDetail(args.paperId, args.unitIdStr,resultHandler);
      }
    }

    public static class getStuAnswerResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStuAnswerResult_args, StuAnswerResult> {
      public getStuAnswerResult() {
        super("getStuAnswerResult");
      }

      public getStuAnswerResult_args getEmptyArgsInstance() {
        return new getStuAnswerResult_args();
      }

      public AsyncMethodCallback<StuAnswerResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StuAnswerResult>() { 
          public void onComplete(StuAnswerResult o) {
            getStuAnswerResult_result result = new getStuAnswerResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStuAnswerResult_result result = new getStuAnswerResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStuAnswerResult_args args, AsyncMethodCallback<StuAnswerResult> resultHandler) throws TException {
        iface.getStuAnswerResult(args.stuAnswerResult,resultHandler);
      }
    }

    public static class checkQuizId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkQuizId_args, Integer> {
      public checkQuizId() {
        super("checkQuizId");
      }

      public checkQuizId_args getEmptyArgsInstance() {
        return new checkQuizId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkQuizId_result result = new checkQuizId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkQuizId_result result = new checkQuizId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkQuizId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkQuizId(args.paperCode,resultHandler);
      }
    }

    public static class checkAssignmentId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkAssignmentId_args, Integer> {
      public checkAssignmentId() {
        super("checkAssignmentId");
      }

      public checkAssignmentId_args getEmptyArgsInstance() {
        return new checkAssignmentId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkAssignmentId_result result = new checkAssignmentId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkAssignmentId_result result = new checkAssignmentId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkAssignmentId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkAssignmentId(args.paperCode,resultHandler);
      }
    }

    public static class getQuestionAnswerDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuestionAnswerDetails_args, List<QuestionAnswerDetail>> {
      public getQuestionAnswerDetails() {
        super("getQuestionAnswerDetails");
      }

      public getQuestionAnswerDetails_args getEmptyArgsInstance() {
        return new getQuestionAnswerDetails_args();
      }

      public AsyncMethodCallback<List<QuestionAnswerDetail>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<QuestionAnswerDetail>>() { 
          public void onComplete(List<QuestionAnswerDetail> o) {
            getQuestionAnswerDetails_result result = new getQuestionAnswerDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQuestionAnswerDetails_result result = new getQuestionAnswerDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuestionAnswerDetails_args args, AsyncMethodCallback<List<QuestionAnswerDetail>> resultHandler) throws TException {
        iface.getQuestionAnswerDetails(args.paperCode, args.roundId,resultHandler);
      }
    }

    public static class getQuestionAnswerTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuestionAnswerTotal_args, Integer> {
      public getQuestionAnswerTotal() {
        super("getQuestionAnswerTotal");
      }

      public getQuestionAnswerTotal_args getEmptyArgsInstance() {
        return new getQuestionAnswerTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getQuestionAnswerTotal_result result = new getQuestionAnswerTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQuestionAnswerTotal_result result = new getQuestionAnswerTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuestionAnswerTotal_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getQuestionAnswerTotal(args.paperCode, args.roundId,resultHandler);
      }
    }

    public static class getRoundStatistics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoundStatistics_args, List<RoundStatistics>> {
      public getRoundStatistics() {
        super("getRoundStatistics");
      }

      public getRoundStatistics_args getEmptyArgsInstance() {
        return new getRoundStatistics_args();
      }

      public AsyncMethodCallback<List<RoundStatistics>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RoundStatistics>>() { 
          public void onComplete(List<RoundStatistics> o) {
            getRoundStatistics_result result = new getRoundStatistics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoundStatistics_result result = new getRoundStatistics_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoundStatistics_args args, AsyncMethodCallback<List<RoundStatistics>> resultHandler) throws TException {
        iface.getRoundStatistics(args.roundIds,resultHandler);
      }
    }

    public static class getPaperStudentCorrectRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaperStudentCorrectRate_args, List<QuizzesOrWorkUserCorrectRate>> {
      public getPaperStudentCorrectRate() {
        super("getPaperStudentCorrectRate");
      }

      public getPaperStudentCorrectRate_args getEmptyArgsInstance() {
        return new getPaperStudentCorrectRate_args();
      }

      public AsyncMethodCallback<List<QuizzesOrWorkUserCorrectRate>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<QuizzesOrWorkUserCorrectRate>>() { 
          public void onComplete(List<QuizzesOrWorkUserCorrectRate> o) {
            getPaperStudentCorrectRate_result result = new getPaperStudentCorrectRate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPaperStudentCorrectRate_result result = new getPaperStudentCorrectRate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaperStudentCorrectRate_args args, AsyncMethodCallback<List<QuizzesOrWorkUserCorrectRate>> resultHandler) throws TException {
        iface.getPaperStudentCorrectRate(args.unitReportCondition, args.stuIds,resultHandler);
      }
    }

    public static class retrieveQuizzesAndAssignmentsByUnitIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveQuizzesAndAssignmentsByUnitIds_args, UnitsStatistic> {
      public retrieveQuizzesAndAssignmentsByUnitIds() {
        super("retrieveQuizzesAndAssignmentsByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_args();
      }

      public AsyncMethodCallback<UnitsStatistic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UnitsStatistic>() { 
          public void onComplete(UnitsStatistic o) {
            retrieveQuizzesAndAssignmentsByUnitIds_result result = new retrieveQuizzesAndAssignmentsByUnitIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveQuizzesAndAssignmentsByUnitIds_result result = new retrieveQuizzesAndAssignmentsByUnitIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveQuizzesAndAssignmentsByUnitIds_args args, AsyncMethodCallback<UnitsStatistic> resultHandler) throws TException {
        iface.retrieveQuizzesAndAssignmentsByUnitIds(args.roundId, args.teachUnitIds, args.teacherId,resultHandler);
      }
    }

    public static class retrieveQuizzesAndAssignmentListByUnitIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveQuizzesAndAssignmentListByUnitIds_args, Map<String,UnitsStatistic>> {
      public retrieveQuizzesAndAssignmentListByUnitIds() {
        super("retrieveQuizzesAndAssignmentListByUnitIds");
      }

      public retrieveQuizzesAndAssignmentListByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_args();
      }

      public AsyncMethodCallback<Map<String,UnitsStatistic>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,UnitsStatistic>>() { 
          public void onComplete(Map<String,UnitsStatistic> o) {
            retrieveQuizzesAndAssignmentListByUnitIds_result result = new retrieveQuizzesAndAssignmentListByUnitIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveQuizzesAndAssignmentListByUnitIds_result result = new retrieveQuizzesAndAssignmentListByUnitIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveQuizzesAndAssignmentListByUnitIds_args args, AsyncMethodCallback<Map<String,UnitsStatistic>> resultHandler) throws TException {
        iface.retrieveQuizzesAndAssignmentListByUnitIds(args.unitsStatisticConditionList,resultHandler);
      }
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args, UnitsCorrectRateStatistic> {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds() {
        super("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args();
      }

      public AsyncMethodCallback<UnitsCorrectRateStatistic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UnitsCorrectRateStatistic>() { 
          public void onComplete(UnitsCorrectRateStatistic o) {
            retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args args, AsyncMethodCallback<UnitsCorrectRateStatistic> resultHandler) throws TException {
        iface.retrieveQuizzesAndAssignmentsCorrectRateByUnitIds(args.teachUnitIds,resultHandler);
      }
    }

    public static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args, Map<String,UnitsCorrectRateStatistic>> {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds() {
        super("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds");
      }

      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args getEmptyArgsInstance() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args();
      }

      public AsyncMethodCallback<Map<String,UnitsCorrectRateStatistic>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,UnitsCorrectRateStatistic>>() { 
          public void onComplete(Map<String,UnitsCorrectRateStatistic> o) {
            retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result result = new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args args, AsyncMethodCallback<Map<String,UnitsCorrectRateStatistic>> resultHandler) throws TException {
        iface.retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds(args.teachUnitIdsList,resultHandler);
      }
    }

  }

  public static class getPaperReport_args implements org.apache.thrift.TBase<getPaperReport_args, getPaperReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_args.class, metaDataMap);
    }

    public getPaperReport_args() {
    }

    public getPaperReport_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_args(getPaperReport_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperReport_args deepCopy() {
      return new getPaperReport_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperReport_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperReport_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_args)
        return this.equals((getPaperReport_args)that);
      return false;
    }

    public boolean equals(getPaperReport_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_argsStandardScheme getScheme() {
        return new getPaperReport_argsStandardScheme();
      }
    }

    private static class getPaperReport_argsStandardScheme extends StandardScheme<getPaperReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_argsTupleScheme getScheme() {
        return new getPaperReport_argsTupleScheme();
      }
    }

    private static class getPaperReport_argsTupleScheme extends TupleScheme<getPaperReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperReport_result implements org.apache.thrift.TBase<getPaperReport_result, getPaperReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperReport_resultTupleSchemeFactory());
    }

    public List<WorkPaperReport> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkPaperReport.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperReport_result.class, metaDataMap);
    }

    public getPaperReport_result() {
    }

    public getPaperReport_result(
      List<WorkPaperReport> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperReport_result(getPaperReport_result other) {
      if (other.isSetSuccess()) {
        List<WorkPaperReport> __this__success = new ArrayList<WorkPaperReport>(other.success.size());
        for (WorkPaperReport other_element : other.success) {
          __this__success.add(new WorkPaperReport(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPaperReport_result deepCopy() {
      return new getPaperReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<WorkPaperReport> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(WorkPaperReport elem) {
      if (this.success == null) {
        this.success = new ArrayList<WorkPaperReport>();
      }
      this.success.add(elem);
    }

    public List<WorkPaperReport> getSuccess() {
      return this.success;
    }

    public getPaperReport_result setSuccess(List<WorkPaperReport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<WorkPaperReport>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperReport_result)
        return this.equals((getPaperReport_result)that);
      return false;
    }

    public boolean equals(getPaperReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperReport_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperReport_resultStandardScheme getScheme() {
        return new getPaperReport_resultStandardScheme();
      }
    }

    private static class getPaperReport_resultStandardScheme extends StandardScheme<getPaperReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperReport_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<WorkPaperReport>(_list48.size);
                  WorkPaperReport _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new WorkPaperReport();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperReport_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (WorkPaperReport _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperReport_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperReport_resultTupleScheme getScheme() {
        return new getPaperReport_resultTupleScheme();
      }
    }

    private static class getPaperReport_resultTupleScheme extends TupleScheme<getPaperReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (WorkPaperReport _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperReport_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<WorkPaperReport>(_list53.size);
            WorkPaperReport _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new WorkPaperReport();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_args implements org.apache.thrift.TBase<getPaperDetail_args, getPaperDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_args");

    private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIdStr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_argsTupleSchemeFactory());
    }

    public String paperId; // required
    public String unitIdStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_ID((short)1, "paperId"),
      UNIT_ID_STR((short)2, "unitIdStr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_ID
            return PAPER_ID;
          case 2: // UNIT_ID_STR
            return UNIT_ID_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIT_ID_STR, new org.apache.thrift.meta_data.FieldMetaData("unitIdStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_args.class, metaDataMap);
    }

    public getPaperDetail_args() {
    }

    public getPaperDetail_args(
      String paperId,
      String unitIdStr)
    {
      this();
      this.paperId = paperId;
      this.unitIdStr = unitIdStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_args(getPaperDetail_args other) {
      if (other.isSetPaperId()) {
        this.paperId = other.paperId;
      }
      if (other.isSetUnitIdStr()) {
        this.unitIdStr = other.unitIdStr;
      }
    }

    public getPaperDetail_args deepCopy() {
      return new getPaperDetail_args(this);
    }

    @Override
    public void clear() {
      this.paperId = null;
      this.unitIdStr = null;
    }

    public String getPaperId() {
      return this.paperId;
    }

    public getPaperDetail_args setPaperId(String paperId) {
      this.paperId = paperId;
      return this;
    }

    public void unsetPaperId() {
      this.paperId = null;
    }

    /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperId() {
      return this.paperId != null;
    }

    public void setPaperIdIsSet(boolean value) {
      if (!value) {
        this.paperId = null;
      }
    }

    public String getUnitIdStr() {
      return this.unitIdStr;
    }

    public getPaperDetail_args setUnitIdStr(String unitIdStr) {
      this.unitIdStr = unitIdStr;
      return this;
    }

    public void unsetUnitIdStr() {
      this.unitIdStr = null;
    }

    /** Returns true if field unitIdStr is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIdStr() {
      return this.unitIdStr != null;
    }

    public void setUnitIdStrIsSet(boolean value) {
      if (!value) {
        this.unitIdStr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_ID:
        if (value == null) {
          unsetPaperId();
        } else {
          setPaperId((String)value);
        }
        break;

      case UNIT_ID_STR:
        if (value == null) {
          unsetUnitIdStr();
        } else {
          setUnitIdStr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_ID:
        return getPaperId();

      case UNIT_ID_STR:
        return getUnitIdStr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_ID:
        return isSetPaperId();
      case UNIT_ID_STR:
        return isSetUnitIdStr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_args)
        return this.equals((getPaperDetail_args)that);
      return false;
    }

    public boolean equals(getPaperDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_paperId = true && this.isSetPaperId();
      boolean that_present_paperId = true && that.isSetPaperId();
      if (this_present_paperId || that_present_paperId) {
        if (!(this_present_paperId && that_present_paperId))
          return false;
        if (!this.paperId.equals(that.paperId))
          return false;
      }

      boolean this_present_unitIdStr = true && this.isSetUnitIdStr();
      boolean that_present_unitIdStr = true && that.isSetUnitIdStr();
      if (this_present_unitIdStr || that_present_unitIdStr) {
        if (!(this_present_unitIdStr && that_present_unitIdStr))
          return false;
        if (!this.unitIdStr.equals(that.unitIdStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperId = true && (isSetPaperId());
      list.add(present_paperId);
      if (present_paperId)
        list.add(paperId);

      boolean present_unitIdStr = true && (isSetUnitIdStr());
      list.add(present_unitIdStr);
      if (present_unitIdStr)
        list.add(unitIdStr);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitIdStr()).compareTo(other.isSetUnitIdStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIdStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIdStr, other.unitIdStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_args(");
      boolean first = true;

      sb.append("paperId:");
      if (this.paperId == null) {
        sb.append("null");
      } else {
        sb.append(this.paperId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIdStr:");
      if (this.unitIdStr == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIdStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsStandardScheme getScheme() {
        return new getPaperDetail_argsStandardScheme();
      }
    }

    private static class getPaperDetail_argsStandardScheme extends StandardScheme<getPaperDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperId = iprot.readString();
                struct.setPaperIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.unitIdStr = iprot.readString();
                struct.setUnitIdStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperId != null) {
          oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
          oprot.writeString(struct.paperId);
          oprot.writeFieldEnd();
        }
        if (struct.unitIdStr != null) {
          oprot.writeFieldBegin(UNIT_ID_STR_FIELD_DESC);
          oprot.writeString(struct.unitIdStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_argsTupleScheme getScheme() {
        return new getPaperDetail_argsTupleScheme();
      }
    }

    private static class getPaperDetail_argsTupleScheme extends TupleScheme<getPaperDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIdStr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperId()) {
          oprot.writeString(struct.paperId);
        }
        if (struct.isSetUnitIdStr()) {
          oprot.writeString(struct.unitIdStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperId = iprot.readString();
          struct.setPaperIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitIdStr = iprot.readString();
          struct.setUnitIdStrIsSet(true);
        }
      }
    }

  }

  public static class getPaperDetail_result implements org.apache.thrift.TBase<getPaperDetail_result, getPaperDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperDetail_resultTupleSchemeFactory());
    }

    public PaperDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PaperDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperDetail_result.class, metaDataMap);
    }

    public getPaperDetail_result() {
    }

    public getPaperDetail_result(
      PaperDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperDetail_result(getPaperDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaperDetail(other.success);
      }
    }

    public getPaperDetail_result deepCopy() {
      return new getPaperDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PaperDetail getSuccess() {
      return this.success;
    }

    public getPaperDetail_result setSuccess(PaperDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PaperDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperDetail_result)
        return this.equals((getPaperDetail_result)that);
      return false;
    }

    public boolean equals(getPaperDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultStandardScheme getScheme() {
        return new getPaperDetail_resultStandardScheme();
      }
    }

    private static class getPaperDetail_resultStandardScheme extends StandardScheme<getPaperDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PaperDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperDetail_resultTupleScheme getScheme() {
        return new getPaperDetail_resultTupleScheme();
      }
    }

    private static class getPaperDetail_resultTupleScheme extends TupleScheme<getPaperDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PaperDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerResult_args implements org.apache.thrift.TBase<getStuAnswerResult_args, getStuAnswerResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerResult_args");

    private static final org.apache.thrift.protocol.TField STU_ANSWER_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("stuAnswerResult", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerResult_argsTupleSchemeFactory());
    }

    public StuAnswerResult stuAnswerResult; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ANSWER_RESULT((short)1, "stuAnswerResult");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ANSWER_RESULT
            return STU_ANSWER_RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ANSWER_RESULT, new org.apache.thrift.meta_data.FieldMetaData("stuAnswerResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerResult_args.class, metaDataMap);
    }

    public getStuAnswerResult_args() {
    }

    public getStuAnswerResult_args(
      StuAnswerResult stuAnswerResult)
    {
      this();
      this.stuAnswerResult = stuAnswerResult;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerResult_args(getStuAnswerResult_args other) {
      if (other.isSetStuAnswerResult()) {
        this.stuAnswerResult = new StuAnswerResult(other.stuAnswerResult);
      }
    }

    public getStuAnswerResult_args deepCopy() {
      return new getStuAnswerResult_args(this);
    }

    @Override
    public void clear() {
      this.stuAnswerResult = null;
    }

    public StuAnswerResult getStuAnswerResult() {
      return this.stuAnswerResult;
    }

    public getStuAnswerResult_args setStuAnswerResult(StuAnswerResult stuAnswerResult) {
      this.stuAnswerResult = stuAnswerResult;
      return this;
    }

    public void unsetStuAnswerResult() {
      this.stuAnswerResult = null;
    }

    /** Returns true if field stuAnswerResult is set (has been assigned a value) and false otherwise */
    public boolean isSetStuAnswerResult() {
      return this.stuAnswerResult != null;
    }

    public void setStuAnswerResultIsSet(boolean value) {
      if (!value) {
        this.stuAnswerResult = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ANSWER_RESULT:
        if (value == null) {
          unsetStuAnswerResult();
        } else {
          setStuAnswerResult((StuAnswerResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ANSWER_RESULT:
        return getStuAnswerResult();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ANSWER_RESULT:
        return isSetStuAnswerResult();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerResult_args)
        return this.equals((getStuAnswerResult_args)that);
      return false;
    }

    public boolean equals(getStuAnswerResult_args that) {
      if (that == null)
        return false;

      boolean this_present_stuAnswerResult = true && this.isSetStuAnswerResult();
      boolean that_present_stuAnswerResult = true && that.isSetStuAnswerResult();
      if (this_present_stuAnswerResult || that_present_stuAnswerResult) {
        if (!(this_present_stuAnswerResult && that_present_stuAnswerResult))
          return false;
        if (!this.stuAnswerResult.equals(that.stuAnswerResult))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuAnswerResult = true && (isSetStuAnswerResult());
      list.add(present_stuAnswerResult);
      if (present_stuAnswerResult)
        list.add(stuAnswerResult);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuAnswerResult()).compareTo(other.isSetStuAnswerResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuAnswerResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuAnswerResult, other.stuAnswerResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerResult_args(");
      boolean first = true;

      sb.append("stuAnswerResult:");
      if (this.stuAnswerResult == null) {
        sb.append("null");
      } else {
        sb.append(this.stuAnswerResult);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (stuAnswerResult != null) {
        stuAnswerResult.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerResult_argsStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_argsStandardScheme getScheme() {
        return new getStuAnswerResult_argsStandardScheme();
      }
    }

    private static class getStuAnswerResult_argsStandardScheme extends StandardScheme<getStuAnswerResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerResult_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ANSWER_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stuAnswerResult = new StuAnswerResult();
                struct.stuAnswerResult.read(iprot);
                struct.setStuAnswerResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerResult_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stuAnswerResult != null) {
          oprot.writeFieldBegin(STU_ANSWER_RESULT_FIELD_DESC);
          struct.stuAnswerResult.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerResult_argsTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_argsTupleScheme getScheme() {
        return new getStuAnswerResult_argsTupleScheme();
      }
    }

    private static class getStuAnswerResult_argsTupleScheme extends TupleScheme<getStuAnswerResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuAnswerResult()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuAnswerResult()) {
          struct.stuAnswerResult.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuAnswerResult = new StuAnswerResult();
          struct.stuAnswerResult.read(iprot);
          struct.setStuAnswerResultIsSet(true);
        }
      }
    }

  }

  public static class getStuAnswerResult_result implements org.apache.thrift.TBase<getStuAnswerResult_result, getStuAnswerResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStuAnswerResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuAnswerResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuAnswerResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuAnswerResult_resultTupleSchemeFactory());
    }

    public StuAnswerResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuAnswerResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuAnswerResult_result.class, metaDataMap);
    }

    public getStuAnswerResult_result() {
    }

    public getStuAnswerResult_result(
      StuAnswerResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuAnswerResult_result(getStuAnswerResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new StuAnswerResult(other.success);
      }
    }

    public getStuAnswerResult_result deepCopy() {
      return new getStuAnswerResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StuAnswerResult getSuccess() {
      return this.success;
    }

    public getStuAnswerResult_result setSuccess(StuAnswerResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StuAnswerResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuAnswerResult_result)
        return this.equals((getStuAnswerResult_result)that);
      return false;
    }

    public boolean equals(getStuAnswerResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuAnswerResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuAnswerResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuAnswerResult_resultStandardSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_resultStandardScheme getScheme() {
        return new getStuAnswerResult_resultStandardScheme();
      }
    }

    private static class getStuAnswerResult_resultStandardScheme extends StandardScheme<getStuAnswerResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuAnswerResult_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StuAnswerResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuAnswerResult_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuAnswerResult_resultTupleSchemeFactory implements SchemeFactory {
      public getStuAnswerResult_resultTupleScheme getScheme() {
        return new getStuAnswerResult_resultTupleScheme();
      }
    }

    private static class getStuAnswerResult_resultTupleScheme extends TupleScheme<getStuAnswerResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuAnswerResult_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StuAnswerResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkQuizId_args implements org.apache.thrift.TBase<checkQuizId_args, checkQuizId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkQuizId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkQuizId_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkQuizId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkQuizId_argsTupleSchemeFactory());
    }

    public String paperCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkQuizId_args.class, metaDataMap);
    }

    public checkQuizId_args() {
    }

    public checkQuizId_args(
      String paperCode)
    {
      this();
      this.paperCode = paperCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkQuizId_args(checkQuizId_args other) {
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
    }

    public checkQuizId_args deepCopy() {
      return new checkQuizId_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public checkQuizId_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkQuizId_args)
        return this.equals((checkQuizId_args)that);
      return false;
    }

    public boolean equals(checkQuizId_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkQuizId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkQuizId_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkQuizId_argsStandardSchemeFactory implements SchemeFactory {
      public checkQuizId_argsStandardScheme getScheme() {
        return new checkQuizId_argsStandardScheme();
      }
    }

    private static class checkQuizId_argsStandardScheme extends StandardScheme<checkQuizId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkQuizId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkQuizId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkQuizId_argsTupleSchemeFactory implements SchemeFactory {
      public checkQuizId_argsTupleScheme getScheme() {
        return new checkQuizId_argsTupleScheme();
      }
    }

    private static class checkQuizId_argsTupleScheme extends TupleScheme<checkQuizId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkQuizId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkQuizId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
      }
    }

  }

  public static class checkQuizId_result implements org.apache.thrift.TBase<checkQuizId_result, checkQuizId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkQuizId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkQuizId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkQuizId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkQuizId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkQuizId_result.class, metaDataMap);
    }

    public checkQuizId_result() {
    }

    public checkQuizId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkQuizId_result(checkQuizId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkQuizId_result deepCopy() {
      return new checkQuizId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkQuizId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkQuizId_result)
        return this.equals((checkQuizId_result)that);
      return false;
    }

    public boolean equals(checkQuizId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkQuizId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkQuizId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkQuizId_resultStandardSchemeFactory implements SchemeFactory {
      public checkQuizId_resultStandardScheme getScheme() {
        return new checkQuizId_resultStandardScheme();
      }
    }

    private static class checkQuizId_resultStandardScheme extends StandardScheme<checkQuizId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkQuizId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkQuizId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkQuizId_resultTupleSchemeFactory implements SchemeFactory {
      public checkQuizId_resultTupleScheme getScheme() {
        return new checkQuizId_resultTupleScheme();
      }
    }

    private static class checkQuizId_resultTupleScheme extends TupleScheme<checkQuizId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkQuizId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkQuizId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkAssignmentId_args implements org.apache.thrift.TBase<checkAssignmentId_args, checkAssignmentId_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkAssignmentId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAssignmentId_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAssignmentId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAssignmentId_argsTupleSchemeFactory());
    }

    public String paperCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAssignmentId_args.class, metaDataMap);
    }

    public checkAssignmentId_args() {
    }

    public checkAssignmentId_args(
      String paperCode)
    {
      this();
      this.paperCode = paperCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAssignmentId_args(checkAssignmentId_args other) {
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
    }

    public checkAssignmentId_args deepCopy() {
      return new checkAssignmentId_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public checkAssignmentId_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAssignmentId_args)
        return this.equals((checkAssignmentId_args)that);
      return false;
    }

    public boolean equals(checkAssignmentId_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAssignmentId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAssignmentId_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAssignmentId_argsStandardSchemeFactory implements SchemeFactory {
      public checkAssignmentId_argsStandardScheme getScheme() {
        return new checkAssignmentId_argsStandardScheme();
      }
    }

    private static class checkAssignmentId_argsStandardScheme extends StandardScheme<checkAssignmentId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAssignmentId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAssignmentId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAssignmentId_argsTupleSchemeFactory implements SchemeFactory {
      public checkAssignmentId_argsTupleScheme getScheme() {
        return new checkAssignmentId_argsTupleScheme();
      }
    }

    private static class checkAssignmentId_argsTupleScheme extends TupleScheme<checkAssignmentId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
      }
    }

  }

  public static class checkAssignmentId_result implements org.apache.thrift.TBase<checkAssignmentId_result, checkAssignmentId_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkAssignmentId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkAssignmentId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkAssignmentId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkAssignmentId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAssignmentId_result.class, metaDataMap);
    }

    public checkAssignmentId_result() {
    }

    public checkAssignmentId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkAssignmentId_result(checkAssignmentId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkAssignmentId_result deepCopy() {
      return new checkAssignmentId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkAssignmentId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkAssignmentId_result)
        return this.equals((checkAssignmentId_result)that);
      return false;
    }

    public boolean equals(checkAssignmentId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkAssignmentId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkAssignmentId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkAssignmentId_resultStandardSchemeFactory implements SchemeFactory {
      public checkAssignmentId_resultStandardScheme getScheme() {
        return new checkAssignmentId_resultStandardScheme();
      }
    }

    private static class checkAssignmentId_resultStandardScheme extends StandardScheme<checkAssignmentId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkAssignmentId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkAssignmentId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkAssignmentId_resultTupleSchemeFactory implements SchemeFactory {
      public checkAssignmentId_resultTupleScheme getScheme() {
        return new checkAssignmentId_resultTupleScheme();
      }
    }

    private static class checkAssignmentId_resultTupleScheme extends TupleScheme<checkAssignmentId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkAssignmentId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getQuestionAnswerDetails_args implements org.apache.thrift.TBase<getQuestionAnswerDetails_args, getQuestionAnswerDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionAnswerDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionAnswerDetails_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestionAnswerDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestionAnswerDetails_argsTupleSchemeFactory());
    }

    public String paperCode; // required
    public int roundId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode"),
      ROUND_ID((short)2, "roundId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          case 2: // ROUND_ID
            return ROUND_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUNDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionAnswerDetails_args.class, metaDataMap);
    }

    public getQuestionAnswerDetails_args() {
    }

    public getQuestionAnswerDetails_args(
      String paperCode,
      int roundId)
    {
      this();
      this.paperCode = paperCode;
      this.roundId = roundId;
      setRoundIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionAnswerDetails_args(getQuestionAnswerDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
      this.roundId = other.roundId;
    }

    public getQuestionAnswerDetails_args deepCopy() {
      return new getQuestionAnswerDetails_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
      setRoundIdIsSet(false);
      this.roundId = 0;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public getQuestionAnswerDetails_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public int getRoundId() {
      return this.roundId;
    }

    public getQuestionAnswerDetails_args setRoundId(int roundId) {
      this.roundId = roundId;
      setRoundIdIsSet(true);
      return this;
    }

    public void unsetRoundId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    public void setRoundIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      case ROUND_ID:
        if (value == null) {
          unsetRoundId();
        } else {
          setRoundId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      case ROUND_ID:
        return getRoundId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      case ROUND_ID:
        return isSetRoundId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionAnswerDetails_args)
        return this.equals((getQuestionAnswerDetails_args)that);
      return false;
    }

    public boolean equals(getQuestionAnswerDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      boolean this_present_roundId = true;
      boolean that_present_roundId = true;
      if (this_present_roundId || that_present_roundId) {
        if (!(this_present_roundId && that_present_roundId))
          return false;
        if (this.roundId != that.roundId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      boolean present_roundId = true;
      list.add(present_roundId);
      if (present_roundId)
        list.add(roundId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQuestionAnswerDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestionAnswerDetails_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roundId:");
      sb.append(this.roundId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionAnswerDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getQuestionAnswerDetails_argsStandardScheme getScheme() {
        return new getQuestionAnswerDetails_argsStandardScheme();
      }
    }

    private static class getQuestionAnswerDetails_argsStandardScheme extends StandardScheme<getQuestionAnswerDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionAnswerDetails_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROUND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roundId = iprot.readI32();
                struct.setRoundIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionAnswerDetails_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
        oprot.writeI32(struct.roundId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionAnswerDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getQuestionAnswerDetails_argsTupleScheme getScheme() {
        return new getQuestionAnswerDetails_argsTupleScheme();
      }
    }

    private static class getQuestionAnswerDetails_argsTupleScheme extends TupleScheme<getQuestionAnswerDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerDetails_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        if (struct.isSetRoundId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
        if (struct.isSetRoundId()) {
          oprot.writeI32(struct.roundId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerDetails_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roundId = iprot.readI32();
          struct.setRoundIdIsSet(true);
        }
      }
    }

  }

  public static class getQuestionAnswerDetails_result implements org.apache.thrift.TBase<getQuestionAnswerDetails_result, getQuestionAnswerDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionAnswerDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionAnswerDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestionAnswerDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestionAnswerDetails_resultTupleSchemeFactory());
    }

    public List<QuestionAnswerDetail> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuestionAnswerDetail.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionAnswerDetails_result.class, metaDataMap);
    }

    public getQuestionAnswerDetails_result() {
    }

    public getQuestionAnswerDetails_result(
      List<QuestionAnswerDetail> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionAnswerDetails_result(getQuestionAnswerDetails_result other) {
      if (other.isSetSuccess()) {
        List<QuestionAnswerDetail> __this__success = new ArrayList<QuestionAnswerDetail>(other.success.size());
        for (QuestionAnswerDetail other_element : other.success) {
          __this__success.add(new QuestionAnswerDetail(other_element));
        }
        this.success = __this__success;
      }
    }

    public getQuestionAnswerDetails_result deepCopy() {
      return new getQuestionAnswerDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<QuestionAnswerDetail> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(QuestionAnswerDetail elem) {
      if (this.success == null) {
        this.success = new ArrayList<QuestionAnswerDetail>();
      }
      this.success.add(elem);
    }

    public List<QuestionAnswerDetail> getSuccess() {
      return this.success;
    }

    public getQuestionAnswerDetails_result setSuccess(List<QuestionAnswerDetail> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<QuestionAnswerDetail>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionAnswerDetails_result)
        return this.equals((getQuestionAnswerDetails_result)that);
      return false;
    }

    public boolean equals(getQuestionAnswerDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQuestionAnswerDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestionAnswerDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionAnswerDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getQuestionAnswerDetails_resultStandardScheme getScheme() {
        return new getQuestionAnswerDetails_resultStandardScheme();
      }
    }

    private static class getQuestionAnswerDetails_resultStandardScheme extends StandardScheme<getQuestionAnswerDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionAnswerDetails_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<QuestionAnswerDetail>(_list56.size);
                  QuestionAnswerDetail _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new QuestionAnswerDetail();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionAnswerDetails_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (QuestionAnswerDetail _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionAnswerDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getQuestionAnswerDetails_resultTupleScheme getScheme() {
        return new getQuestionAnswerDetails_resultTupleScheme();
      }
    }

    private static class getQuestionAnswerDetails_resultTupleScheme extends TupleScheme<getQuestionAnswerDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerDetails_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (QuestionAnswerDetail _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerDetails_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<QuestionAnswerDetail>(_list61.size);
            QuestionAnswerDetail _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new QuestionAnswerDetail();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getQuestionAnswerTotal_args implements org.apache.thrift.TBase<getQuestionAnswerTotal_args, getQuestionAnswerTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionAnswerTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionAnswerTotal_args");

    private static final org.apache.thrift.protocol.TField PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestionAnswerTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestionAnswerTotal_argsTupleSchemeFactory());
    }

    public String paperCode; // required
    public int roundId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAPER_CODE((short)1, "paperCode"),
      ROUND_ID((short)2, "roundId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAPER_CODE
            return PAPER_CODE;
          case 2: // ROUND_ID
            return ROUND_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUNDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("paperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionAnswerTotal_args.class, metaDataMap);
    }

    public getQuestionAnswerTotal_args() {
    }

    public getQuestionAnswerTotal_args(
      String paperCode,
      int roundId)
    {
      this();
      this.paperCode = paperCode;
      this.roundId = roundId;
      setRoundIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionAnswerTotal_args(getQuestionAnswerTotal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPaperCode()) {
        this.paperCode = other.paperCode;
      }
      this.roundId = other.roundId;
    }

    public getQuestionAnswerTotal_args deepCopy() {
      return new getQuestionAnswerTotal_args(this);
    }

    @Override
    public void clear() {
      this.paperCode = null;
      setRoundIdIsSet(false);
      this.roundId = 0;
    }

    public String getPaperCode() {
      return this.paperCode;
    }

    public getQuestionAnswerTotal_args setPaperCode(String paperCode) {
      this.paperCode = paperCode;
      return this;
    }

    public void unsetPaperCode() {
      this.paperCode = null;
    }

    /** Returns true if field paperCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPaperCode() {
      return this.paperCode != null;
    }

    public void setPaperCodeIsSet(boolean value) {
      if (!value) {
        this.paperCode = null;
      }
    }

    public int getRoundId() {
      return this.roundId;
    }

    public getQuestionAnswerTotal_args setRoundId(int roundId) {
      this.roundId = roundId;
      setRoundIdIsSet(true);
      return this;
    }

    public void unsetRoundId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    public void setRoundIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAPER_CODE:
        if (value == null) {
          unsetPaperCode();
        } else {
          setPaperCode((String)value);
        }
        break;

      case ROUND_ID:
        if (value == null) {
          unsetRoundId();
        } else {
          setRoundId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAPER_CODE:
        return getPaperCode();

      case ROUND_ID:
        return getRoundId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAPER_CODE:
        return isSetPaperCode();
      case ROUND_ID:
        return isSetRoundId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionAnswerTotal_args)
        return this.equals((getQuestionAnswerTotal_args)that);
      return false;
    }

    public boolean equals(getQuestionAnswerTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_paperCode = true && this.isSetPaperCode();
      boolean that_present_paperCode = true && that.isSetPaperCode();
      if (this_present_paperCode || that_present_paperCode) {
        if (!(this_present_paperCode && that_present_paperCode))
          return false;
        if (!this.paperCode.equals(that.paperCode))
          return false;
      }

      boolean this_present_roundId = true;
      boolean that_present_roundId = true;
      if (this_present_roundId || that_present_roundId) {
        if (!(this_present_roundId && that_present_roundId))
          return false;
        if (this.roundId != that.roundId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paperCode = true && (isSetPaperCode());
      list.add(present_paperCode);
      if (present_paperCode)
        list.add(paperCode);

      boolean present_roundId = true;
      list.add(present_roundId);
      if (present_roundId)
        list.add(roundId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQuestionAnswerTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaperCode()).compareTo(other.isSetPaperCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaperCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperCode, other.paperCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestionAnswerTotal_args(");
      boolean first = true;

      sb.append("paperCode:");
      if (this.paperCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paperCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roundId:");
      sb.append(this.roundId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionAnswerTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getQuestionAnswerTotal_argsStandardScheme getScheme() {
        return new getQuestionAnswerTotal_argsStandardScheme();
      }
    }

    private static class getQuestionAnswerTotal_argsStandardScheme extends StandardScheme<getQuestionAnswerTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionAnswerTotal_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAPER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paperCode = iprot.readString();
                struct.setPaperCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROUND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roundId = iprot.readI32();
                struct.setRoundIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionAnswerTotal_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paperCode != null) {
          oprot.writeFieldBegin(PAPER_CODE_FIELD_DESC);
          oprot.writeString(struct.paperCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
        oprot.writeI32(struct.roundId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionAnswerTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getQuestionAnswerTotal_argsTupleScheme getScheme() {
        return new getQuestionAnswerTotal_argsTupleScheme();
      }
    }

    private static class getQuestionAnswerTotal_argsTupleScheme extends TupleScheme<getQuestionAnswerTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerTotal_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaperCode()) {
          optionals.set(0);
        }
        if (struct.isSetRoundId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPaperCode()) {
          oprot.writeString(struct.paperCode);
        }
        if (struct.isSetRoundId()) {
          oprot.writeI32(struct.roundId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerTotal_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.paperCode = iprot.readString();
          struct.setPaperCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roundId = iprot.readI32();
          struct.setRoundIdIsSet(true);
        }
      }
    }

  }

  public static class getQuestionAnswerTotal_result implements org.apache.thrift.TBase<getQuestionAnswerTotal_result, getQuestionAnswerTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionAnswerTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionAnswerTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQuestionAnswerTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQuestionAnswerTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionAnswerTotal_result.class, metaDataMap);
    }

    public getQuestionAnswerTotal_result() {
    }

    public getQuestionAnswerTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionAnswerTotal_result(getQuestionAnswerTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getQuestionAnswerTotal_result deepCopy() {
      return new getQuestionAnswerTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getQuestionAnswerTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionAnswerTotal_result)
        return this.equals((getQuestionAnswerTotal_result)that);
      return false;
    }

    public boolean equals(getQuestionAnswerTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQuestionAnswerTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQuestionAnswerTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionAnswerTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getQuestionAnswerTotal_resultStandardScheme getScheme() {
        return new getQuestionAnswerTotal_resultStandardScheme();
      }
    }

    private static class getQuestionAnswerTotal_resultStandardScheme extends StandardScheme<getQuestionAnswerTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionAnswerTotal_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionAnswerTotal_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionAnswerTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getQuestionAnswerTotal_resultTupleScheme getScheme() {
        return new getQuestionAnswerTotal_resultTupleScheme();
      }
    }

    private static class getQuestionAnswerTotal_resultTupleScheme extends TupleScheme<getQuestionAnswerTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerTotal_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionAnswerTotal_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRoundStatistics_args implements org.apache.thrift.TBase<getRoundStatistics_args, getRoundStatistics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoundStatistics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoundStatistics_args");

    private static final org.apache.thrift.protocol.TField ROUND_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("roundIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoundStatistics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoundStatistics_argsTupleSchemeFactory());
    }

    public List<Integer> roundIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUND_IDS((short)1, "roundIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUND_IDS
            return ROUND_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUND_IDS, new org.apache.thrift.meta_data.FieldMetaData("roundIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoundStatistics_args.class, metaDataMap);
    }

    public getRoundStatistics_args() {
    }

    public getRoundStatistics_args(
      List<Integer> roundIds)
    {
      this();
      this.roundIds = roundIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoundStatistics_args(getRoundStatistics_args other) {
      if (other.isSetRoundIds()) {
        List<Integer> __this__roundIds = new ArrayList<Integer>(other.roundIds);
        this.roundIds = __this__roundIds;
      }
    }

    public getRoundStatistics_args deepCopy() {
      return new getRoundStatistics_args(this);
    }

    @Override
    public void clear() {
      this.roundIds = null;
    }

    public int getRoundIdsSize() {
      return (this.roundIds == null) ? 0 : this.roundIds.size();
    }

    public java.util.Iterator<Integer> getRoundIdsIterator() {
      return (this.roundIds == null) ? null : this.roundIds.iterator();
    }

    public void addToRoundIds(int elem) {
      if (this.roundIds == null) {
        this.roundIds = new ArrayList<Integer>();
      }
      this.roundIds.add(elem);
    }

    public List<Integer> getRoundIds() {
      return this.roundIds;
    }

    public getRoundStatistics_args setRoundIds(List<Integer> roundIds) {
      this.roundIds = roundIds;
      return this;
    }

    public void unsetRoundIds() {
      this.roundIds = null;
    }

    /** Returns true if field roundIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundIds() {
      return this.roundIds != null;
    }

    public void setRoundIdsIsSet(boolean value) {
      if (!value) {
        this.roundIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUND_IDS:
        if (value == null) {
          unsetRoundIds();
        } else {
          setRoundIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUND_IDS:
        return getRoundIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUND_IDS:
        return isSetRoundIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoundStatistics_args)
        return this.equals((getRoundStatistics_args)that);
      return false;
    }

    public boolean equals(getRoundStatistics_args that) {
      if (that == null)
        return false;

      boolean this_present_roundIds = true && this.isSetRoundIds();
      boolean that_present_roundIds = true && that.isSetRoundIds();
      if (this_present_roundIds || that_present_roundIds) {
        if (!(this_present_roundIds && that_present_roundIds))
          return false;
        if (!this.roundIds.equals(that.roundIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roundIds = true && (isSetRoundIds());
      list.add(present_roundIds);
      if (present_roundIds)
        list.add(roundIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoundStatistics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoundIds()).compareTo(other.isSetRoundIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundIds, other.roundIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoundStatistics_args(");
      boolean first = true;

      sb.append("roundIds:");
      if (this.roundIds == null) {
        sb.append("null");
      } else {
        sb.append(this.roundIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoundStatistics_argsStandardSchemeFactory implements SchemeFactory {
      public getRoundStatistics_argsStandardScheme getScheme() {
        return new getRoundStatistics_argsStandardScheme();
      }
    }

    private static class getRoundStatistics_argsStandardScheme extends StandardScheme<getRoundStatistics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoundStatistics_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUND_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.roundIds = new ArrayList<Integer>(_list64.size);
                  int _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readI32();
                    struct.roundIds.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setRoundIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoundStatistics_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roundIds != null) {
          oprot.writeFieldBegin(ROUND_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.roundIds.size()));
            for (int _iter67 : struct.roundIds)
            {
              oprot.writeI32(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoundStatistics_argsTupleSchemeFactory implements SchemeFactory {
      public getRoundStatistics_argsTupleScheme getScheme() {
        return new getRoundStatistics_argsTupleScheme();
      }
    }

    private static class getRoundStatistics_argsTupleScheme extends TupleScheme<getRoundStatistics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoundStatistics_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoundIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoundIds()) {
          {
            oprot.writeI32(struct.roundIds.size());
            for (int _iter68 : struct.roundIds)
            {
              oprot.writeI32(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoundStatistics_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.roundIds = new ArrayList<Integer>(_list69.size);
            int _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readI32();
              struct.roundIds.add(_elem70);
            }
          }
          struct.setRoundIdsIsSet(true);
        }
      }
    }

  }

  public static class getRoundStatistics_result implements org.apache.thrift.TBase<getRoundStatistics_result, getRoundStatistics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoundStatistics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoundStatistics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoundStatistics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoundStatistics_resultTupleSchemeFactory());
    }

    public List<RoundStatistics> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoundStatistics.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoundStatistics_result.class, metaDataMap);
    }

    public getRoundStatistics_result() {
    }

    public getRoundStatistics_result(
      List<RoundStatistics> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoundStatistics_result(getRoundStatistics_result other) {
      if (other.isSetSuccess()) {
        List<RoundStatistics> __this__success = new ArrayList<RoundStatistics>(other.success.size());
        for (RoundStatistics other_element : other.success) {
          __this__success.add(new RoundStatistics(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoundStatistics_result deepCopy() {
      return new getRoundStatistics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RoundStatistics> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoundStatistics elem) {
      if (this.success == null) {
        this.success = new ArrayList<RoundStatistics>();
      }
      this.success.add(elem);
    }

    public List<RoundStatistics> getSuccess() {
      return this.success;
    }

    public getRoundStatistics_result setSuccess(List<RoundStatistics> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RoundStatistics>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoundStatistics_result)
        return this.equals((getRoundStatistics_result)that);
      return false;
    }

    public boolean equals(getRoundStatistics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoundStatistics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoundStatistics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoundStatistics_resultStandardSchemeFactory implements SchemeFactory {
      public getRoundStatistics_resultStandardScheme getScheme() {
        return new getRoundStatistics_resultStandardScheme();
      }
    }

    private static class getRoundStatistics_resultStandardScheme extends StandardScheme<getRoundStatistics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoundStatistics_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<RoundStatistics>(_list72.size);
                  RoundStatistics _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new RoundStatistics();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoundStatistics_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoundStatistics _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoundStatistics_resultTupleSchemeFactory implements SchemeFactory {
      public getRoundStatistics_resultTupleScheme getScheme() {
        return new getRoundStatistics_resultTupleScheme();
      }
    }

    private static class getRoundStatistics_resultTupleScheme extends TupleScheme<getRoundStatistics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoundStatistics_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoundStatistics _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoundStatistics_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RoundStatistics>(_list77.size);
            RoundStatistics _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new RoundStatistics();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPaperStudentCorrectRate_args implements org.apache.thrift.TBase<getPaperStudentCorrectRate_args, getPaperStudentCorrectRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperStudentCorrectRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperStudentCorrectRate_args");

    private static final org.apache.thrift.protocol.TField UNIT_REPORT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("unitReportCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STU_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stuIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperStudentCorrectRate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperStudentCorrectRate_argsTupleSchemeFactory());
    }

    public UnitReportCondition unitReportCondition; // required
    public List<Integer> stuIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIT_REPORT_CONDITION((short)1, "unitReportCondition"),
      STU_IDS((short)2, "stuIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIT_REPORT_CONDITION
            return UNIT_REPORT_CONDITION;
          case 2: // STU_IDS
            return STU_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIT_REPORT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("unitReportCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitReportCondition.class)));
      tmpMap.put(_Fields.STU_IDS, new org.apache.thrift.meta_data.FieldMetaData("stuIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperStudentCorrectRate_args.class, metaDataMap);
    }

    public getPaperStudentCorrectRate_args() {
    }

    public getPaperStudentCorrectRate_args(
      UnitReportCondition unitReportCondition,
      List<Integer> stuIds)
    {
      this();
      this.unitReportCondition = unitReportCondition;
      this.stuIds = stuIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperStudentCorrectRate_args(getPaperStudentCorrectRate_args other) {
      if (other.isSetUnitReportCondition()) {
        this.unitReportCondition = new UnitReportCondition(other.unitReportCondition);
      }
      if (other.isSetStuIds()) {
        List<Integer> __this__stuIds = new ArrayList<Integer>(other.stuIds);
        this.stuIds = __this__stuIds;
      }
    }

    public getPaperStudentCorrectRate_args deepCopy() {
      return new getPaperStudentCorrectRate_args(this);
    }

    @Override
    public void clear() {
      this.unitReportCondition = null;
      this.stuIds = null;
    }

    public UnitReportCondition getUnitReportCondition() {
      return this.unitReportCondition;
    }

    public getPaperStudentCorrectRate_args setUnitReportCondition(UnitReportCondition unitReportCondition) {
      this.unitReportCondition = unitReportCondition;
      return this;
    }

    public void unsetUnitReportCondition() {
      this.unitReportCondition = null;
    }

    /** Returns true if field unitReportCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitReportCondition() {
      return this.unitReportCondition != null;
    }

    public void setUnitReportConditionIsSet(boolean value) {
      if (!value) {
        this.unitReportCondition = null;
      }
    }

    public int getStuIdsSize() {
      return (this.stuIds == null) ? 0 : this.stuIds.size();
    }

    public java.util.Iterator<Integer> getStuIdsIterator() {
      return (this.stuIds == null) ? null : this.stuIds.iterator();
    }

    public void addToStuIds(int elem) {
      if (this.stuIds == null) {
        this.stuIds = new ArrayList<Integer>();
      }
      this.stuIds.add(elem);
    }

    public List<Integer> getStuIds() {
      return this.stuIds;
    }

    public getPaperStudentCorrectRate_args setStuIds(List<Integer> stuIds) {
      this.stuIds = stuIds;
      return this;
    }

    public void unsetStuIds() {
      this.stuIds = null;
    }

    /** Returns true if field stuIds is set (has been assigned a value) and false otherwise */
    public boolean isSetStuIds() {
      return this.stuIds != null;
    }

    public void setStuIdsIsSet(boolean value) {
      if (!value) {
        this.stuIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNIT_REPORT_CONDITION:
        if (value == null) {
          unsetUnitReportCondition();
        } else {
          setUnitReportCondition((UnitReportCondition)value);
        }
        break;

      case STU_IDS:
        if (value == null) {
          unsetStuIds();
        } else {
          setStuIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIT_REPORT_CONDITION:
        return getUnitReportCondition();

      case STU_IDS:
        return getStuIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNIT_REPORT_CONDITION:
        return isSetUnitReportCondition();
      case STU_IDS:
        return isSetStuIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperStudentCorrectRate_args)
        return this.equals((getPaperStudentCorrectRate_args)that);
      return false;
    }

    public boolean equals(getPaperStudentCorrectRate_args that) {
      if (that == null)
        return false;

      boolean this_present_unitReportCondition = true && this.isSetUnitReportCondition();
      boolean that_present_unitReportCondition = true && that.isSetUnitReportCondition();
      if (this_present_unitReportCondition || that_present_unitReportCondition) {
        if (!(this_present_unitReportCondition && that_present_unitReportCondition))
          return false;
        if (!this.unitReportCondition.equals(that.unitReportCondition))
          return false;
      }

      boolean this_present_stuIds = true && this.isSetStuIds();
      boolean that_present_stuIds = true && that.isSetStuIds();
      if (this_present_stuIds || that_present_stuIds) {
        if (!(this_present_stuIds && that_present_stuIds))
          return false;
        if (!this.stuIds.equals(that.stuIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unitReportCondition = true && (isSetUnitReportCondition());
      list.add(present_unitReportCondition);
      if (present_unitReportCondition)
        list.add(unitReportCondition);

      boolean present_stuIds = true && (isSetStuIds());
      list.add(present_stuIds);
      if (present_stuIds)
        list.add(stuIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperStudentCorrectRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnitReportCondition()).compareTo(other.isSetUnitReportCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitReportCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitReportCondition, other.unitReportCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStuIds()).compareTo(other.isSetStuIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuIds, other.stuIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperStudentCorrectRate_args(");
      boolean first = true;

      sb.append("unitReportCondition:");
      if (this.unitReportCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.unitReportCondition);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stuIds:");
      if (this.stuIds == null) {
        sb.append("null");
      } else {
        sb.append(this.stuIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (unitReportCondition != null) {
        unitReportCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperStudentCorrectRate_argsStandardSchemeFactory implements SchemeFactory {
      public getPaperStudentCorrectRate_argsStandardScheme getScheme() {
        return new getPaperStudentCorrectRate_argsStandardScheme();
      }
    }

    private static class getPaperStudentCorrectRate_argsStandardScheme extends StandardScheme<getPaperStudentCorrectRate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperStudentCorrectRate_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIT_REPORT_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unitReportCondition = new UnitReportCondition();
                struct.unitReportCondition.read(iprot);
                struct.setUnitReportConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STU_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.stuIds = new ArrayList<Integer>(_list80.size);
                  int _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readI32();
                    struct.stuIds.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setStuIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperStudentCorrectRate_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unitReportCondition != null) {
          oprot.writeFieldBegin(UNIT_REPORT_CONDITION_FIELD_DESC);
          struct.unitReportCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.stuIds != null) {
          oprot.writeFieldBegin(STU_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.stuIds.size()));
            for (int _iter83 : struct.stuIds)
            {
              oprot.writeI32(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperStudentCorrectRate_argsTupleSchemeFactory implements SchemeFactory {
      public getPaperStudentCorrectRate_argsTupleScheme getScheme() {
        return new getPaperStudentCorrectRate_argsTupleScheme();
      }
    }

    private static class getPaperStudentCorrectRate_argsTupleScheme extends TupleScheme<getPaperStudentCorrectRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperStudentCorrectRate_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnitReportCondition()) {
          optionals.set(0);
        }
        if (struct.isSetStuIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUnitReportCondition()) {
          struct.unitReportCondition.write(oprot);
        }
        if (struct.isSetStuIds()) {
          {
            oprot.writeI32(struct.stuIds.size());
            for (int _iter84 : struct.stuIds)
            {
              oprot.writeI32(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperStudentCorrectRate_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.unitReportCondition = new UnitReportCondition();
          struct.unitReportCondition.read(iprot);
          struct.setUnitReportConditionIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.stuIds = new ArrayList<Integer>(_list85.size);
            int _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readI32();
              struct.stuIds.add(_elem86);
            }
          }
          struct.setStuIdsIsSet(true);
        }
      }
    }

  }

  public static class getPaperStudentCorrectRate_result implements org.apache.thrift.TBase<getPaperStudentCorrectRate_result, getPaperStudentCorrectRate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaperStudentCorrectRate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaperStudentCorrectRate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPaperStudentCorrectRate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPaperStudentCorrectRate_resultTupleSchemeFactory());
    }

    public List<QuizzesOrWorkUserCorrectRate> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuizzesOrWorkUserCorrectRate.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaperStudentCorrectRate_result.class, metaDataMap);
    }

    public getPaperStudentCorrectRate_result() {
    }

    public getPaperStudentCorrectRate_result(
      List<QuizzesOrWorkUserCorrectRate> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaperStudentCorrectRate_result(getPaperStudentCorrectRate_result other) {
      if (other.isSetSuccess()) {
        List<QuizzesOrWorkUserCorrectRate> __this__success = new ArrayList<QuizzesOrWorkUserCorrectRate>(other.success.size());
        for (QuizzesOrWorkUserCorrectRate other_element : other.success) {
          __this__success.add(new QuizzesOrWorkUserCorrectRate(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPaperStudentCorrectRate_result deepCopy() {
      return new getPaperStudentCorrectRate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<QuizzesOrWorkUserCorrectRate> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(QuizzesOrWorkUserCorrectRate elem) {
      if (this.success == null) {
        this.success = new ArrayList<QuizzesOrWorkUserCorrectRate>();
      }
      this.success.add(elem);
    }

    public List<QuizzesOrWorkUserCorrectRate> getSuccess() {
      return this.success;
    }

    public getPaperStudentCorrectRate_result setSuccess(List<QuizzesOrWorkUserCorrectRate> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<QuizzesOrWorkUserCorrectRate>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaperStudentCorrectRate_result)
        return this.equals((getPaperStudentCorrectRate_result)that);
      return false;
    }

    public boolean equals(getPaperStudentCorrectRate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPaperStudentCorrectRate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPaperStudentCorrectRate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaperStudentCorrectRate_resultStandardSchemeFactory implements SchemeFactory {
      public getPaperStudentCorrectRate_resultStandardScheme getScheme() {
        return new getPaperStudentCorrectRate_resultStandardScheme();
      }
    }

    private static class getPaperStudentCorrectRate_resultStandardScheme extends StandardScheme<getPaperStudentCorrectRate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaperStudentCorrectRate_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<QuizzesOrWorkUserCorrectRate>(_list88.size);
                  QuizzesOrWorkUserCorrectRate _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new QuizzesOrWorkUserCorrectRate();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaperStudentCorrectRate_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (QuizzesOrWorkUserCorrectRate _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaperStudentCorrectRate_resultTupleSchemeFactory implements SchemeFactory {
      public getPaperStudentCorrectRate_resultTupleScheme getScheme() {
        return new getPaperStudentCorrectRate_resultTupleScheme();
      }
    }

    private static class getPaperStudentCorrectRate_resultTupleScheme extends TupleScheme<getPaperStudentCorrectRate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaperStudentCorrectRate_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (QuizzesOrWorkUserCorrectRate _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaperStudentCorrectRate_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<QuizzesOrWorkUserCorrectRate>(_list93.size);
            QuizzesOrWorkUserCorrectRate _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new QuizzesOrWorkUserCorrectRate();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsByUnitIds_args implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsByUnitIds_args, retrieveQuizzesAndAssignmentsByUnitIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsByUnitIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsByUnitIds_args");

    private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TEACH_UNIT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("teachUnitIds", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsByUnitIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsByUnitIds_argsTupleSchemeFactory());
    }

    public int roundId; // required
    public String teachUnitIds; // required
    public int teacherId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUND_ID((short)1, "roundId"),
      TEACH_UNIT_IDS((short)2, "teachUnitIds"),
      TEACHER_ID((short)3, "teacherId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUND_ID
            return ROUND_ID;
          case 2: // TEACH_UNIT_IDS
            return TEACH_UNIT_IDS;
          case 3: // TEACHER_ID
            return TEACHER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ROUNDID_ISSET_ID = 0;
    private static final int __TEACHERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEACH_UNIT_IDS, new org.apache.thrift.meta_data.FieldMetaData("teachUnitIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsByUnitIds_args.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args() {
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args(
      int roundId,
      String teachUnitIds,
      int teacherId)
    {
      this();
      this.roundId = roundId;
      setRoundIdIsSet(true);
      this.teachUnitIds = teachUnitIds;
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsByUnitIds_args(retrieveQuizzesAndAssignmentsByUnitIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.roundId = other.roundId;
      if (other.isSetTeachUnitIds()) {
        this.teachUnitIds = other.teachUnitIds;
      }
      this.teacherId = other.teacherId;
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args deepCopy() {
      return new retrieveQuizzesAndAssignmentsByUnitIds_args(this);
    }

    @Override
    public void clear() {
      setRoundIdIsSet(false);
      this.roundId = 0;
      this.teachUnitIds = null;
      setTeacherIdIsSet(false);
      this.teacherId = 0;
    }

    public int getRoundId() {
      return this.roundId;
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args setRoundId(int roundId) {
      this.roundId = roundId;
      setRoundIdIsSet(true);
      return this;
    }

    public void unsetRoundId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundId() {
      return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
    }

    public void setRoundIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
    }

    public String getTeachUnitIds() {
      return this.teachUnitIds;
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args setTeachUnitIds(String teachUnitIds) {
      this.teachUnitIds = teachUnitIds;
      return this;
    }

    public void unsetTeachUnitIds() {
      this.teachUnitIds = null;
    }

    /** Returns true if field teachUnitIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTeachUnitIds() {
      return this.teachUnitIds != null;
    }

    public void setTeachUnitIdsIsSet(boolean value) {
      if (!value) {
        this.teachUnitIds = null;
      }
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUND_ID:
        if (value == null) {
          unsetRoundId();
        } else {
          setRoundId((Integer)value);
        }
        break;

      case TEACH_UNIT_IDS:
        if (value == null) {
          unsetTeachUnitIds();
        } else {
          setTeachUnitIds((String)value);
        }
        break;

      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUND_ID:
        return getRoundId();

      case TEACH_UNIT_IDS:
        return getTeachUnitIds();

      case TEACHER_ID:
        return getTeacherId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUND_ID:
        return isSetRoundId();
      case TEACH_UNIT_IDS:
        return isSetTeachUnitIds();
      case TEACHER_ID:
        return isSetTeacherId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsByUnitIds_args)
        return this.equals((retrieveQuizzesAndAssignmentsByUnitIds_args)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsByUnitIds_args that) {
      if (that == null)
        return false;

      boolean this_present_roundId = true;
      boolean that_present_roundId = true;
      if (this_present_roundId || that_present_roundId) {
        if (!(this_present_roundId && that_present_roundId))
          return false;
        if (this.roundId != that.roundId)
          return false;
      }

      boolean this_present_teachUnitIds = true && this.isSetTeachUnitIds();
      boolean that_present_teachUnitIds = true && that.isSetTeachUnitIds();
      if (this_present_teachUnitIds || that_present_teachUnitIds) {
        if (!(this_present_teachUnitIds && that_present_teachUnitIds))
          return false;
        if (!this.teachUnitIds.equals(that.teachUnitIds))
          return false;
      }

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roundId = true;
      list.add(present_roundId);
      if (present_roundId)
        list.add(roundId);

      boolean present_teachUnitIds = true && (isSetTeachUnitIds());
      list.add(present_teachUnitIds);
      if (present_teachUnitIds)
        list.add(teachUnitIds);

      boolean present_teacherId = true;
      list.add(present_teacherId);
      if (present_teacherId)
        list.add(teacherId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsByUnitIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTeachUnitIds()).compareTo(other.isSetTeachUnitIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeachUnitIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachUnitIds, other.teachUnitIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsByUnitIds_args(");
      boolean first = true;

      sb.append("roundId:");
      sb.append(this.roundId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("teachUnitIds:");
      if (this.teachUnitIds == null) {
        sb.append("null");
      } else {
        sb.append(this.teachUnitIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsByUnitIds_argsStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_argsStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_argsStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsByUnitIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsByUnitIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roundId = iprot.readI32();
                struct.setRoundIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEACH_UNIT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teachUnitIds = iprot.readString();
                struct.setTeachUnitIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsByUnitIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
        oprot.writeI32(struct.roundId);
        oprot.writeFieldEnd();
        if (struct.teachUnitIds != null) {
          oprot.writeFieldBegin(TEACH_UNIT_IDS_FIELD_DESC);
          oprot.writeString(struct.teachUnitIds);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsByUnitIds_argsTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_argsTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_argsTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsByUnitIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsByUnitIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoundId()) {
          optionals.set(0);
        }
        if (struct.isSetTeachUnitIds()) {
          optionals.set(1);
        }
        if (struct.isSetTeacherId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRoundId()) {
          oprot.writeI32(struct.roundId);
        }
        if (struct.isSetTeachUnitIds()) {
          oprot.writeString(struct.teachUnitIds);
        }
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsByUnitIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.roundId = iprot.readI32();
          struct.setRoundIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.teachUnitIds = iprot.readString();
          struct.setTeachUnitIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsByUnitIds_result implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsByUnitIds_result, retrieveQuizzesAndAssignmentsByUnitIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsByUnitIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsByUnitIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsByUnitIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsByUnitIds_resultTupleSchemeFactory());
    }

    public UnitsStatistic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitsStatistic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsByUnitIds_result.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_result() {
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_result(
      UnitsStatistic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsByUnitIds_result(retrieveQuizzesAndAssignmentsByUnitIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new UnitsStatistic(other.success);
      }
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_result deepCopy() {
      return new retrieveQuizzesAndAssignmentsByUnitIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UnitsStatistic getSuccess() {
      return this.success;
    }

    public retrieveQuizzesAndAssignmentsByUnitIds_result setSuccess(UnitsStatistic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UnitsStatistic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsByUnitIds_result)
        return this.equals((retrieveQuizzesAndAssignmentsByUnitIds_result)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsByUnitIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsByUnitIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsByUnitIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsByUnitIds_resultStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_resultStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_resultStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsByUnitIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsByUnitIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UnitsStatistic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsByUnitIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsByUnitIds_resultTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsByUnitIds_resultTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsByUnitIds_resultTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsByUnitIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsByUnitIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsByUnitIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UnitsStatistic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentListByUnitIds_args implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentListByUnitIds_args, retrieveQuizzesAndAssignmentListByUnitIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentListByUnitIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentListByUnitIds_args");

    private static final org.apache.thrift.protocol.TField UNITS_STATISTIC_CONDITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unitsStatisticConditionList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentListByUnitIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentListByUnitIds_argsTupleSchemeFactory());
    }

    public List<UnitsStatisticCondition> unitsStatisticConditionList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNITS_STATISTIC_CONDITION_LIST((short)1, "unitsStatisticConditionList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNITS_STATISTIC_CONDITION_LIST
            return UNITS_STATISTIC_CONDITION_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNITS_STATISTIC_CONDITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("unitsStatisticConditionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitsStatisticCondition.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentListByUnitIds_args.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_args() {
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_args(
      List<UnitsStatisticCondition> unitsStatisticConditionList)
    {
      this();
      this.unitsStatisticConditionList = unitsStatisticConditionList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentListByUnitIds_args(retrieveQuizzesAndAssignmentListByUnitIds_args other) {
      if (other.isSetUnitsStatisticConditionList()) {
        List<UnitsStatisticCondition> __this__unitsStatisticConditionList = new ArrayList<UnitsStatisticCondition>(other.unitsStatisticConditionList.size());
        for (UnitsStatisticCondition other_element : other.unitsStatisticConditionList) {
          __this__unitsStatisticConditionList.add(new UnitsStatisticCondition(other_element));
        }
        this.unitsStatisticConditionList = __this__unitsStatisticConditionList;
      }
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_args deepCopy() {
      return new retrieveQuizzesAndAssignmentListByUnitIds_args(this);
    }

    @Override
    public void clear() {
      this.unitsStatisticConditionList = null;
    }

    public int getUnitsStatisticConditionListSize() {
      return (this.unitsStatisticConditionList == null) ? 0 : this.unitsStatisticConditionList.size();
    }

    public java.util.Iterator<UnitsStatisticCondition> getUnitsStatisticConditionListIterator() {
      return (this.unitsStatisticConditionList == null) ? null : this.unitsStatisticConditionList.iterator();
    }

    public void addToUnitsStatisticConditionList(UnitsStatisticCondition elem) {
      if (this.unitsStatisticConditionList == null) {
        this.unitsStatisticConditionList = new ArrayList<UnitsStatisticCondition>();
      }
      this.unitsStatisticConditionList.add(elem);
    }

    public List<UnitsStatisticCondition> getUnitsStatisticConditionList() {
      return this.unitsStatisticConditionList;
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_args setUnitsStatisticConditionList(List<UnitsStatisticCondition> unitsStatisticConditionList) {
      this.unitsStatisticConditionList = unitsStatisticConditionList;
      return this;
    }

    public void unsetUnitsStatisticConditionList() {
      this.unitsStatisticConditionList = null;
    }

    /** Returns true if field unitsStatisticConditionList is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitsStatisticConditionList() {
      return this.unitsStatisticConditionList != null;
    }

    public void setUnitsStatisticConditionListIsSet(boolean value) {
      if (!value) {
        this.unitsStatisticConditionList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNITS_STATISTIC_CONDITION_LIST:
        if (value == null) {
          unsetUnitsStatisticConditionList();
        } else {
          setUnitsStatisticConditionList((List<UnitsStatisticCondition>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNITS_STATISTIC_CONDITION_LIST:
        return getUnitsStatisticConditionList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNITS_STATISTIC_CONDITION_LIST:
        return isSetUnitsStatisticConditionList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentListByUnitIds_args)
        return this.equals((retrieveQuizzesAndAssignmentListByUnitIds_args)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentListByUnitIds_args that) {
      if (that == null)
        return false;

      boolean this_present_unitsStatisticConditionList = true && this.isSetUnitsStatisticConditionList();
      boolean that_present_unitsStatisticConditionList = true && that.isSetUnitsStatisticConditionList();
      if (this_present_unitsStatisticConditionList || that_present_unitsStatisticConditionList) {
        if (!(this_present_unitsStatisticConditionList && that_present_unitsStatisticConditionList))
          return false;
        if (!this.unitsStatisticConditionList.equals(that.unitsStatisticConditionList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unitsStatisticConditionList = true && (isSetUnitsStatisticConditionList());
      list.add(present_unitsStatisticConditionList);
      if (present_unitsStatisticConditionList)
        list.add(unitsStatisticConditionList);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentListByUnitIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnitsStatisticConditionList()).compareTo(other.isSetUnitsStatisticConditionList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitsStatisticConditionList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitsStatisticConditionList, other.unitsStatisticConditionList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentListByUnitIds_args(");
      boolean first = true;

      sb.append("unitsStatisticConditionList:");
      if (this.unitsStatisticConditionList == null) {
        sb.append("null");
      } else {
        sb.append(this.unitsStatisticConditionList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentListByUnitIds_argsStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_argsStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_argsStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentListByUnitIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentListByUnitIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNITS_STATISTIC_CONDITION_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.unitsStatisticConditionList = new ArrayList<UnitsStatisticCondition>(_list96.size);
                  UnitsStatisticCondition _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new UnitsStatisticCondition();
                    _elem97.read(iprot);
                    struct.unitsStatisticConditionList.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setUnitsStatisticConditionListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentListByUnitIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unitsStatisticConditionList != null) {
          oprot.writeFieldBegin(UNITS_STATISTIC_CONDITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unitsStatisticConditionList.size()));
            for (UnitsStatisticCondition _iter99 : struct.unitsStatisticConditionList)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentListByUnitIds_argsTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_argsTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_argsTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentListByUnitIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentListByUnitIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnitsStatisticConditionList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnitsStatisticConditionList()) {
          {
            oprot.writeI32(struct.unitsStatisticConditionList.size());
            for (UnitsStatisticCondition _iter100 : struct.unitsStatisticConditionList)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentListByUnitIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.unitsStatisticConditionList = new ArrayList<UnitsStatisticCondition>(_list101.size);
            UnitsStatisticCondition _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new UnitsStatisticCondition();
              _elem102.read(iprot);
              struct.unitsStatisticConditionList.add(_elem102);
            }
          }
          struct.setUnitsStatisticConditionListIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentListByUnitIds_result implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentListByUnitIds_result, retrieveQuizzesAndAssignmentListByUnitIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentListByUnitIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentListByUnitIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentListByUnitIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentListByUnitIds_resultTupleSchemeFactory());
    }

    public Map<String,UnitsStatistic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitsStatistic.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentListByUnitIds_result.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_result() {
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_result(
      Map<String,UnitsStatistic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentListByUnitIds_result(retrieveQuizzesAndAssignmentListByUnitIds_result other) {
      if (other.isSetSuccess()) {
        Map<String,UnitsStatistic> __this__success = new HashMap<String,UnitsStatistic>(other.success.size());
        for (Map.Entry<String, UnitsStatistic> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          UnitsStatistic other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          UnitsStatistic __this__success_copy_value = new UnitsStatistic(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_result deepCopy() {
      return new retrieveQuizzesAndAssignmentListByUnitIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, UnitsStatistic val) {
      if (this.success == null) {
        this.success = new HashMap<String,UnitsStatistic>();
      }
      this.success.put(key, val);
    }

    public Map<String,UnitsStatistic> getSuccess() {
      return this.success;
    }

    public retrieveQuizzesAndAssignmentListByUnitIds_result setSuccess(Map<String,UnitsStatistic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,UnitsStatistic>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentListByUnitIds_result)
        return this.equals((retrieveQuizzesAndAssignmentListByUnitIds_result)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentListByUnitIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentListByUnitIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentListByUnitIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentListByUnitIds_resultStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_resultStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_resultStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentListByUnitIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentListByUnitIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                  struct.success = new HashMap<String,UnitsStatistic>(2*_map104.size);
                  String _key105;
                  UnitsStatistic _val106;
                  for (int _i107 = 0; _i107 < _map104.size; ++_i107)
                  {
                    _key105 = iprot.readString();
                    _val106 = new UnitsStatistic();
                    _val106.read(iprot);
                    struct.success.put(_key105, _val106);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentListByUnitIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, UnitsStatistic> _iter108 : struct.success.entrySet())
            {
              oprot.writeString(_iter108.getKey());
              _iter108.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentListByUnitIds_resultTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentListByUnitIds_resultTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentListByUnitIds_resultTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentListByUnitIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentListByUnitIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, UnitsStatistic> _iter109 : struct.success.entrySet())
            {
              oprot.writeString(_iter109.getKey());
              _iter109.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentListByUnitIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,UnitsStatistic>(2*_map110.size);
            String _key111;
            UnitsStatistic _val112;
            for (int _i113 = 0; _i113 < _map110.size; ++_i113)
            {
              _key111 = iprot.readString();
              _val112 = new UnitsStatistic();
              _val112.read(iprot);
              struct.success.put(_key111, _val112);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args");

    private static final org.apache.thrift.protocol.TField TEACH_UNIT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("teachUnitIds", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsTupleSchemeFactory());
    }

    public String teachUnitIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACH_UNIT_IDS((short)1, "teachUnitIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACH_UNIT_IDS
            return TEACH_UNIT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACH_UNIT_IDS, new org.apache.thrift.meta_data.FieldMetaData("teachUnitIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args() {
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args(
      String teachUnitIds)
    {
      this();
      this.teachUnitIds = teachUnitIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args other) {
      if (other.isSetTeachUnitIds()) {
        this.teachUnitIds = other.teachUnitIds;
      }
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args deepCopy() {
      return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args(this);
    }

    @Override
    public void clear() {
      this.teachUnitIds = null;
    }

    public String getTeachUnitIds() {
      return this.teachUnitIds;
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args setTeachUnitIds(String teachUnitIds) {
      this.teachUnitIds = teachUnitIds;
      return this;
    }

    public void unsetTeachUnitIds() {
      this.teachUnitIds = null;
    }

    /** Returns true if field teachUnitIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTeachUnitIds() {
      return this.teachUnitIds != null;
    }

    public void setTeachUnitIdsIsSet(boolean value) {
      if (!value) {
        this.teachUnitIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACH_UNIT_IDS:
        if (value == null) {
          unsetTeachUnitIds();
        } else {
          setTeachUnitIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACH_UNIT_IDS:
        return getTeachUnitIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACH_UNIT_IDS:
        return isSetTeachUnitIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args)
        return this.equals((retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args that) {
      if (that == null)
        return false;

      boolean this_present_teachUnitIds = true && this.isSetTeachUnitIds();
      boolean that_present_teachUnitIds = true && that.isSetTeachUnitIds();
      if (this_present_teachUnitIds || that_present_teachUnitIds) {
        if (!(this_present_teachUnitIds && that_present_teachUnitIds))
          return false;
        if (!this.teachUnitIds.equals(that.teachUnitIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teachUnitIds = true && (isSetTeachUnitIds());
      list.add(present_teachUnitIds);
      if (present_teachUnitIds)
        list.add(teachUnitIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeachUnitIds()).compareTo(other.isSetTeachUnitIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeachUnitIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachUnitIds, other.teachUnitIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args(");
      boolean first = true;

      sb.append("teachUnitIds:");
      if (this.teachUnitIds == null) {
        sb.append("null");
      } else {
        sb.append(this.teachUnitIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACH_UNIT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.teachUnitIds = iprot.readString();
                struct.setTeachUnitIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teachUnitIds != null) {
          oprot.writeFieldBegin(TEACH_UNIT_IDS_FIELD_DESC);
          oprot.writeString(struct.teachUnitIds);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_argsTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeachUnitIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeachUnitIds()) {
          oprot.writeString(struct.teachUnitIds);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teachUnitIds = iprot.readString();
          struct.setTeachUnitIdsIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultTupleSchemeFactory());
    }

    public UnitsCorrectRateStatistic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitsCorrectRateStatistic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result() {
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result(
      UnitsCorrectRateStatistic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new UnitsCorrectRateStatistic(other.success);
      }
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result deepCopy() {
      return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UnitsCorrectRateStatistic getSuccess() {
      return this.success;
    }

    public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result setSuccess(UnitsCorrectRateStatistic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UnitsCorrectRateStatistic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result)
        return this.equals((retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UnitsCorrectRateStatistic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_resultTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateByUnitIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UnitsCorrectRateStatistic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args");

    private static final org.apache.thrift.protocol.TField TEACH_UNIT_IDS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachUnitIdsList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsTupleSchemeFactory());
    }

    public List<String> teachUnitIdsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACH_UNIT_IDS_LIST((short)1, "teachUnitIdsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACH_UNIT_IDS_LIST
            return TEACH_UNIT_IDS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACH_UNIT_IDS_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachUnitIdsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args() {
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args(
      List<String> teachUnitIdsList)
    {
      this();
      this.teachUnitIdsList = teachUnitIdsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args other) {
      if (other.isSetTeachUnitIdsList()) {
        List<String> __this__teachUnitIdsList = new ArrayList<String>(other.teachUnitIdsList);
        this.teachUnitIdsList = __this__teachUnitIdsList;
      }
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args deepCopy() {
      return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args(this);
    }

    @Override
    public void clear() {
      this.teachUnitIdsList = null;
    }

    public int getTeachUnitIdsListSize() {
      return (this.teachUnitIdsList == null) ? 0 : this.teachUnitIdsList.size();
    }

    public java.util.Iterator<String> getTeachUnitIdsListIterator() {
      return (this.teachUnitIdsList == null) ? null : this.teachUnitIdsList.iterator();
    }

    public void addToTeachUnitIdsList(String elem) {
      if (this.teachUnitIdsList == null) {
        this.teachUnitIdsList = new ArrayList<String>();
      }
      this.teachUnitIdsList.add(elem);
    }

    public List<String> getTeachUnitIdsList() {
      return this.teachUnitIdsList;
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args setTeachUnitIdsList(List<String> teachUnitIdsList) {
      this.teachUnitIdsList = teachUnitIdsList;
      return this;
    }

    public void unsetTeachUnitIdsList() {
      this.teachUnitIdsList = null;
    }

    /** Returns true if field teachUnitIdsList is set (has been assigned a value) and false otherwise */
    public boolean isSetTeachUnitIdsList() {
      return this.teachUnitIdsList != null;
    }

    public void setTeachUnitIdsListIsSet(boolean value) {
      if (!value) {
        this.teachUnitIdsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACH_UNIT_IDS_LIST:
        if (value == null) {
          unsetTeachUnitIdsList();
        } else {
          setTeachUnitIdsList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACH_UNIT_IDS_LIST:
        return getTeachUnitIdsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACH_UNIT_IDS_LIST:
        return isSetTeachUnitIdsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args)
        return this.equals((retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args that) {
      if (that == null)
        return false;

      boolean this_present_teachUnitIdsList = true && this.isSetTeachUnitIdsList();
      boolean that_present_teachUnitIdsList = true && that.isSetTeachUnitIdsList();
      if (this_present_teachUnitIdsList || that_present_teachUnitIdsList) {
        if (!(this_present_teachUnitIdsList && that_present_teachUnitIdsList))
          return false;
        if (!this.teachUnitIdsList.equals(that.teachUnitIdsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teachUnitIdsList = true && (isSetTeachUnitIdsList());
      list.add(present_teachUnitIdsList);
      if (present_teachUnitIdsList)
        list.add(teachUnitIdsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeachUnitIdsList()).compareTo(other.isSetTeachUnitIdsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeachUnitIdsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachUnitIdsList, other.teachUnitIdsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args(");
      boolean first = true;

      sb.append("teachUnitIdsList:");
      if (this.teachUnitIdsList == null) {
        sb.append("null");
      } else {
        sb.append(this.teachUnitIdsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACH_UNIT_IDS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.teachUnitIdsList = new ArrayList<String>(_list114.size);
                  String _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = iprot.readString();
                    struct.teachUnitIdsList.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setTeachUnitIdsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teachUnitIdsList != null) {
          oprot.writeFieldBegin(TEACH_UNIT_IDS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.teachUnitIdsList.size()));
            for (String _iter117 : struct.teachUnitIdsList)
            {
              oprot.writeString(_iter117);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_argsTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeachUnitIdsList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeachUnitIdsList()) {
          {
            oprot.writeI32(struct.teachUnitIdsList.size());
            for (String _iter118 : struct.teachUnitIdsList)
            {
              oprot.writeString(_iter118);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.teachUnitIdsList = new ArrayList<String>(_list119.size);
            String _elem120;
            for (int _i121 = 0; _i121 < _list119.size; ++_i121)
            {
              _elem120 = iprot.readString();
              struct.teachUnitIdsList.add(_elem120);
            }
          }
          struct.setTeachUnitIdsListIsSet(true);
        }
      }
    }

  }

  public static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result implements org.apache.thrift.TBase<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultTupleSchemeFactory());
    }

    public Map<String,UnitsCorrectRateStatistic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitsCorrectRateStatistic.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result.class, metaDataMap);
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result() {
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result(
      Map<String,UnitsCorrectRateStatistic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result other) {
      if (other.isSetSuccess()) {
        Map<String,UnitsCorrectRateStatistic> __this__success = new HashMap<String,UnitsCorrectRateStatistic>(other.success.size());
        for (Map.Entry<String, UnitsCorrectRateStatistic> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          UnitsCorrectRateStatistic other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          UnitsCorrectRateStatistic __this__success_copy_value = new UnitsCorrectRateStatistic(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result deepCopy() {
      return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, UnitsCorrectRateStatistic val) {
      if (this.success == null) {
        this.success = new HashMap<String,UnitsCorrectRateStatistic>();
      }
      this.success.put(key, val);
    }

    public Map<String,UnitsCorrectRateStatistic> getSuccess() {
      return this.success;
    }

    public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result setSuccess(Map<String,UnitsCorrectRateStatistic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,UnitsCorrectRateStatistic>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result)
        return this.equals((retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result)that);
      return false;
    }

    public boolean equals(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultStandardScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultStandardScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultStandardScheme extends StandardScheme<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map122 = iprot.readMapBegin();
                  struct.success = new HashMap<String,UnitsCorrectRateStatistic>(2*_map122.size);
                  String _key123;
                  UnitsCorrectRateStatistic _val124;
                  for (int _i125 = 0; _i125 < _map122.size; ++_i125)
                  {
                    _key123 = iprot.readString();
                    _val124 = new UnitsCorrectRateStatistic();
                    _val124.read(iprot);
                    struct.success.put(_key123, _val124);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, UnitsCorrectRateStatistic> _iter126 : struct.success.entrySet())
            {
              oprot.writeString(_iter126.getKey());
              _iter126.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultTupleScheme getScheme() {
        return new retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultTupleScheme();
      }
    }

    private static class retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_resultTupleScheme extends TupleScheme<retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, UnitsCorrectRateStatistic> _iter127 : struct.success.entrySet())
            {
              oprot.writeString(_iter127.getKey());
              _iter127.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveQuizzesAndAssignmentsCorrectRateListByUnitIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,UnitsCorrectRateStatistic>(2*_map128.size);
            String _key129;
            UnitsCorrectRateStatistic _val130;
            for (int _i131 = 0; _i131 < _map128.size; ++_i131)
            {
              _key129 = iprot.readString();
              _val130 = new UnitsCorrectRateStatistic();
              _val130.read(iprot);
              struct.success.put(_key129, _val130);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
