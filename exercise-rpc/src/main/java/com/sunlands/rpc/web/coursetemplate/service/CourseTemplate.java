/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-21")
public class CourseTemplate implements org.apache.thrift.TBase<CourseTemplate, CourseTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<CourseTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CourseTemplate");

  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField KNOWLEDGE_TREE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("knowledgeTreeId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_UNIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalUnitCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MOCK_EXAM_PAPER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mockExamPaperCode", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseTemplateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTemplateTupleSchemeFactory());
  }

  public int courseTemplateId; // required
  public String courseTemplateCode; // required
  public int subjectId; // required
  public int knowledgeTreeId; // required
  public int version; // required
  public String courseTemplateName; // required
  public int totalUnitCount; // required
  public String mockExamPaperCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COURSE_TEMPLATE_ID((short)1, "courseTemplateId"),
    COURSE_TEMPLATE_CODE((short)2, "courseTemplateCode"),
    SUBJECT_ID((short)3, "subjectId"),
    KNOWLEDGE_TREE_ID((short)4, "knowledgeTreeId"),
    VERSION((short)5, "version"),
    COURSE_TEMPLATE_NAME((short)6, "courseTemplateName"),
    TOTAL_UNIT_COUNT((short)7, "totalUnitCount"),
    MOCK_EXAM_PAPER_CODE((short)8, "mockExamPaperCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COURSE_TEMPLATE_ID
          return COURSE_TEMPLATE_ID;
        case 2: // COURSE_TEMPLATE_CODE
          return COURSE_TEMPLATE_CODE;
        case 3: // SUBJECT_ID
          return SUBJECT_ID;
        case 4: // KNOWLEDGE_TREE_ID
          return KNOWLEDGE_TREE_ID;
        case 5: // VERSION
          return VERSION;
        case 6: // COURSE_TEMPLATE_NAME
          return COURSE_TEMPLATE_NAME;
        case 7: // TOTAL_UNIT_COUNT
          return TOTAL_UNIT_COUNT;
        case 8: // MOCK_EXAM_PAPER_CODE
          return MOCK_EXAM_PAPER_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COURSETEMPLATEID_ISSET_ID = 0;
  private static final int __SUBJECTID_ISSET_ID = 1;
  private static final int __KNOWLEDGETREEID_ISSET_ID = 2;
  private static final int __VERSION_ISSET_ID = 3;
  private static final int __TOTALUNITCOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_TEMPLATE_CODE, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNOWLEDGE_TREE_ID, new org.apache.thrift.meta_data.FieldMetaData("knowledgeTreeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COURSE_TEMPLATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_UNIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalUnitCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOCK_EXAM_PAPER_CODE, new org.apache.thrift.meta_data.FieldMetaData("mockExamPaperCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CourseTemplate.class, metaDataMap);
  }

  public CourseTemplate() {
  }

  public CourseTemplate(
    int courseTemplateId,
    String courseTemplateCode,
    int subjectId,
    int knowledgeTreeId,
    int version,
    String courseTemplateName,
    int totalUnitCount,
    String mockExamPaperCode)
  {
    this();
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    this.courseTemplateCode = courseTemplateCode;
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    this.knowledgeTreeId = knowledgeTreeId;
    setKnowledgeTreeIdIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.courseTemplateName = courseTemplateName;
    this.totalUnitCount = totalUnitCount;
    setTotalUnitCountIsSet(true);
    this.mockExamPaperCode = mockExamPaperCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CourseTemplate(CourseTemplate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.courseTemplateId = other.courseTemplateId;
    if (other.isSetCourseTemplateCode()) {
      this.courseTemplateCode = other.courseTemplateCode;
    }
    this.subjectId = other.subjectId;
    this.knowledgeTreeId = other.knowledgeTreeId;
    this.version = other.version;
    if (other.isSetCourseTemplateName()) {
      this.courseTemplateName = other.courseTemplateName;
    }
    this.totalUnitCount = other.totalUnitCount;
    if (other.isSetMockExamPaperCode()) {
      this.mockExamPaperCode = other.mockExamPaperCode;
    }
  }

  public CourseTemplate deepCopy() {
    return new CourseTemplate(this);
  }

  @Override
  public void clear() {
    setCourseTemplateIdIsSet(false);
    this.courseTemplateId = 0;
    this.courseTemplateCode = null;
    setSubjectIdIsSet(false);
    this.subjectId = 0;
    setKnowledgeTreeIdIsSet(false);
    this.knowledgeTreeId = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.courseTemplateName = null;
    setTotalUnitCountIsSet(false);
    this.totalUnitCount = 0;
    this.mockExamPaperCode = null;
  }

  public int getCourseTemplateId() {
    return this.courseTemplateId;
  }

  public CourseTemplate setCourseTemplateId(int courseTemplateId) {
    this.courseTemplateId = courseTemplateId;
    setCourseTemplateIdIsSet(true);
    return this;
  }

  public void unsetCourseTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
  }

  public void setCourseTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID, value);
  }

  public String getCourseTemplateCode() {
    return this.courseTemplateCode;
  }

  public CourseTemplate setCourseTemplateCode(String courseTemplateCode) {
    this.courseTemplateCode = courseTemplateCode;
    return this;
  }

  public void unsetCourseTemplateCode() {
    this.courseTemplateCode = null;
  }

  /** Returns true if field courseTemplateCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateCode() {
    return this.courseTemplateCode != null;
  }

  public void setCourseTemplateCodeIsSet(boolean value) {
    if (!value) {
      this.courseTemplateCode = null;
    }
  }

  public int getSubjectId() {
    return this.subjectId;
  }

  public CourseTemplate setSubjectId(int subjectId) {
    this.subjectId = subjectId;
    setSubjectIdIsSet(true);
    return this;
  }

  public void unsetSubjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBJECTID_ISSET_ID);
  }

  public void setSubjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBJECTID_ISSET_ID, value);
  }

  public int getKnowledgeTreeId() {
    return this.knowledgeTreeId;
  }

  public CourseTemplate setKnowledgeTreeId(int knowledgeTreeId) {
    this.knowledgeTreeId = knowledgeTreeId;
    setKnowledgeTreeIdIsSet(true);
    return this;
  }

  public void unsetKnowledgeTreeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID);
  }

  /** Returns true if field knowledgeTreeId is set (has been assigned a value) and false otherwise */
  public boolean isSetKnowledgeTreeId() {
    return EncodingUtils.testBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID);
  }

  public void setKnowledgeTreeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KNOWLEDGETREEID_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public CourseTemplate setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getCourseTemplateName() {
    return this.courseTemplateName;
  }

  public CourseTemplate setCourseTemplateName(String courseTemplateName) {
    this.courseTemplateName = courseTemplateName;
    return this;
  }

  public void unsetCourseTemplateName() {
    this.courseTemplateName = null;
  }

  /** Returns true if field courseTemplateName is set (has been assigned a value) and false otherwise */
  public boolean isSetCourseTemplateName() {
    return this.courseTemplateName != null;
  }

  public void setCourseTemplateNameIsSet(boolean value) {
    if (!value) {
      this.courseTemplateName = null;
    }
  }

  public int getTotalUnitCount() {
    return this.totalUnitCount;
  }

  public CourseTemplate setTotalUnitCount(int totalUnitCount) {
    this.totalUnitCount = totalUnitCount;
    setTotalUnitCountIsSet(true);
    return this;
  }

  public void unsetTotalUnitCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALUNITCOUNT_ISSET_ID);
  }

  /** Returns true if field totalUnitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalUnitCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALUNITCOUNT_ISSET_ID);
  }

  public void setTotalUnitCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALUNITCOUNT_ISSET_ID, value);
  }

  public String getMockExamPaperCode() {
    return this.mockExamPaperCode;
  }

  public CourseTemplate setMockExamPaperCode(String mockExamPaperCode) {
    this.mockExamPaperCode = mockExamPaperCode;
    return this;
  }

  public void unsetMockExamPaperCode() {
    this.mockExamPaperCode = null;
  }

  /** Returns true if field mockExamPaperCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMockExamPaperCode() {
    return this.mockExamPaperCode != null;
  }

  public void setMockExamPaperCodeIsSet(boolean value) {
    if (!value) {
      this.mockExamPaperCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COURSE_TEMPLATE_ID:
      if (value == null) {
        unsetCourseTemplateId();
      } else {
        setCourseTemplateId((Integer)value);
      }
      break;

    case COURSE_TEMPLATE_CODE:
      if (value == null) {
        unsetCourseTemplateCode();
      } else {
        setCourseTemplateCode((String)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((Integer)value);
      }
      break;

    case KNOWLEDGE_TREE_ID:
      if (value == null) {
        unsetKnowledgeTreeId();
      } else {
        setKnowledgeTreeId((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case COURSE_TEMPLATE_NAME:
      if (value == null) {
        unsetCourseTemplateName();
      } else {
        setCourseTemplateName((String)value);
      }
      break;

    case TOTAL_UNIT_COUNT:
      if (value == null) {
        unsetTotalUnitCount();
      } else {
        setTotalUnitCount((Integer)value);
      }
      break;

    case MOCK_EXAM_PAPER_CODE:
      if (value == null) {
        unsetMockExamPaperCode();
      } else {
        setMockExamPaperCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COURSE_TEMPLATE_ID:
      return getCourseTemplateId();

    case COURSE_TEMPLATE_CODE:
      return getCourseTemplateCode();

    case SUBJECT_ID:
      return getSubjectId();

    case KNOWLEDGE_TREE_ID:
      return getKnowledgeTreeId();

    case VERSION:
      return getVersion();

    case COURSE_TEMPLATE_NAME:
      return getCourseTemplateName();

    case TOTAL_UNIT_COUNT:
      return getTotalUnitCount();

    case MOCK_EXAM_PAPER_CODE:
      return getMockExamPaperCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COURSE_TEMPLATE_ID:
      return isSetCourseTemplateId();
    case COURSE_TEMPLATE_CODE:
      return isSetCourseTemplateCode();
    case SUBJECT_ID:
      return isSetSubjectId();
    case KNOWLEDGE_TREE_ID:
      return isSetKnowledgeTreeId();
    case VERSION:
      return isSetVersion();
    case COURSE_TEMPLATE_NAME:
      return isSetCourseTemplateName();
    case TOTAL_UNIT_COUNT:
      return isSetTotalUnitCount();
    case MOCK_EXAM_PAPER_CODE:
      return isSetMockExamPaperCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CourseTemplate)
      return this.equals((CourseTemplate)that);
    return false;
  }

  public boolean equals(CourseTemplate that) {
    if (that == null)
      return false;

    boolean this_present_courseTemplateId = true;
    boolean that_present_courseTemplateId = true;
    if (this_present_courseTemplateId || that_present_courseTemplateId) {
      if (!(this_present_courseTemplateId && that_present_courseTemplateId))
        return false;
      if (this.courseTemplateId != that.courseTemplateId)
        return false;
    }

    boolean this_present_courseTemplateCode = true && this.isSetCourseTemplateCode();
    boolean that_present_courseTemplateCode = true && that.isSetCourseTemplateCode();
    if (this_present_courseTemplateCode || that_present_courseTemplateCode) {
      if (!(this_present_courseTemplateCode && that_present_courseTemplateCode))
        return false;
      if (!this.courseTemplateCode.equals(that.courseTemplateCode))
        return false;
    }

    boolean this_present_subjectId = true;
    boolean that_present_subjectId = true;
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (this.subjectId != that.subjectId)
        return false;
    }

    boolean this_present_knowledgeTreeId = true;
    boolean that_present_knowledgeTreeId = true;
    if (this_present_knowledgeTreeId || that_present_knowledgeTreeId) {
      if (!(this_present_knowledgeTreeId && that_present_knowledgeTreeId))
        return false;
      if (this.knowledgeTreeId != that.knowledgeTreeId)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_courseTemplateName = true && this.isSetCourseTemplateName();
    boolean that_present_courseTemplateName = true && that.isSetCourseTemplateName();
    if (this_present_courseTemplateName || that_present_courseTemplateName) {
      if (!(this_present_courseTemplateName && that_present_courseTemplateName))
        return false;
      if (!this.courseTemplateName.equals(that.courseTemplateName))
        return false;
    }

    boolean this_present_totalUnitCount = true;
    boolean that_present_totalUnitCount = true;
    if (this_present_totalUnitCount || that_present_totalUnitCount) {
      if (!(this_present_totalUnitCount && that_present_totalUnitCount))
        return false;
      if (this.totalUnitCount != that.totalUnitCount)
        return false;
    }

    boolean this_present_mockExamPaperCode = true && this.isSetMockExamPaperCode();
    boolean that_present_mockExamPaperCode = true && that.isSetMockExamPaperCode();
    if (this_present_mockExamPaperCode || that_present_mockExamPaperCode) {
      if (!(this_present_mockExamPaperCode && that_present_mockExamPaperCode))
        return false;
      if (!this.mockExamPaperCode.equals(that.mockExamPaperCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_courseTemplateId = true;
    list.add(present_courseTemplateId);
    if (present_courseTemplateId)
      list.add(courseTemplateId);

    boolean present_courseTemplateCode = true && (isSetCourseTemplateCode());
    list.add(present_courseTemplateCode);
    if (present_courseTemplateCode)
      list.add(courseTemplateCode);

    boolean present_subjectId = true;
    list.add(present_subjectId);
    if (present_subjectId)
      list.add(subjectId);

    boolean present_knowledgeTreeId = true;
    list.add(present_knowledgeTreeId);
    if (present_knowledgeTreeId)
      list.add(knowledgeTreeId);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_courseTemplateName = true && (isSetCourseTemplateName());
    list.add(present_courseTemplateName);
    if (present_courseTemplateName)
      list.add(courseTemplateName);

    boolean present_totalUnitCount = true;
    list.add(present_totalUnitCount);
    if (present_totalUnitCount)
      list.add(totalUnitCount);

    boolean present_mockExamPaperCode = true && (isSetMockExamPaperCode());
    list.add(present_mockExamPaperCode);
    if (present_mockExamPaperCode)
      list.add(mockExamPaperCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(CourseTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateCode()).compareTo(other.isSetCourseTemplateCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateCode, other.courseTemplateCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnowledgeTreeId()).compareTo(other.isSetKnowledgeTreeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnowledgeTreeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knowledgeTreeId, other.knowledgeTreeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCourseTemplateName()).compareTo(other.isSetCourseTemplateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCourseTemplateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateName, other.courseTemplateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalUnitCount()).compareTo(other.isSetTotalUnitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalUnitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalUnitCount, other.totalUnitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMockExamPaperCode()).compareTo(other.isSetMockExamPaperCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMockExamPaperCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mockExamPaperCode, other.mockExamPaperCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CourseTemplate(");
    boolean first = true;

    sb.append("courseTemplateId:");
    sb.append(this.courseTemplateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateCode:");
    if (this.courseTemplateCode == null) {
      sb.append("null");
    } else {
      sb.append(this.courseTemplateCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    sb.append(this.subjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("knowledgeTreeId:");
    sb.append(this.knowledgeTreeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("courseTemplateName:");
    if (this.courseTemplateName == null) {
      sb.append("null");
    } else {
      sb.append(this.courseTemplateName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalUnitCount:");
    sb.append(this.totalUnitCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mockExamPaperCode:");
    if (this.mockExamPaperCode == null) {
      sb.append("null");
    } else {
      sb.append(this.mockExamPaperCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseTemplateStandardSchemeFactory implements SchemeFactory {
    public CourseTemplateStandardScheme getScheme() {
      return new CourseTemplateStandardScheme();
    }
  }

  private static class CourseTemplateStandardScheme extends StandardScheme<CourseTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CourseTemplate struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COURSE_TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.courseTemplateId = iprot.readI32();
              struct.setCourseTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COURSE_TEMPLATE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseTemplateCode = iprot.readString();
              struct.setCourseTemplateCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subjectId = iprot.readI32();
              struct.setSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KNOWLEDGE_TREE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.knowledgeTreeId = iprot.readI32();
              struct.setKnowledgeTreeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COURSE_TEMPLATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.courseTemplateName = iprot.readString();
              struct.setCourseTemplateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_UNIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalUnitCount = iprot.readI32();
              struct.setTotalUnitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MOCK_EXAM_PAPER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mockExamPaperCode = iprot.readString();
              struct.setMockExamPaperCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CourseTemplate struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.courseTemplateId);
      oprot.writeFieldEnd();
      if (struct.courseTemplateCode != null) {
        oprot.writeFieldBegin(COURSE_TEMPLATE_CODE_FIELD_DESC);
        oprot.writeString(struct.courseTemplateCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.subjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KNOWLEDGE_TREE_ID_FIELD_DESC);
      oprot.writeI32(struct.knowledgeTreeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.courseTemplateName != null) {
        oprot.writeFieldBegin(COURSE_TEMPLATE_NAME_FIELD_DESC);
        oprot.writeString(struct.courseTemplateName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_UNIT_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalUnitCount);
      oprot.writeFieldEnd();
      if (struct.mockExamPaperCode != null) {
        oprot.writeFieldBegin(MOCK_EXAM_PAPER_CODE_FIELD_DESC);
        oprot.writeString(struct.mockExamPaperCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTemplateTupleSchemeFactory implements SchemeFactory {
    public CourseTemplateTupleScheme getScheme() {
      return new CourseTemplateTupleScheme();
    }
  }

  private static class CourseTemplateTupleScheme extends TupleScheme<CourseTemplate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CourseTemplate struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCourseTemplateId()) {
        optionals.set(0);
      }
      if (struct.isSetCourseTemplateCode()) {
        optionals.set(1);
      }
      if (struct.isSetSubjectId()) {
        optionals.set(2);
      }
      if (struct.isSetKnowledgeTreeId()) {
        optionals.set(3);
      }
      if (struct.isSetVersion()) {
        optionals.set(4);
      }
      if (struct.isSetCourseTemplateName()) {
        optionals.set(5);
      }
      if (struct.isSetTotalUnitCount()) {
        optionals.set(6);
      }
      if (struct.isSetMockExamPaperCode()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCourseTemplateId()) {
        oprot.writeI32(struct.courseTemplateId);
      }
      if (struct.isSetCourseTemplateCode()) {
        oprot.writeString(struct.courseTemplateCode);
      }
      if (struct.isSetSubjectId()) {
        oprot.writeI32(struct.subjectId);
      }
      if (struct.isSetKnowledgeTreeId()) {
        oprot.writeI32(struct.knowledgeTreeId);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetCourseTemplateName()) {
        oprot.writeString(struct.courseTemplateName);
      }
      if (struct.isSetTotalUnitCount()) {
        oprot.writeI32(struct.totalUnitCount);
      }
      if (struct.isSetMockExamPaperCode()) {
        oprot.writeString(struct.mockExamPaperCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CourseTemplate struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.courseTemplateId = iprot.readI32();
        struct.setCourseTemplateIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.courseTemplateCode = iprot.readString();
        struct.setCourseTemplateCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subjectId = iprot.readI32();
        struct.setSubjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.knowledgeTreeId = iprot.readI32();
        struct.setKnowledgeTreeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.courseTemplateName = iprot.readString();
        struct.setCourseTemplateNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalUnitCount = iprot.readI32();
        struct.setTotalUnitCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mockExamPaperCode = iprot.readString();
        struct.setMockExamPaperCodeIsSet(true);
      }
    }
  }

}

