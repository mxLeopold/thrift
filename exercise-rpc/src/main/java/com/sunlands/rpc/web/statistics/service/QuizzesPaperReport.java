/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.web.statistics.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-16")
public class QuizzesPaperReport implements org.apache.thrift.TBase<QuizzesPaperReport, QuizzesPaperReport._Fields>, java.io.Serializable, Cloneable, Comparable<QuizzesPaperReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuizzesPaperReport");

  private static final org.apache.thrift.protocol.TField ANSWER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("answerNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ANSWER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("answerTime", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField ANSWER_TIME_AVE_FIELD_DESC = new org.apache.thrift.protocol.TField("answerTimeAve", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ANSWER_TIME_AVE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("answerTimeAveString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ANSWER_TIME_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("answerTimeString", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CORRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("correct", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CORRECT_AVE_FIELD_DESC = new org.apache.thrift.protocol.TField("correctAve", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CORRECT_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("correctPercent", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EVALUATED_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("evaluatedScore", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paperId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAPER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paperName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAPER_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("paperTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PAPER_TOTAL_AVE_FIELD_DESC = new org.apache.thrift.protocol.TField("paperTotalAve", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField PASS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("passRate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField QUESTION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("questionNum", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField USER_PAPER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userPaperId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField WRONG_FIELD_DESC = new org.apache.thrift.protocol.TField("wrong", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuizzesPaperReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuizzesPaperReportTupleSchemeFactory());
  }

  public int answerNumber; // required
  public double answerTime; // required
  public double answerTimeAve; // required
  public String answerTimeAveString; // required
  public String answerTimeString; // required
  public int correct; // required
  public int correctAve; // required
  public double correctPercent; // required
  public double evaluatedScore; // required
  public String paperId; // required
  public String paperName; // required
  public double paperTotal; // required
  public double paperTotalAve; // required
  public double passRate; // required
  public int questionNum; // required
  public String subjectId; // required
  public int userPaperId; // required
  public int wrong; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANSWER_NUMBER((short)1, "answerNumber"),
    ANSWER_TIME((short)2, "answerTime"),
    ANSWER_TIME_AVE((short)3, "answerTimeAve"),
    ANSWER_TIME_AVE_STRING((short)4, "answerTimeAveString"),
    ANSWER_TIME_STRING((short)5, "answerTimeString"),
    CORRECT((short)6, "correct"),
    CORRECT_AVE((short)7, "correctAve"),
    CORRECT_PERCENT((short)8, "correctPercent"),
    EVALUATED_SCORE((short)9, "evaluatedScore"),
    PAPER_ID((short)10, "paperId"),
    PAPER_NAME((short)11, "paperName"),
    PAPER_TOTAL((short)12, "paperTotal"),
    PAPER_TOTAL_AVE((short)13, "paperTotalAve"),
    PASS_RATE((short)14, "passRate"),
    QUESTION_NUM((short)15, "questionNum"),
    SUBJECT_ID((short)16, "subjectId"),
    USER_PAPER_ID((short)17, "userPaperId"),
    WRONG((short)18, "wrong");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANSWER_NUMBER
          return ANSWER_NUMBER;
        case 2: // ANSWER_TIME
          return ANSWER_TIME;
        case 3: // ANSWER_TIME_AVE
          return ANSWER_TIME_AVE;
        case 4: // ANSWER_TIME_AVE_STRING
          return ANSWER_TIME_AVE_STRING;
        case 5: // ANSWER_TIME_STRING
          return ANSWER_TIME_STRING;
        case 6: // CORRECT
          return CORRECT;
        case 7: // CORRECT_AVE
          return CORRECT_AVE;
        case 8: // CORRECT_PERCENT
          return CORRECT_PERCENT;
        case 9: // EVALUATED_SCORE
          return EVALUATED_SCORE;
        case 10: // PAPER_ID
          return PAPER_ID;
        case 11: // PAPER_NAME
          return PAPER_NAME;
        case 12: // PAPER_TOTAL
          return PAPER_TOTAL;
        case 13: // PAPER_TOTAL_AVE
          return PAPER_TOTAL_AVE;
        case 14: // PASS_RATE
          return PASS_RATE;
        case 15: // QUESTION_NUM
          return QUESTION_NUM;
        case 16: // SUBJECT_ID
          return SUBJECT_ID;
        case 17: // USER_PAPER_ID
          return USER_PAPER_ID;
        case 18: // WRONG
          return WRONG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANSWERNUMBER_ISSET_ID = 0;
  private static final int __ANSWERTIME_ISSET_ID = 1;
  private static final int __ANSWERTIMEAVE_ISSET_ID = 2;
  private static final int __CORRECT_ISSET_ID = 3;
  private static final int __CORRECTAVE_ISSET_ID = 4;
  private static final int __CORRECTPERCENT_ISSET_ID = 5;
  private static final int __EVALUATEDSCORE_ISSET_ID = 6;
  private static final int __PAPERTOTAL_ISSET_ID = 7;
  private static final int __PAPERTOTALAVE_ISSET_ID = 8;
  private static final int __PASSRATE_ISSET_ID = 9;
  private static final int __QUESTIONNUM_ISSET_ID = 10;
  private static final int __USERPAPERID_ISSET_ID = 11;
  private static final int __WRONG_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANSWER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("answerNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANSWER_TIME, new org.apache.thrift.meta_data.FieldMetaData("answerTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANSWER_TIME_AVE, new org.apache.thrift.meta_data.FieldMetaData("answerTimeAve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANSWER_TIME_AVE_STRING, new org.apache.thrift.meta_data.FieldMetaData("answerTimeAveString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWER_TIME_STRING, new org.apache.thrift.meta_data.FieldMetaData("answerTimeString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORRECT, new org.apache.thrift.meta_data.FieldMetaData("correct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_AVE, new org.apache.thrift.meta_data.FieldMetaData("correctAve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECT_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("correctPercent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVALUATED_SCORE, new org.apache.thrift.meta_data.FieldMetaData("evaluatedScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("paperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_NAME, new org.apache.thrift.meta_data.FieldMetaData("paperName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAPER_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("paperTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAPER_TOTAL_AVE, new org.apache.thrift.meta_data.FieldMetaData("paperTotalAve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PASS_RATE, new org.apache.thrift.meta_data.FieldMetaData("passRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUESTION_NUM, new org.apache.thrift.meta_data.FieldMetaData("questionNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("subjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_PAPER_ID, new org.apache.thrift.meta_data.FieldMetaData("userPaperId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRONG, new org.apache.thrift.meta_data.FieldMetaData("wrong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuizzesPaperReport.class, metaDataMap);
  }

  public QuizzesPaperReport() {
  }

  public QuizzesPaperReport(
    int answerNumber,
    double answerTime,
    double answerTimeAve,
    String answerTimeAveString,
    String answerTimeString,
    int correct,
    int correctAve,
    double correctPercent,
    double evaluatedScore,
    String paperId,
    String paperName,
    double paperTotal,
    double paperTotalAve,
    double passRate,
    int questionNum,
    String subjectId,
    int userPaperId,
    int wrong)
  {
    this();
    this.answerNumber = answerNumber;
    setAnswerNumberIsSet(true);
    this.answerTime = answerTime;
    setAnswerTimeIsSet(true);
    this.answerTimeAve = answerTimeAve;
    setAnswerTimeAveIsSet(true);
    this.answerTimeAveString = answerTimeAveString;
    this.answerTimeString = answerTimeString;
    this.correct = correct;
    setCorrectIsSet(true);
    this.correctAve = correctAve;
    setCorrectAveIsSet(true);
    this.correctPercent = correctPercent;
    setCorrectPercentIsSet(true);
    this.evaluatedScore = evaluatedScore;
    setEvaluatedScoreIsSet(true);
    this.paperId = paperId;
    this.paperName = paperName;
    this.paperTotal = paperTotal;
    setPaperTotalIsSet(true);
    this.paperTotalAve = paperTotalAve;
    setPaperTotalAveIsSet(true);
    this.passRate = passRate;
    setPassRateIsSet(true);
    this.questionNum = questionNum;
    setQuestionNumIsSet(true);
    this.subjectId = subjectId;
    this.userPaperId = userPaperId;
    setUserPaperIdIsSet(true);
    this.wrong = wrong;
    setWrongIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuizzesPaperReport(QuizzesPaperReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.answerNumber = other.answerNumber;
    this.answerTime = other.answerTime;
    this.answerTimeAve = other.answerTimeAve;
    if (other.isSetAnswerTimeAveString()) {
      this.answerTimeAveString = other.answerTimeAveString;
    }
    if (other.isSetAnswerTimeString()) {
      this.answerTimeString = other.answerTimeString;
    }
    this.correct = other.correct;
    this.correctAve = other.correctAve;
    this.correctPercent = other.correctPercent;
    this.evaluatedScore = other.evaluatedScore;
    if (other.isSetPaperId()) {
      this.paperId = other.paperId;
    }
    if (other.isSetPaperName()) {
      this.paperName = other.paperName;
    }
    this.paperTotal = other.paperTotal;
    this.paperTotalAve = other.paperTotalAve;
    this.passRate = other.passRate;
    this.questionNum = other.questionNum;
    if (other.isSetSubjectId()) {
      this.subjectId = other.subjectId;
    }
    this.userPaperId = other.userPaperId;
    this.wrong = other.wrong;
  }

  public QuizzesPaperReport deepCopy() {
    return new QuizzesPaperReport(this);
  }

  @Override
  public void clear() {
    setAnswerNumberIsSet(false);
    this.answerNumber = 0;
    setAnswerTimeIsSet(false);
    this.answerTime = 0.0;
    setAnswerTimeAveIsSet(false);
    this.answerTimeAve = 0.0;
    this.answerTimeAveString = null;
    this.answerTimeString = null;
    setCorrectIsSet(false);
    this.correct = 0;
    setCorrectAveIsSet(false);
    this.correctAve = 0;
    setCorrectPercentIsSet(false);
    this.correctPercent = 0.0;
    setEvaluatedScoreIsSet(false);
    this.evaluatedScore = 0.0;
    this.paperId = null;
    this.paperName = null;
    setPaperTotalIsSet(false);
    this.paperTotal = 0.0;
    setPaperTotalAveIsSet(false);
    this.paperTotalAve = 0.0;
    setPassRateIsSet(false);
    this.passRate = 0.0;
    setQuestionNumIsSet(false);
    this.questionNum = 0;
    this.subjectId = null;
    setUserPaperIdIsSet(false);
    this.userPaperId = 0;
    setWrongIsSet(false);
    this.wrong = 0;
  }

  public int getAnswerNumber() {
    return this.answerNumber;
  }

  public QuizzesPaperReport setAnswerNumber(int answerNumber) {
    this.answerNumber = answerNumber;
    setAnswerNumberIsSet(true);
    return this;
  }

  public void unsetAnswerNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERNUMBER_ISSET_ID);
  }

  /** Returns true if field answerNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERNUMBER_ISSET_ID);
  }

  public void setAnswerNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERNUMBER_ISSET_ID, value);
  }

  public double getAnswerTime() {
    return this.answerTime;
  }

  public QuizzesPaperReport setAnswerTime(double answerTime) {
    this.answerTime = answerTime;
    setAnswerTimeIsSet(true);
    return this;
  }

  public void unsetAnswerTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERTIME_ISSET_ID);
  }

  /** Returns true if field answerTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERTIME_ISSET_ID);
  }

  public void setAnswerTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERTIME_ISSET_ID, value);
  }

  public double getAnswerTimeAve() {
    return this.answerTimeAve;
  }

  public QuizzesPaperReport setAnswerTimeAve(double answerTimeAve) {
    this.answerTimeAve = answerTimeAve;
    setAnswerTimeAveIsSet(true);
    return this;
  }

  public void unsetAnswerTimeAve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANSWERTIMEAVE_ISSET_ID);
  }

  /** Returns true if field answerTimeAve is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerTimeAve() {
    return EncodingUtils.testBit(__isset_bitfield, __ANSWERTIMEAVE_ISSET_ID);
  }

  public void setAnswerTimeAveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANSWERTIMEAVE_ISSET_ID, value);
  }

  public String getAnswerTimeAveString() {
    return this.answerTimeAveString;
  }

  public QuizzesPaperReport setAnswerTimeAveString(String answerTimeAveString) {
    this.answerTimeAveString = answerTimeAveString;
    return this;
  }

  public void unsetAnswerTimeAveString() {
    this.answerTimeAveString = null;
  }

  /** Returns true if field answerTimeAveString is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerTimeAveString() {
    return this.answerTimeAveString != null;
  }

  public void setAnswerTimeAveStringIsSet(boolean value) {
    if (!value) {
      this.answerTimeAveString = null;
    }
  }

  public String getAnswerTimeString() {
    return this.answerTimeString;
  }

  public QuizzesPaperReport setAnswerTimeString(String answerTimeString) {
    this.answerTimeString = answerTimeString;
    return this;
  }

  public void unsetAnswerTimeString() {
    this.answerTimeString = null;
  }

  /** Returns true if field answerTimeString is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerTimeString() {
    return this.answerTimeString != null;
  }

  public void setAnswerTimeStringIsSet(boolean value) {
    if (!value) {
      this.answerTimeString = null;
    }
  }

  public int getCorrect() {
    return this.correct;
  }

  public QuizzesPaperReport setCorrect(int correct) {
    this.correct = correct;
    setCorrectIsSet(true);
    return this;
  }

  public void unsetCorrect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  /** Returns true if field correct is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrect() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECT_ISSET_ID);
  }

  public void setCorrectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECT_ISSET_ID, value);
  }

  public int getCorrectAve() {
    return this.correctAve;
  }

  public QuizzesPaperReport setCorrectAve(int correctAve) {
    this.correctAve = correctAve;
    setCorrectAveIsSet(true);
    return this;
  }

  public void unsetCorrectAve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTAVE_ISSET_ID);
  }

  /** Returns true if field correctAve is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectAve() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTAVE_ISSET_ID);
  }

  public void setCorrectAveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTAVE_ISSET_ID, value);
  }

  public double getCorrectPercent() {
    return this.correctPercent;
  }

  public QuizzesPaperReport setCorrectPercent(double correctPercent) {
    this.correctPercent = correctPercent;
    setCorrectPercentIsSet(true);
    return this;
  }

  public void unsetCorrectPercent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTPERCENT_ISSET_ID);
  }

  /** Returns true if field correctPercent is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectPercent() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTPERCENT_ISSET_ID);
  }

  public void setCorrectPercentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTPERCENT_ISSET_ID, value);
  }

  public double getEvaluatedScore() {
    return this.evaluatedScore;
  }

  public QuizzesPaperReport setEvaluatedScore(double evaluatedScore) {
    this.evaluatedScore = evaluatedScore;
    setEvaluatedScoreIsSet(true);
    return this;
  }

  public void unsetEvaluatedScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVALUATEDSCORE_ISSET_ID);
  }

  /** Returns true if field evaluatedScore is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaluatedScore() {
    return EncodingUtils.testBit(__isset_bitfield, __EVALUATEDSCORE_ISSET_ID);
  }

  public void setEvaluatedScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVALUATEDSCORE_ISSET_ID, value);
  }

  public String getPaperId() {
    return this.paperId;
  }

  public QuizzesPaperReport setPaperId(String paperId) {
    this.paperId = paperId;
    return this;
  }

  public void unsetPaperId() {
    this.paperId = null;
  }

  /** Returns true if field paperId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperId() {
    return this.paperId != null;
  }

  public void setPaperIdIsSet(boolean value) {
    if (!value) {
      this.paperId = null;
    }
  }

  public String getPaperName() {
    return this.paperName;
  }

  public QuizzesPaperReport setPaperName(String paperName) {
    this.paperName = paperName;
    return this;
  }

  public void unsetPaperName() {
    this.paperName = null;
  }

  /** Returns true if field paperName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperName() {
    return this.paperName != null;
  }

  public void setPaperNameIsSet(boolean value) {
    if (!value) {
      this.paperName = null;
    }
  }

  public double getPaperTotal() {
    return this.paperTotal;
  }

  public QuizzesPaperReport setPaperTotal(double paperTotal) {
    this.paperTotal = paperTotal;
    setPaperTotalIsSet(true);
    return this;
  }

  public void unsetPaperTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAPERTOTAL_ISSET_ID);
  }

  /** Returns true if field paperTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PAPERTOTAL_ISSET_ID);
  }

  public void setPaperTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAPERTOTAL_ISSET_ID, value);
  }

  public double getPaperTotalAve() {
    return this.paperTotalAve;
  }

  public QuizzesPaperReport setPaperTotalAve(double paperTotalAve) {
    this.paperTotalAve = paperTotalAve;
    setPaperTotalAveIsSet(true);
    return this;
  }

  public void unsetPaperTotalAve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAPERTOTALAVE_ISSET_ID);
  }

  /** Returns true if field paperTotalAve is set (has been assigned a value) and false otherwise */
  public boolean isSetPaperTotalAve() {
    return EncodingUtils.testBit(__isset_bitfield, __PAPERTOTALAVE_ISSET_ID);
  }

  public void setPaperTotalAveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAPERTOTALAVE_ISSET_ID, value);
  }

  public double getPassRate() {
    return this.passRate;
  }

  public QuizzesPaperReport setPassRate(double passRate) {
    this.passRate = passRate;
    setPassRateIsSet(true);
    return this;
  }

  public void unsetPassRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSRATE_ISSET_ID);
  }

  /** Returns true if field passRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPassRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSRATE_ISSET_ID);
  }

  public void setPassRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSRATE_ISSET_ID, value);
  }

  public int getQuestionNum() {
    return this.questionNum;
  }

  public QuizzesPaperReport setQuestionNum(int questionNum) {
    this.questionNum = questionNum;
    setQuestionNumIsSet(true);
    return this;
  }

  public void unsetQuestionNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONNUM_ISSET_ID);
  }

  /** Returns true if field questionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionNum() {
    return EncodingUtils.testBit(__isset_bitfield, __QUESTIONNUM_ISSET_ID);
  }

  public void setQuestionNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONNUM_ISSET_ID, value);
  }

  public String getSubjectId() {
    return this.subjectId;
  }

  public QuizzesPaperReport setSubjectId(String subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  public void unsetSubjectId() {
    this.subjectId = null;
  }

  /** Returns true if field subjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectId() {
    return this.subjectId != null;
  }

  public void setSubjectIdIsSet(boolean value) {
    if (!value) {
      this.subjectId = null;
    }
  }

  public int getUserPaperId() {
    return this.userPaperId;
  }

  public QuizzesPaperReport setUserPaperId(int userPaperId) {
    this.userPaperId = userPaperId;
    setUserPaperIdIsSet(true);
    return this;
  }

  public void unsetUserPaperId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERPAPERID_ISSET_ID);
  }

  /** Returns true if field userPaperId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPaperId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERPAPERID_ISSET_ID);
  }

  public void setUserPaperIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERPAPERID_ISSET_ID, value);
  }

  public int getWrong() {
    return this.wrong;
  }

  public QuizzesPaperReport setWrong(int wrong) {
    this.wrong = wrong;
    setWrongIsSet(true);
    return this;
  }

  public void unsetWrong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRONG_ISSET_ID);
  }

  /** Returns true if field wrong is set (has been assigned a value) and false otherwise */
  public boolean isSetWrong() {
    return EncodingUtils.testBit(__isset_bitfield, __WRONG_ISSET_ID);
  }

  public void setWrongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRONG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANSWER_NUMBER:
      if (value == null) {
        unsetAnswerNumber();
      } else {
        setAnswerNumber((Integer)value);
      }
      break;

    case ANSWER_TIME:
      if (value == null) {
        unsetAnswerTime();
      } else {
        setAnswerTime((Double)value);
      }
      break;

    case ANSWER_TIME_AVE:
      if (value == null) {
        unsetAnswerTimeAve();
      } else {
        setAnswerTimeAve((Double)value);
      }
      break;

    case ANSWER_TIME_AVE_STRING:
      if (value == null) {
        unsetAnswerTimeAveString();
      } else {
        setAnswerTimeAveString((String)value);
      }
      break;

    case ANSWER_TIME_STRING:
      if (value == null) {
        unsetAnswerTimeString();
      } else {
        setAnswerTimeString((String)value);
      }
      break;

    case CORRECT:
      if (value == null) {
        unsetCorrect();
      } else {
        setCorrect((Integer)value);
      }
      break;

    case CORRECT_AVE:
      if (value == null) {
        unsetCorrectAve();
      } else {
        setCorrectAve((Integer)value);
      }
      break;

    case CORRECT_PERCENT:
      if (value == null) {
        unsetCorrectPercent();
      } else {
        setCorrectPercent((Double)value);
      }
      break;

    case EVALUATED_SCORE:
      if (value == null) {
        unsetEvaluatedScore();
      } else {
        setEvaluatedScore((Double)value);
      }
      break;

    case PAPER_ID:
      if (value == null) {
        unsetPaperId();
      } else {
        setPaperId((String)value);
      }
      break;

    case PAPER_NAME:
      if (value == null) {
        unsetPaperName();
      } else {
        setPaperName((String)value);
      }
      break;

    case PAPER_TOTAL:
      if (value == null) {
        unsetPaperTotal();
      } else {
        setPaperTotal((Double)value);
      }
      break;

    case PAPER_TOTAL_AVE:
      if (value == null) {
        unsetPaperTotalAve();
      } else {
        setPaperTotalAve((Double)value);
      }
      break;

    case PASS_RATE:
      if (value == null) {
        unsetPassRate();
      } else {
        setPassRate((Double)value);
      }
      break;

    case QUESTION_NUM:
      if (value == null) {
        unsetQuestionNum();
      } else {
        setQuestionNum((Integer)value);
      }
      break;

    case SUBJECT_ID:
      if (value == null) {
        unsetSubjectId();
      } else {
        setSubjectId((String)value);
      }
      break;

    case USER_PAPER_ID:
      if (value == null) {
        unsetUserPaperId();
      } else {
        setUserPaperId((Integer)value);
      }
      break;

    case WRONG:
      if (value == null) {
        unsetWrong();
      } else {
        setWrong((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANSWER_NUMBER:
      return getAnswerNumber();

    case ANSWER_TIME:
      return getAnswerTime();

    case ANSWER_TIME_AVE:
      return getAnswerTimeAve();

    case ANSWER_TIME_AVE_STRING:
      return getAnswerTimeAveString();

    case ANSWER_TIME_STRING:
      return getAnswerTimeString();

    case CORRECT:
      return getCorrect();

    case CORRECT_AVE:
      return getCorrectAve();

    case CORRECT_PERCENT:
      return getCorrectPercent();

    case EVALUATED_SCORE:
      return getEvaluatedScore();

    case PAPER_ID:
      return getPaperId();

    case PAPER_NAME:
      return getPaperName();

    case PAPER_TOTAL:
      return getPaperTotal();

    case PAPER_TOTAL_AVE:
      return getPaperTotalAve();

    case PASS_RATE:
      return getPassRate();

    case QUESTION_NUM:
      return getQuestionNum();

    case SUBJECT_ID:
      return getSubjectId();

    case USER_PAPER_ID:
      return getUserPaperId();

    case WRONG:
      return getWrong();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANSWER_NUMBER:
      return isSetAnswerNumber();
    case ANSWER_TIME:
      return isSetAnswerTime();
    case ANSWER_TIME_AVE:
      return isSetAnswerTimeAve();
    case ANSWER_TIME_AVE_STRING:
      return isSetAnswerTimeAveString();
    case ANSWER_TIME_STRING:
      return isSetAnswerTimeString();
    case CORRECT:
      return isSetCorrect();
    case CORRECT_AVE:
      return isSetCorrectAve();
    case CORRECT_PERCENT:
      return isSetCorrectPercent();
    case EVALUATED_SCORE:
      return isSetEvaluatedScore();
    case PAPER_ID:
      return isSetPaperId();
    case PAPER_NAME:
      return isSetPaperName();
    case PAPER_TOTAL:
      return isSetPaperTotal();
    case PAPER_TOTAL_AVE:
      return isSetPaperTotalAve();
    case PASS_RATE:
      return isSetPassRate();
    case QUESTION_NUM:
      return isSetQuestionNum();
    case SUBJECT_ID:
      return isSetSubjectId();
    case USER_PAPER_ID:
      return isSetUserPaperId();
    case WRONG:
      return isSetWrong();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuizzesPaperReport)
      return this.equals((QuizzesPaperReport)that);
    return false;
  }

  public boolean equals(QuizzesPaperReport that) {
    if (that == null)
      return false;

    boolean this_present_answerNumber = true;
    boolean that_present_answerNumber = true;
    if (this_present_answerNumber || that_present_answerNumber) {
      if (!(this_present_answerNumber && that_present_answerNumber))
        return false;
      if (this.answerNumber != that.answerNumber)
        return false;
    }

    boolean this_present_answerTime = true;
    boolean that_present_answerTime = true;
    if (this_present_answerTime || that_present_answerTime) {
      if (!(this_present_answerTime && that_present_answerTime))
        return false;
      if (this.answerTime != that.answerTime)
        return false;
    }

    boolean this_present_answerTimeAve = true;
    boolean that_present_answerTimeAve = true;
    if (this_present_answerTimeAve || that_present_answerTimeAve) {
      if (!(this_present_answerTimeAve && that_present_answerTimeAve))
        return false;
      if (this.answerTimeAve != that.answerTimeAve)
        return false;
    }

    boolean this_present_answerTimeAveString = true && this.isSetAnswerTimeAveString();
    boolean that_present_answerTimeAveString = true && that.isSetAnswerTimeAveString();
    if (this_present_answerTimeAveString || that_present_answerTimeAveString) {
      if (!(this_present_answerTimeAveString && that_present_answerTimeAveString))
        return false;
      if (!this.answerTimeAveString.equals(that.answerTimeAveString))
        return false;
    }

    boolean this_present_answerTimeString = true && this.isSetAnswerTimeString();
    boolean that_present_answerTimeString = true && that.isSetAnswerTimeString();
    if (this_present_answerTimeString || that_present_answerTimeString) {
      if (!(this_present_answerTimeString && that_present_answerTimeString))
        return false;
      if (!this.answerTimeString.equals(that.answerTimeString))
        return false;
    }

    boolean this_present_correct = true;
    boolean that_present_correct = true;
    if (this_present_correct || that_present_correct) {
      if (!(this_present_correct && that_present_correct))
        return false;
      if (this.correct != that.correct)
        return false;
    }

    boolean this_present_correctAve = true;
    boolean that_present_correctAve = true;
    if (this_present_correctAve || that_present_correctAve) {
      if (!(this_present_correctAve && that_present_correctAve))
        return false;
      if (this.correctAve != that.correctAve)
        return false;
    }

    boolean this_present_correctPercent = true;
    boolean that_present_correctPercent = true;
    if (this_present_correctPercent || that_present_correctPercent) {
      if (!(this_present_correctPercent && that_present_correctPercent))
        return false;
      if (this.correctPercent != that.correctPercent)
        return false;
    }

    boolean this_present_evaluatedScore = true;
    boolean that_present_evaluatedScore = true;
    if (this_present_evaluatedScore || that_present_evaluatedScore) {
      if (!(this_present_evaluatedScore && that_present_evaluatedScore))
        return false;
      if (this.evaluatedScore != that.evaluatedScore)
        return false;
    }

    boolean this_present_paperId = true && this.isSetPaperId();
    boolean that_present_paperId = true && that.isSetPaperId();
    if (this_present_paperId || that_present_paperId) {
      if (!(this_present_paperId && that_present_paperId))
        return false;
      if (!this.paperId.equals(that.paperId))
        return false;
    }

    boolean this_present_paperName = true && this.isSetPaperName();
    boolean that_present_paperName = true && that.isSetPaperName();
    if (this_present_paperName || that_present_paperName) {
      if (!(this_present_paperName && that_present_paperName))
        return false;
      if (!this.paperName.equals(that.paperName))
        return false;
    }

    boolean this_present_paperTotal = true;
    boolean that_present_paperTotal = true;
    if (this_present_paperTotal || that_present_paperTotal) {
      if (!(this_present_paperTotal && that_present_paperTotal))
        return false;
      if (this.paperTotal != that.paperTotal)
        return false;
    }

    boolean this_present_paperTotalAve = true;
    boolean that_present_paperTotalAve = true;
    if (this_present_paperTotalAve || that_present_paperTotalAve) {
      if (!(this_present_paperTotalAve && that_present_paperTotalAve))
        return false;
      if (this.paperTotalAve != that.paperTotalAve)
        return false;
    }

    boolean this_present_passRate = true;
    boolean that_present_passRate = true;
    if (this_present_passRate || that_present_passRate) {
      if (!(this_present_passRate && that_present_passRate))
        return false;
      if (this.passRate != that.passRate)
        return false;
    }

    boolean this_present_questionNum = true;
    boolean that_present_questionNum = true;
    if (this_present_questionNum || that_present_questionNum) {
      if (!(this_present_questionNum && that_present_questionNum))
        return false;
      if (this.questionNum != that.questionNum)
        return false;
    }

    boolean this_present_subjectId = true && this.isSetSubjectId();
    boolean that_present_subjectId = true && that.isSetSubjectId();
    if (this_present_subjectId || that_present_subjectId) {
      if (!(this_present_subjectId && that_present_subjectId))
        return false;
      if (!this.subjectId.equals(that.subjectId))
        return false;
    }

    boolean this_present_userPaperId = true;
    boolean that_present_userPaperId = true;
    if (this_present_userPaperId || that_present_userPaperId) {
      if (!(this_present_userPaperId && that_present_userPaperId))
        return false;
      if (this.userPaperId != that.userPaperId)
        return false;
    }

    boolean this_present_wrong = true;
    boolean that_present_wrong = true;
    if (this_present_wrong || that_present_wrong) {
      if (!(this_present_wrong && that_present_wrong))
        return false;
      if (this.wrong != that.wrong)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_answerNumber = true;
    list.add(present_answerNumber);
    if (present_answerNumber)
      list.add(answerNumber);

    boolean present_answerTime = true;
    list.add(present_answerTime);
    if (present_answerTime)
      list.add(answerTime);

    boolean present_answerTimeAve = true;
    list.add(present_answerTimeAve);
    if (present_answerTimeAve)
      list.add(answerTimeAve);

    boolean present_answerTimeAveString = true && (isSetAnswerTimeAveString());
    list.add(present_answerTimeAveString);
    if (present_answerTimeAveString)
      list.add(answerTimeAveString);

    boolean present_answerTimeString = true && (isSetAnswerTimeString());
    list.add(present_answerTimeString);
    if (present_answerTimeString)
      list.add(answerTimeString);

    boolean present_correct = true;
    list.add(present_correct);
    if (present_correct)
      list.add(correct);

    boolean present_correctAve = true;
    list.add(present_correctAve);
    if (present_correctAve)
      list.add(correctAve);

    boolean present_correctPercent = true;
    list.add(present_correctPercent);
    if (present_correctPercent)
      list.add(correctPercent);

    boolean present_evaluatedScore = true;
    list.add(present_evaluatedScore);
    if (present_evaluatedScore)
      list.add(evaluatedScore);

    boolean present_paperId = true && (isSetPaperId());
    list.add(present_paperId);
    if (present_paperId)
      list.add(paperId);

    boolean present_paperName = true && (isSetPaperName());
    list.add(present_paperName);
    if (present_paperName)
      list.add(paperName);

    boolean present_paperTotal = true;
    list.add(present_paperTotal);
    if (present_paperTotal)
      list.add(paperTotal);

    boolean present_paperTotalAve = true;
    list.add(present_paperTotalAve);
    if (present_paperTotalAve)
      list.add(paperTotalAve);

    boolean present_passRate = true;
    list.add(present_passRate);
    if (present_passRate)
      list.add(passRate);

    boolean present_questionNum = true;
    list.add(present_questionNum);
    if (present_questionNum)
      list.add(questionNum);

    boolean present_subjectId = true && (isSetSubjectId());
    list.add(present_subjectId);
    if (present_subjectId)
      list.add(subjectId);

    boolean present_userPaperId = true;
    list.add(present_userPaperId);
    if (present_userPaperId)
      list.add(userPaperId);

    boolean present_wrong = true;
    list.add(present_wrong);
    if (present_wrong)
      list.add(wrong);

    return list.hashCode();
  }

  @Override
  public int compareTo(QuizzesPaperReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnswerNumber()).compareTo(other.isSetAnswerNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerNumber, other.answerNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerTime()).compareTo(other.isSetAnswerTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerTime, other.answerTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerTimeAve()).compareTo(other.isSetAnswerTimeAve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerTimeAve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerTimeAve, other.answerTimeAve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerTimeAveString()).compareTo(other.isSetAnswerTimeAveString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerTimeAveString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerTimeAveString, other.answerTimeAveString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswerTimeString()).compareTo(other.isSetAnswerTimeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerTimeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerTimeString, other.answerTimeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrect()).compareTo(other.isSetCorrect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correct, other.correct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectAve()).compareTo(other.isSetCorrectAve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectAve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctAve, other.correctAve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectPercent()).compareTo(other.isSetCorrectPercent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectPercent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctPercent, other.correctPercent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaluatedScore()).compareTo(other.isSetEvaluatedScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaluatedScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaluatedScore, other.evaluatedScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperId()).compareTo(other.isSetPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperId, other.paperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperName()).compareTo(other.isSetPaperName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperName, other.paperName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperTotal()).compareTo(other.isSetPaperTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperTotal, other.paperTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaperTotalAve()).compareTo(other.isSetPaperTotalAve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaperTotalAve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paperTotalAve, other.paperTotalAve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassRate()).compareTo(other.isSetPassRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passRate, other.passRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionNum()).compareTo(other.isSetQuestionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionNum, other.questionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectId()).compareTo(other.isSetSubjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectId, other.subjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserPaperId()).compareTo(other.isSetUserPaperId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPaperId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPaperId, other.userPaperId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrong()).compareTo(other.isSetWrong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrong, other.wrong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuizzesPaperReport(");
    boolean first = true;

    sb.append("answerNumber:");
    sb.append(this.answerNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerTime:");
    sb.append(this.answerTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerTimeAve:");
    sb.append(this.answerTimeAve);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerTimeAveString:");
    if (this.answerTimeAveString == null) {
      sb.append("null");
    } else {
      sb.append(this.answerTimeAveString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerTimeString:");
    if (this.answerTimeString == null) {
      sb.append("null");
    } else {
      sb.append(this.answerTimeString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("correct:");
    sb.append(this.correct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctAve:");
    sb.append(this.correctAve);
    first = false;
    if (!first) sb.append(", ");
    sb.append("correctPercent:");
    sb.append(this.correctPercent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("evaluatedScore:");
    sb.append(this.evaluatedScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperId:");
    if (this.paperId == null) {
      sb.append("null");
    } else {
      sb.append(this.paperId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperName:");
    if (this.paperName == null) {
      sb.append("null");
    } else {
      sb.append(this.paperName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperTotal:");
    sb.append(this.paperTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paperTotalAve:");
    sb.append(this.paperTotalAve);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passRate:");
    sb.append(this.passRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionNum:");
    sb.append(this.questionNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectId:");
    if (this.subjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userPaperId:");
    sb.append(this.userPaperId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wrong:");
    sb.append(this.wrong);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuizzesPaperReportStandardSchemeFactory implements SchemeFactory {
    public QuizzesPaperReportStandardScheme getScheme() {
      return new QuizzesPaperReportStandardScheme();
    }
  }

  private static class QuizzesPaperReportStandardScheme extends StandardScheme<QuizzesPaperReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuizzesPaperReport struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANSWER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answerNumber = iprot.readI32();
              struct.setAnswerNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ANSWER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.answerTime = iprot.readDouble();
              struct.setAnswerTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANSWER_TIME_AVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.answerTimeAve = iprot.readDouble();
              struct.setAnswerTimeAveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANSWER_TIME_AVE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerTimeAveString = iprot.readString();
              struct.setAnswerTimeAveStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANSWER_TIME_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.answerTimeString = iprot.readString();
              struct.setAnswerTimeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CORRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correct = iprot.readI32();
              struct.setCorrectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CORRECT_AVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.correctAve = iprot.readI32();
              struct.setCorrectAveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CORRECT_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.correctPercent = iprot.readDouble();
              struct.setCorrectPercentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVALUATED_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.evaluatedScore = iprot.readDouble();
              struct.setEvaluatedScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperId = iprot.readString();
              struct.setPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAPER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paperName = iprot.readString();
              struct.setPaperNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAPER_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paperTotal = iprot.readDouble();
              struct.setPaperTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAPER_TOTAL_AVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.paperTotalAve = iprot.readDouble();
              struct.setPaperTotalAveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PASS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.passRate = iprot.readDouble();
              struct.setPassRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUESTION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.questionNum = iprot.readI32();
              struct.setQuestionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SUBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subjectId = iprot.readString();
              struct.setSubjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_PAPER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userPaperId = iprot.readI32();
              struct.setUserPaperIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // WRONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wrong = iprot.readI32();
              struct.setWrongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuizzesPaperReport struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANSWER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.answerNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANSWER_TIME_FIELD_DESC);
      oprot.writeDouble(struct.answerTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANSWER_TIME_AVE_FIELD_DESC);
      oprot.writeDouble(struct.answerTimeAve);
      oprot.writeFieldEnd();
      if (struct.answerTimeAveString != null) {
        oprot.writeFieldBegin(ANSWER_TIME_AVE_STRING_FIELD_DESC);
        oprot.writeString(struct.answerTimeAveString);
        oprot.writeFieldEnd();
      }
      if (struct.answerTimeString != null) {
        oprot.writeFieldBegin(ANSWER_TIME_STRING_FIELD_DESC);
        oprot.writeString(struct.answerTimeString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CORRECT_FIELD_DESC);
      oprot.writeI32(struct.correct);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_AVE_FIELD_DESC);
      oprot.writeI32(struct.correctAve);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CORRECT_PERCENT_FIELD_DESC);
      oprot.writeDouble(struct.correctPercent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVALUATED_SCORE_FIELD_DESC);
      oprot.writeDouble(struct.evaluatedScore);
      oprot.writeFieldEnd();
      if (struct.paperId != null) {
        oprot.writeFieldBegin(PAPER_ID_FIELD_DESC);
        oprot.writeString(struct.paperId);
        oprot.writeFieldEnd();
      }
      if (struct.paperName != null) {
        oprot.writeFieldBegin(PAPER_NAME_FIELD_DESC);
        oprot.writeString(struct.paperName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAPER_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.paperTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAPER_TOTAL_AVE_FIELD_DESC);
      oprot.writeDouble(struct.paperTotalAve);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PASS_RATE_FIELD_DESC);
      oprot.writeDouble(struct.passRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUESTION_NUM_FIELD_DESC);
      oprot.writeI32(struct.questionNum);
      oprot.writeFieldEnd();
      if (struct.subjectId != null) {
        oprot.writeFieldBegin(SUBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.subjectId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_PAPER_ID_FIELD_DESC);
      oprot.writeI32(struct.userPaperId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRONG_FIELD_DESC);
      oprot.writeI32(struct.wrong);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuizzesPaperReportTupleSchemeFactory implements SchemeFactory {
    public QuizzesPaperReportTupleScheme getScheme() {
      return new QuizzesPaperReportTupleScheme();
    }
  }

  private static class QuizzesPaperReportTupleScheme extends TupleScheme<QuizzesPaperReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuizzesPaperReport struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnswerNumber()) {
        optionals.set(0);
      }
      if (struct.isSetAnswerTime()) {
        optionals.set(1);
      }
      if (struct.isSetAnswerTimeAve()) {
        optionals.set(2);
      }
      if (struct.isSetAnswerTimeAveString()) {
        optionals.set(3);
      }
      if (struct.isSetAnswerTimeString()) {
        optionals.set(4);
      }
      if (struct.isSetCorrect()) {
        optionals.set(5);
      }
      if (struct.isSetCorrectAve()) {
        optionals.set(6);
      }
      if (struct.isSetCorrectPercent()) {
        optionals.set(7);
      }
      if (struct.isSetEvaluatedScore()) {
        optionals.set(8);
      }
      if (struct.isSetPaperId()) {
        optionals.set(9);
      }
      if (struct.isSetPaperName()) {
        optionals.set(10);
      }
      if (struct.isSetPaperTotal()) {
        optionals.set(11);
      }
      if (struct.isSetPaperTotalAve()) {
        optionals.set(12);
      }
      if (struct.isSetPassRate()) {
        optionals.set(13);
      }
      if (struct.isSetQuestionNum()) {
        optionals.set(14);
      }
      if (struct.isSetSubjectId()) {
        optionals.set(15);
      }
      if (struct.isSetUserPaperId()) {
        optionals.set(16);
      }
      if (struct.isSetWrong()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetAnswerNumber()) {
        oprot.writeI32(struct.answerNumber);
      }
      if (struct.isSetAnswerTime()) {
        oprot.writeDouble(struct.answerTime);
      }
      if (struct.isSetAnswerTimeAve()) {
        oprot.writeDouble(struct.answerTimeAve);
      }
      if (struct.isSetAnswerTimeAveString()) {
        oprot.writeString(struct.answerTimeAveString);
      }
      if (struct.isSetAnswerTimeString()) {
        oprot.writeString(struct.answerTimeString);
      }
      if (struct.isSetCorrect()) {
        oprot.writeI32(struct.correct);
      }
      if (struct.isSetCorrectAve()) {
        oprot.writeI32(struct.correctAve);
      }
      if (struct.isSetCorrectPercent()) {
        oprot.writeDouble(struct.correctPercent);
      }
      if (struct.isSetEvaluatedScore()) {
        oprot.writeDouble(struct.evaluatedScore);
      }
      if (struct.isSetPaperId()) {
        oprot.writeString(struct.paperId);
      }
      if (struct.isSetPaperName()) {
        oprot.writeString(struct.paperName);
      }
      if (struct.isSetPaperTotal()) {
        oprot.writeDouble(struct.paperTotal);
      }
      if (struct.isSetPaperTotalAve()) {
        oprot.writeDouble(struct.paperTotalAve);
      }
      if (struct.isSetPassRate()) {
        oprot.writeDouble(struct.passRate);
      }
      if (struct.isSetQuestionNum()) {
        oprot.writeI32(struct.questionNum);
      }
      if (struct.isSetSubjectId()) {
        oprot.writeString(struct.subjectId);
      }
      if (struct.isSetUserPaperId()) {
        oprot.writeI32(struct.userPaperId);
      }
      if (struct.isSetWrong()) {
        oprot.writeI32(struct.wrong);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuizzesPaperReport struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.answerNumber = iprot.readI32();
        struct.setAnswerNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.answerTime = iprot.readDouble();
        struct.setAnswerTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.answerTimeAve = iprot.readDouble();
        struct.setAnswerTimeAveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.answerTimeAveString = iprot.readString();
        struct.setAnswerTimeAveStringIsSet(true);
      }
      if (incoming.get(4)) {
        struct.answerTimeString = iprot.readString();
        struct.setAnswerTimeStringIsSet(true);
      }
      if (incoming.get(5)) {
        struct.correct = iprot.readI32();
        struct.setCorrectIsSet(true);
      }
      if (incoming.get(6)) {
        struct.correctAve = iprot.readI32();
        struct.setCorrectAveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.correctPercent = iprot.readDouble();
        struct.setCorrectPercentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.evaluatedScore = iprot.readDouble();
        struct.setEvaluatedScoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.paperId = iprot.readString();
        struct.setPaperIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.paperName = iprot.readString();
        struct.setPaperNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paperTotal = iprot.readDouble();
        struct.setPaperTotalIsSet(true);
      }
      if (incoming.get(12)) {
        struct.paperTotalAve = iprot.readDouble();
        struct.setPaperTotalAveIsSet(true);
      }
      if (incoming.get(13)) {
        struct.passRate = iprot.readDouble();
        struct.setPassRateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.questionNum = iprot.readI32();
        struct.setQuestionNumIsSet(true);
      }
      if (incoming.get(15)) {
        struct.subjectId = iprot.readString();
        struct.setSubjectIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.userPaperId = iprot.readI32();
        struct.setUserPaperIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.wrong = iprot.readI32();
        struct.setWrongIsSet(true);
      }
    }
  }

}

