/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.api.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class NodeFrequencyInfo implements org.apache.thrift.TBase<NodeFrequencyInfo, NodeFrequencyInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NodeFrequencyInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeFrequencyInfo");

  private static final org.apache.thrift.protocol.TField EXTREMELY_HIGH_FREQUENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("extremelyHighFrequencyCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HIGH_FREQUENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("highFrequencyCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MID_FREQUENCY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("midFrequencyCount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeFrequencyInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeFrequencyInfoTupleSchemeFactory());
  }

  public int extremelyHighFrequencyCount; // required
  public int highFrequencyCount; // required
  public int midFrequencyCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXTREMELY_HIGH_FREQUENCY_COUNT((short)1, "extremelyHighFrequencyCount"),
    HIGH_FREQUENCY_COUNT((short)2, "highFrequencyCount"),
    MID_FREQUENCY_COUNT((short)3, "midFrequencyCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXTREMELY_HIGH_FREQUENCY_COUNT
          return EXTREMELY_HIGH_FREQUENCY_COUNT;
        case 2: // HIGH_FREQUENCY_COUNT
          return HIGH_FREQUENCY_COUNT;
        case 3: // MID_FREQUENCY_COUNT
          return MID_FREQUENCY_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXTREMELYHIGHFREQUENCYCOUNT_ISSET_ID = 0;
  private static final int __HIGHFREQUENCYCOUNT_ISSET_ID = 1;
  private static final int __MIDFREQUENCYCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXTREMELY_HIGH_FREQUENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("extremelyHighFrequencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIGH_FREQUENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("highFrequencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MID_FREQUENCY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("midFrequencyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeFrequencyInfo.class, metaDataMap);
  }

  public NodeFrequencyInfo() {
  }

  public NodeFrequencyInfo(
    int extremelyHighFrequencyCount,
    int highFrequencyCount,
    int midFrequencyCount)
  {
    this();
    this.extremelyHighFrequencyCount = extremelyHighFrequencyCount;
    setExtremelyHighFrequencyCountIsSet(true);
    this.highFrequencyCount = highFrequencyCount;
    setHighFrequencyCountIsSet(true);
    this.midFrequencyCount = midFrequencyCount;
    setMidFrequencyCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeFrequencyInfo(NodeFrequencyInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.extremelyHighFrequencyCount = other.extremelyHighFrequencyCount;
    this.highFrequencyCount = other.highFrequencyCount;
    this.midFrequencyCount = other.midFrequencyCount;
  }

  public NodeFrequencyInfo deepCopy() {
    return new NodeFrequencyInfo(this);
  }

  @Override
  public void clear() {
    setExtremelyHighFrequencyCountIsSet(false);
    this.extremelyHighFrequencyCount = 0;
    setHighFrequencyCountIsSet(false);
    this.highFrequencyCount = 0;
    setMidFrequencyCountIsSet(false);
    this.midFrequencyCount = 0;
  }

  public int getExtremelyHighFrequencyCount() {
    return this.extremelyHighFrequencyCount;
  }

  public NodeFrequencyInfo setExtremelyHighFrequencyCount(int extremelyHighFrequencyCount) {
    this.extremelyHighFrequencyCount = extremelyHighFrequencyCount;
    setExtremelyHighFrequencyCountIsSet(true);
    return this;
  }

  public void unsetExtremelyHighFrequencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTREMELYHIGHFREQUENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field extremelyHighFrequencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetExtremelyHighFrequencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTREMELYHIGHFREQUENCYCOUNT_ISSET_ID);
  }

  public void setExtremelyHighFrequencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTREMELYHIGHFREQUENCYCOUNT_ISSET_ID, value);
  }

  public int getHighFrequencyCount() {
    return this.highFrequencyCount;
  }

  public NodeFrequencyInfo setHighFrequencyCount(int highFrequencyCount) {
    this.highFrequencyCount = highFrequencyCount;
    setHighFrequencyCountIsSet(true);
    return this;
  }

  public void unsetHighFrequencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHFREQUENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field highFrequencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHighFrequencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHFREQUENCYCOUNT_ISSET_ID);
  }

  public void setHighFrequencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHFREQUENCYCOUNT_ISSET_ID, value);
  }

  public int getMidFrequencyCount() {
    return this.midFrequencyCount;
  }

  public NodeFrequencyInfo setMidFrequencyCount(int midFrequencyCount) {
    this.midFrequencyCount = midFrequencyCount;
    setMidFrequencyCountIsSet(true);
    return this;
  }

  public void unsetMidFrequencyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIDFREQUENCYCOUNT_ISSET_ID);
  }

  /** Returns true if field midFrequencyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMidFrequencyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MIDFREQUENCYCOUNT_ISSET_ID);
  }

  public void setMidFrequencyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIDFREQUENCYCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXTREMELY_HIGH_FREQUENCY_COUNT:
      if (value == null) {
        unsetExtremelyHighFrequencyCount();
      } else {
        setExtremelyHighFrequencyCount((Integer)value);
      }
      break;

    case HIGH_FREQUENCY_COUNT:
      if (value == null) {
        unsetHighFrequencyCount();
      } else {
        setHighFrequencyCount((Integer)value);
      }
      break;

    case MID_FREQUENCY_COUNT:
      if (value == null) {
        unsetMidFrequencyCount();
      } else {
        setMidFrequencyCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXTREMELY_HIGH_FREQUENCY_COUNT:
      return getExtremelyHighFrequencyCount();

    case HIGH_FREQUENCY_COUNT:
      return getHighFrequencyCount();

    case MID_FREQUENCY_COUNT:
      return getMidFrequencyCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXTREMELY_HIGH_FREQUENCY_COUNT:
      return isSetExtremelyHighFrequencyCount();
    case HIGH_FREQUENCY_COUNT:
      return isSetHighFrequencyCount();
    case MID_FREQUENCY_COUNT:
      return isSetMidFrequencyCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeFrequencyInfo)
      return this.equals((NodeFrequencyInfo)that);
    return false;
  }

  public boolean equals(NodeFrequencyInfo that) {
    if (that == null)
      return false;

    boolean this_present_extremelyHighFrequencyCount = true;
    boolean that_present_extremelyHighFrequencyCount = true;
    if (this_present_extremelyHighFrequencyCount || that_present_extremelyHighFrequencyCount) {
      if (!(this_present_extremelyHighFrequencyCount && that_present_extremelyHighFrequencyCount))
        return false;
      if (this.extremelyHighFrequencyCount != that.extremelyHighFrequencyCount)
        return false;
    }

    boolean this_present_highFrequencyCount = true;
    boolean that_present_highFrequencyCount = true;
    if (this_present_highFrequencyCount || that_present_highFrequencyCount) {
      if (!(this_present_highFrequencyCount && that_present_highFrequencyCount))
        return false;
      if (this.highFrequencyCount != that.highFrequencyCount)
        return false;
    }

    boolean this_present_midFrequencyCount = true;
    boolean that_present_midFrequencyCount = true;
    if (this_present_midFrequencyCount || that_present_midFrequencyCount) {
      if (!(this_present_midFrequencyCount && that_present_midFrequencyCount))
        return false;
      if (this.midFrequencyCount != that.midFrequencyCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_extremelyHighFrequencyCount = true;
    list.add(present_extremelyHighFrequencyCount);
    if (present_extremelyHighFrequencyCount)
      list.add(extremelyHighFrequencyCount);

    boolean present_highFrequencyCount = true;
    list.add(present_highFrequencyCount);
    if (present_highFrequencyCount)
      list.add(highFrequencyCount);

    boolean present_midFrequencyCount = true;
    list.add(present_midFrequencyCount);
    if (present_midFrequencyCount)
      list.add(midFrequencyCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(NodeFrequencyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExtremelyHighFrequencyCount()).compareTo(other.isSetExtremelyHighFrequencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtremelyHighFrequencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extremelyHighFrequencyCount, other.extremelyHighFrequencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighFrequencyCount()).compareTo(other.isSetHighFrequencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighFrequencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highFrequencyCount, other.highFrequencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMidFrequencyCount()).compareTo(other.isSetMidFrequencyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMidFrequencyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.midFrequencyCount, other.midFrequencyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeFrequencyInfo(");
    boolean first = true;

    sb.append("extremelyHighFrequencyCount:");
    sb.append(this.extremelyHighFrequencyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("highFrequencyCount:");
    sb.append(this.highFrequencyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("midFrequencyCount:");
    sb.append(this.midFrequencyCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeFrequencyInfoStandardSchemeFactory implements SchemeFactory {
    public NodeFrequencyInfoStandardScheme getScheme() {
      return new NodeFrequencyInfoStandardScheme();
    }
  }

  private static class NodeFrequencyInfoStandardScheme extends StandardScheme<NodeFrequencyInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeFrequencyInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXTREMELY_HIGH_FREQUENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.extremelyHighFrequencyCount = iprot.readI32();
              struct.setExtremelyHighFrequencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIGH_FREQUENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.highFrequencyCount = iprot.readI32();
              struct.setHighFrequencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MID_FREQUENCY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.midFrequencyCount = iprot.readI32();
              struct.setMidFrequencyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeFrequencyInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXTREMELY_HIGH_FREQUENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.extremelyHighFrequencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIGH_FREQUENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.highFrequencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MID_FREQUENCY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.midFrequencyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeFrequencyInfoTupleSchemeFactory implements SchemeFactory {
    public NodeFrequencyInfoTupleScheme getScheme() {
      return new NodeFrequencyInfoTupleScheme();
    }
  }

  private static class NodeFrequencyInfoTupleScheme extends TupleScheme<NodeFrequencyInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeFrequencyInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExtremelyHighFrequencyCount()) {
        optionals.set(0);
      }
      if (struct.isSetHighFrequencyCount()) {
        optionals.set(1);
      }
      if (struct.isSetMidFrequencyCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExtremelyHighFrequencyCount()) {
        oprot.writeI32(struct.extremelyHighFrequencyCount);
      }
      if (struct.isSetHighFrequencyCount()) {
        oprot.writeI32(struct.highFrequencyCount);
      }
      if (struct.isSetMidFrequencyCount()) {
        oprot.writeI32(struct.midFrequencyCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeFrequencyInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.extremelyHighFrequencyCount = iprot.readI32();
        struct.setExtremelyHighFrequencyCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.highFrequencyCount = iprot.readI32();
        struct.setHighFrequencyCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.midFrequencyCount = iprot.readI32();
        struct.setMidFrequencyCountIsSet(true);
      }
    }
  }

}

