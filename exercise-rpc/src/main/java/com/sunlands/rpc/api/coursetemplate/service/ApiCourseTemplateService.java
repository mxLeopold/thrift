/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.api.coursetemplate.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-26")
public class ApiCourseTemplateService {

  public interface Iface {

    public List<List<UnitNodeInfo>> retrieveCourseTemplateInfoById(int courseTemplateId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void retrieveCourseTemplateInfoById(int courseTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<UnitNodeInfo>> retrieveCourseTemplateInfoById(int courseTemplateId) throws org.apache.thrift.TException
    {
      send_retrieveCourseTemplateInfoById(courseTemplateId);
      return recv_retrieveCourseTemplateInfoById();
    }

    public void send_retrieveCourseTemplateInfoById(int courseTemplateId) throws org.apache.thrift.TException
    {
      retrieveCourseTemplateInfoById_args args = new retrieveCourseTemplateInfoById_args();
      args.setCourseTemplateId(courseTemplateId);
      sendBase("retrieveCourseTemplateInfoById", args);
    }

    public List<List<UnitNodeInfo>> recv_retrieveCourseTemplateInfoById() throws org.apache.thrift.TException
    {
      retrieveCourseTemplateInfoById_result result = new retrieveCourseTemplateInfoById_result();
      receiveBase(result, "retrieveCourseTemplateInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveCourseTemplateInfoById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void retrieveCourseTemplateInfoById(int courseTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveCourseTemplateInfoById_call method_call = new retrieveCourseTemplateInfoById_call(courseTemplateId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveCourseTemplateInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int courseTemplateId;
      public retrieveCourseTemplateInfoById_call(int courseTemplateId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseTemplateId = courseTemplateId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveCourseTemplateInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveCourseTemplateInfoById_args args = new retrieveCourseTemplateInfoById_args();
        args.setCourseTemplateId(courseTemplateId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<UnitNodeInfo>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveCourseTemplateInfoById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("retrieveCourseTemplateInfoById", new retrieveCourseTemplateInfoById());
      return processMap;
    }

    public static class retrieveCourseTemplateInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveCourseTemplateInfoById_args> {
      public retrieveCourseTemplateInfoById() {
        super("retrieveCourseTemplateInfoById");
      }

      public retrieveCourseTemplateInfoById_args getEmptyArgsInstance() {
        return new retrieveCourseTemplateInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveCourseTemplateInfoById_result getResult(I iface, retrieveCourseTemplateInfoById_args args) throws org.apache.thrift.TException {
        retrieveCourseTemplateInfoById_result result = new retrieveCourseTemplateInfoById_result();
        result.success = iface.retrieveCourseTemplateInfoById(args.courseTemplateId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("retrieveCourseTemplateInfoById", new retrieveCourseTemplateInfoById());
      return processMap;
    }

    public static class retrieveCourseTemplateInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveCourseTemplateInfoById_args, List<List<UnitNodeInfo>>> {
      public retrieveCourseTemplateInfoById() {
        super("retrieveCourseTemplateInfoById");
      }

      public retrieveCourseTemplateInfoById_args getEmptyArgsInstance() {
        return new retrieveCourseTemplateInfoById_args();
      }

      public AsyncMethodCallback<List<List<UnitNodeInfo>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<UnitNodeInfo>>>() {
          public void onComplete(List<List<UnitNodeInfo>> o) {
            retrieveCourseTemplateInfoById_result result = new retrieveCourseTemplateInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveCourseTemplateInfoById_result result = new retrieveCourseTemplateInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveCourseTemplateInfoById_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<UnitNodeInfo>>> resultHandler) throws TException {
        iface.retrieveCourseTemplateInfoById(args.courseTemplateId,resultHandler);
      }
    }

  }

  public static class retrieveCourseTemplateInfoById_args implements org.apache.thrift.TBase<retrieveCourseTemplateInfoById_args, retrieveCourseTemplateInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveCourseTemplateInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveCourseTemplateInfoById_args");

    private static final org.apache.thrift.protocol.TField COURSE_TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseTemplateId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveCourseTemplateInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveCourseTemplateInfoById_argsTupleSchemeFactory());
    }

    public int courseTemplateId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TEMPLATE_ID((short)1, "courseTemplateId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TEMPLATE_ID
            return COURSE_TEMPLATE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSETEMPLATEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseTemplateId", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveCourseTemplateInfoById_args.class, metaDataMap);
    }

    public retrieveCourseTemplateInfoById_args() {
    }

    public retrieveCourseTemplateInfoById_args(
            int courseTemplateId)
    {
      this();
      this.courseTemplateId = courseTemplateId;
      setCourseTemplateIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveCourseTemplateInfoById_args(retrieveCourseTemplateInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.courseTemplateId = other.courseTemplateId;
    }

    public retrieveCourseTemplateInfoById_args deepCopy() {
      return new retrieveCourseTemplateInfoById_args(this);
    }

    @Override
    public void clear() {
      setCourseTemplateIdIsSet(false);
      this.courseTemplateId = 0;
    }

    public int getCourseTemplateId() {
      return this.courseTemplateId;
    }

    public retrieveCourseTemplateInfoById_args setCourseTemplateId(int courseTemplateId) {
      this.courseTemplateId = courseTemplateId;
      setCourseTemplateIdIsSet(true);
      return this;
    }

    public void unsetCourseTemplateId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
    }

    /** Returns true if field courseTemplateId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseTemplateId() {
      return EncodingUtils.testBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID);
    }

    public void setCourseTemplateIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COURSETEMPLATEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case COURSE_TEMPLATE_ID:
          if (value == null) {
            unsetCourseTemplateId();
          } else {
            setCourseTemplateId((Integer)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case COURSE_TEMPLATE_ID:
          return getCourseTemplateId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case COURSE_TEMPLATE_ID:
          return isSetCourseTemplateId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveCourseTemplateInfoById_args)
        return this.equals((retrieveCourseTemplateInfoById_args)that);
      return false;
    }

    public boolean equals(retrieveCourseTemplateInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_courseTemplateId = true;
      boolean that_present_courseTemplateId = true;
      if (this_present_courseTemplateId || that_present_courseTemplateId) {
        if (!(this_present_courseTemplateId && that_present_courseTemplateId))
          return false;
        if (this.courseTemplateId != that.courseTemplateId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_courseTemplateId = true;
      list.add(present_courseTemplateId);
      if (present_courseTemplateId)
        list.add(courseTemplateId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveCourseTemplateInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCourseTemplateId()).compareTo(other.isSetCourseTemplateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseTemplateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseTemplateId, other.courseTemplateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveCourseTemplateInfoById_args(");
      boolean first = true;

      sb.append("courseTemplateId:");
      sb.append(this.courseTemplateId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveCourseTemplateInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveCourseTemplateInfoById_argsStandardScheme getScheme() {
        return new retrieveCourseTemplateInfoById_argsStandardScheme();
      }
    }

    private static class retrieveCourseTemplateInfoById_argsStandardScheme extends StandardScheme<retrieveCourseTemplateInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveCourseTemplateInfoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TEMPLATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.courseTemplateId = iprot.readI32();
                struct.setCourseTemplateIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveCourseTemplateInfoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_TEMPLATE_ID_FIELD_DESC);
        oprot.writeI32(struct.courseTemplateId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveCourseTemplateInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveCourseTemplateInfoById_argsTupleScheme getScheme() {
        return new retrieveCourseTemplateInfoById_argsTupleScheme();
      }
    }

    private static class retrieveCourseTemplateInfoById_argsTupleScheme extends TupleScheme<retrieveCourseTemplateInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveCourseTemplateInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCourseTemplateId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCourseTemplateId()) {
          oprot.writeI32(struct.courseTemplateId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveCourseTemplateInfoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.courseTemplateId = iprot.readI32();
          struct.setCourseTemplateIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveCourseTemplateInfoById_result implements org.apache.thrift.TBase<retrieveCourseTemplateInfoById_result, retrieveCourseTemplateInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveCourseTemplateInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveCourseTemplateInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveCourseTemplateInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveCourseTemplateInfoById_resultTupleSchemeFactory());
    }

    public List<List<UnitNodeInfo>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                      new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitNodeInfo.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveCourseTemplateInfoById_result.class, metaDataMap);
    }

    public retrieveCourseTemplateInfoById_result() {
    }

    public retrieveCourseTemplateInfoById_result(
            List<List<UnitNodeInfo>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveCourseTemplateInfoById_result(retrieveCourseTemplateInfoById_result other) {
      if (other.isSetSuccess()) {
        List<List<UnitNodeInfo>> __this__success = new ArrayList<List<UnitNodeInfo>>(other.success.size());
        for (List<UnitNodeInfo> other_element : other.success) {
          List<UnitNodeInfo> __this__success_copy = new ArrayList<UnitNodeInfo>(other_element.size());
          for (UnitNodeInfo other_element_element : other_element) {
            __this__success_copy.add(new UnitNodeInfo(other_element_element));
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public retrieveCourseTemplateInfoById_result deepCopy() {
      return new retrieveCourseTemplateInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<UnitNodeInfo>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<UnitNodeInfo> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<UnitNodeInfo>>();
      }
      this.success.add(elem);
    }

    public List<List<UnitNodeInfo>> getSuccess() {
      return this.success;
    }

    public retrieveCourseTemplateInfoById_result setSuccess(List<List<UnitNodeInfo>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((List<List<UnitNodeInfo>>)value);
          }
          break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveCourseTemplateInfoById_result)
        return this.equals((retrieveCourseTemplateInfoById_result)that);
      return false;
    }

    public boolean equals(retrieveCourseTemplateInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveCourseTemplateInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveCourseTemplateInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveCourseTemplateInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveCourseTemplateInfoById_resultStandardScheme getScheme() {
        return new retrieveCourseTemplateInfoById_resultStandardScheme();
      }
    }

    private static class retrieveCourseTemplateInfoById_resultStandardScheme extends StandardScheme<retrieveCourseTemplateInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveCourseTemplateInfoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<List<UnitNodeInfo>>(_list8.size);
                  List<UnitNodeInfo> _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    {
                      org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                      _elem9 = new ArrayList<UnitNodeInfo>(_list11.size);
                      UnitNodeInfo _elem12;
                      for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                      {
                        _elem12 = new UnitNodeInfo();
                        _elem12.read(iprot);
                        _elem9.add(_elem12);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveCourseTemplateInfoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<UnitNodeInfo> _iter14 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter14.size()));
                for (UnitNodeInfo _iter15 : _iter14)
                {
                  _iter15.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveCourseTemplateInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveCourseTemplateInfoById_resultTupleScheme getScheme() {
        return new retrieveCourseTemplateInfoById_resultTupleScheme();
      }
    }

    private static class retrieveCourseTemplateInfoById_resultTupleScheme extends TupleScheme<retrieveCourseTemplateInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveCourseTemplateInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<UnitNodeInfo> _iter16 : struct.success)
            {
              {
                oprot.writeI32(_iter16.size());
                for (UnitNodeInfo _iter17 : _iter16)
                {
                  _iter17.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveCourseTemplateInfoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<UnitNodeInfo>>(_list18.size);
            List<UnitNodeInfo> _elem19;
            for (int _i20 = 0; _i20 < _list18.size; ++_i20)
            {
              {
                org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem19 = new ArrayList<UnitNodeInfo>(_list21.size);
                UnitNodeInfo _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new UnitNodeInfo();
                  _elem22.read(iprot);
                  _elem19.add(_elem22);
                }
              }
              struct.success.add(_elem19);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
