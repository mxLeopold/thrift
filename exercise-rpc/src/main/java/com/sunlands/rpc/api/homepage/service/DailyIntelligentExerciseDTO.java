/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.api.homepage.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-21")
public class DailyIntelligentExerciseDTO implements org.apache.thrift.TBase<DailyIntelligentExerciseDTO, DailyIntelligentExerciseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<DailyIntelligentExerciseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DailyIntelligentExerciseDTO");

  private static final org.apache.thrift.protocol.TField DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("done", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_TIKU_FIELD_DESC = new org.apache.thrift.protocol.TField("hasTiku", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DailyIntelligentExerciseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DailyIntelligentExerciseDTOTupleSchemeFactory());
  }

  public int done; // required
  public int hasTiku; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DONE((short)1, "done"),
    HAS_TIKU((short)2, "hasTiku"),
    TYPE((short)3, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DONE
          return DONE;
        case 2: // HAS_TIKU
          return HAS_TIKU;
        case 3: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DONE_ISSET_ID = 0;
  private static final int __HASTIKU_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DONE, new org.apache.thrift.meta_data.FieldMetaData("done", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_TIKU, new org.apache.thrift.meta_data.FieldMetaData("hasTiku", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DailyIntelligentExerciseDTO.class, metaDataMap);
  }

  public DailyIntelligentExerciseDTO() {
  }

  public DailyIntelligentExerciseDTO(
    int done,
    int hasTiku,
    String type)
  {
    this();
    this.done = done;
    setDoneIsSet(true);
    this.hasTiku = hasTiku;
    setHasTikuIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DailyIntelligentExerciseDTO(DailyIntelligentExerciseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.done = other.done;
    this.hasTiku = other.hasTiku;
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public DailyIntelligentExerciseDTO deepCopy() {
    return new DailyIntelligentExerciseDTO(this);
  }

  @Override
  public void clear() {
    setDoneIsSet(false);
    this.done = 0;
    setHasTikuIsSet(false);
    this.hasTiku = 0;
    this.type = null;
  }

  public int getDone() {
    return this.done;
  }

  public DailyIntelligentExerciseDTO setDone(int done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  /** Returns true if field done is set (has been assigned a value) and false otherwise */
  public boolean isSetDone() {
    return EncodingUtils.testBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DONE_ISSET_ID, value);
  }

  public int getHasTiku() {
    return this.hasTiku;
  }

  public DailyIntelligentExerciseDTO setHasTiku(int hasTiku) {
    this.hasTiku = hasTiku;
    setHasTikuIsSet(true);
    return this;
  }

  public void unsetHasTiku() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASTIKU_ISSET_ID);
  }

  /** Returns true if field hasTiku is set (has been assigned a value) and false otherwise */
  public boolean isSetHasTiku() {
    return EncodingUtils.testBit(__isset_bitfield, __HASTIKU_ISSET_ID);
  }

  public void setHasTikuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASTIKU_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public DailyIntelligentExerciseDTO setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((Integer)value);
      }
      break;

    case HAS_TIKU:
      if (value == null) {
        unsetHasTiku();
      } else {
        setHasTiku((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DONE:
      return getDone();

    case HAS_TIKU:
      return getHasTiku();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DONE:
      return isSetDone();
    case HAS_TIKU:
      return isSetHasTiku();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DailyIntelligentExerciseDTO)
      return this.equals((DailyIntelligentExerciseDTO)that);
    return false;
  }

  public boolean equals(DailyIntelligentExerciseDTO that) {
    if (that == null)
      return false;

    boolean this_present_done = true;
    boolean that_present_done = true;
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_hasTiku = true;
    boolean that_present_hasTiku = true;
    if (this_present_hasTiku || that_present_hasTiku) {
      if (!(this_present_hasTiku && that_present_hasTiku))
        return false;
      if (this.hasTiku != that.hasTiku)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_done = true;
    list.add(present_done);
    if (present_done)
      list.add(done);

    boolean present_hasTiku = true;
    list.add(present_hasTiku);
    if (present_hasTiku)
      list.add(hasTiku);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(DailyIntelligentExerciseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDone()).compareTo(other.isSetDone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.done, other.done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasTiku()).compareTo(other.isSetHasTiku());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasTiku()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasTiku, other.hasTiku);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DailyIntelligentExerciseDTO(");
    boolean first = true;

    sb.append("done:");
    sb.append(this.done);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasTiku:");
    sb.append(this.hasTiku);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DailyIntelligentExerciseDTOStandardSchemeFactory implements SchemeFactory {
    public DailyIntelligentExerciseDTOStandardScheme getScheme() {
      return new DailyIntelligentExerciseDTOStandardScheme();
    }
  }

  private static class DailyIntelligentExerciseDTOStandardScheme extends StandardScheme<DailyIntelligentExerciseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DailyIntelligentExerciseDTO struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.done = iprot.readI32();
              struct.setDoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_TIKU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasTiku = iprot.readI32();
              struct.setHasTikuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DailyIntelligentExerciseDTO struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DONE_FIELD_DESC);
      oprot.writeI32(struct.done);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_TIKU_FIELD_DESC);
      oprot.writeI32(struct.hasTiku);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DailyIntelligentExerciseDTOTupleSchemeFactory implements SchemeFactory {
    public DailyIntelligentExerciseDTOTupleScheme getScheme() {
      return new DailyIntelligentExerciseDTOTupleScheme();
    }
  }

  private static class DailyIntelligentExerciseDTOTupleScheme extends TupleScheme<DailyIntelligentExerciseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DailyIntelligentExerciseDTO struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDone()) {
        optionals.set(0);
      }
      if (struct.isSetHasTiku()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDone()) {
        oprot.writeI32(struct.done);
      }
      if (struct.isSetHasTiku()) {
        oprot.writeI32(struct.hasTiku);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DailyIntelligentExerciseDTO struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.done = iprot.readI32();
        struct.setDoneIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasTiku = iprot.readI32();
        struct.setHasTikuIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

