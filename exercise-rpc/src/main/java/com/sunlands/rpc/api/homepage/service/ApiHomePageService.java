/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.api.homepage.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-21")
public class ApiHomePageService {

  public interface Iface {

    public int getSubmitQuestionCount(int ordDetailId, int studentId) throws TException;

    public DailyIntelligentExerciseDTO isDailyIntelligentExerciseDone(int ordDetailId, int studentId) throws TException;

  }

  public interface AsyncIface {

    public void getSubmitQuestionCount(int ordDetailId, int studentId, AsyncMethodCallback resultHandler) throws TException;

    public void isDailyIntelligentExerciseDone(int ordDetailId, int studentId, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int getSubmitQuestionCount(int ordDetailId, int studentId) throws TException
    {
      send_getSubmitQuestionCount(ordDetailId, studentId);
      return recv_getSubmitQuestionCount();
    }

    public void send_getSubmitQuestionCount(int ordDetailId, int studentId) throws TException
    {
      getSubmitQuestionCount_args args = new getSubmitQuestionCount_args();
      args.setOrdDetailId(ordDetailId);
      args.setStudentId(studentId);
      sendBase("getSubmitQuestionCount", args);
    }

    public int recv_getSubmitQuestionCount() throws TException
    {
      getSubmitQuestionCount_result result = new getSubmitQuestionCount_result();
      receiveBase(result, "getSubmitQuestionCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubmitQuestionCount failed: unknown result");
    }

    public DailyIntelligentExerciseDTO isDailyIntelligentExerciseDone(int ordDetailId, int studentId) throws TException
    {
      send_isDailyIntelligentExerciseDone(ordDetailId, studentId);
      return recv_isDailyIntelligentExerciseDone();
    }

    public void send_isDailyIntelligentExerciseDone(int ordDetailId, int studentId) throws TException
    {
      isDailyIntelligentExerciseDone_args args = new isDailyIntelligentExerciseDone_args();
      args.setOrdDetailId(ordDetailId);
      args.setStudentId(studentId);
      sendBase("isDailyIntelligentExerciseDone", args);
    }

    public DailyIntelligentExerciseDTO recv_isDailyIntelligentExerciseDone() throws TException
    {
      isDailyIntelligentExerciseDone_result result = new isDailyIntelligentExerciseDone_result();
      receiveBase(result, "isDailyIntelligentExerciseDone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isDailyIntelligentExerciseDone failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getSubmitQuestionCount(int ordDetailId, int studentId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getSubmitQuestionCount_call method_call = new getSubmitQuestionCount_call(ordDetailId, studentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubmitQuestionCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ordDetailId;
      private int studentId;
      public getSubmitQuestionCount_call(int ordDetailId, int studentId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ordDetailId = ordDetailId;
        this.studentId = studentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubmitQuestionCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubmitQuestionCount_args args = new getSubmitQuestionCount_args();
        args.setOrdDetailId(ordDetailId);
        args.setStudentId(studentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubmitQuestionCount();
      }
    }

    public void isDailyIntelligentExerciseDone(int ordDetailId, int studentId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      isDailyIntelligentExerciseDone_call method_call = new isDailyIntelligentExerciseDone_call(ordDetailId, studentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isDailyIntelligentExerciseDone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int ordDetailId;
      private int studentId;
      public isDailyIntelligentExerciseDone_call(int ordDetailId, int studentId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ordDetailId = ordDetailId;
        this.studentId = studentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isDailyIntelligentExerciseDone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isDailyIntelligentExerciseDone_args args = new isDailyIntelligentExerciseDone_args();
        args.setOrdDetailId(ordDetailId);
        args.setStudentId(studentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DailyIntelligentExerciseDTO getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isDailyIntelligentExerciseDone();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getSubmitQuestionCount", new getSubmitQuestionCount());
      processMap.put("isDailyIntelligentExerciseDone", new isDailyIntelligentExerciseDone());
      return processMap;
    }

    public static class getSubmitQuestionCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubmitQuestionCount_args> {
      public getSubmitQuestionCount() {
        super("getSubmitQuestionCount");
      }

      public getSubmitQuestionCount_args getEmptyArgsInstance() {
        return new getSubmitQuestionCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubmitQuestionCount_result getResult(I iface, getSubmitQuestionCount_args args) throws TException {
        getSubmitQuestionCount_result result = new getSubmitQuestionCount_result();
        result.success = iface.getSubmitQuestionCount(args.ordDetailId, args.studentId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isDailyIntelligentExerciseDone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isDailyIntelligentExerciseDone_args> {
      public isDailyIntelligentExerciseDone() {
        super("isDailyIntelligentExerciseDone");
      }

      public isDailyIntelligentExerciseDone_args getEmptyArgsInstance() {
        return new isDailyIntelligentExerciseDone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isDailyIntelligentExerciseDone_result getResult(I iface, isDailyIntelligentExerciseDone_args args) throws TException {
        isDailyIntelligentExerciseDone_result result = new isDailyIntelligentExerciseDone_result();
        result.success = iface.isDailyIntelligentExerciseDone(args.ordDetailId, args.studentId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getSubmitQuestionCount", new getSubmitQuestionCount());
      processMap.put("isDailyIntelligentExerciseDone", new isDailyIntelligentExerciseDone());
      return processMap;
    }

    public static class getSubmitQuestionCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubmitQuestionCount_args, Integer> {
      public getSubmitQuestionCount() {
        super("getSubmitQuestionCount");
      }

      public getSubmitQuestionCount_args getEmptyArgsInstance() {
        return new getSubmitQuestionCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getSubmitQuestionCount_result result = new getSubmitQuestionCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubmitQuestionCount_result result = new getSubmitQuestionCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubmitQuestionCount_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getSubmitQuestionCount(args.ordDetailId, args.studentId,resultHandler);
      }
    }

    public static class isDailyIntelligentExerciseDone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isDailyIntelligentExerciseDone_args, DailyIntelligentExerciseDTO> {
      public isDailyIntelligentExerciseDone() {
        super("isDailyIntelligentExerciseDone");
      }

      public isDailyIntelligentExerciseDone_args getEmptyArgsInstance() {
        return new isDailyIntelligentExerciseDone_args();
      }

      public AsyncMethodCallback<DailyIntelligentExerciseDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DailyIntelligentExerciseDTO>() { 
          public void onComplete(DailyIntelligentExerciseDTO o) {
            isDailyIntelligentExerciseDone_result result = new isDailyIntelligentExerciseDone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isDailyIntelligentExerciseDone_result result = new isDailyIntelligentExerciseDone_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isDailyIntelligentExerciseDone_args args, AsyncMethodCallback<DailyIntelligentExerciseDTO> resultHandler) throws TException {
        iface.isDailyIntelligentExerciseDone(args.ordDetailId, args.studentId,resultHandler);
      }
    }

  }

  public static class getSubmitQuestionCount_args implements org.apache.thrift.TBase<getSubmitQuestionCount_args, getSubmitQuestionCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubmitQuestionCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubmitQuestionCount_args");

    private static final org.apache.thrift.protocol.TField ORD_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ordDetailId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubmitQuestionCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubmitQuestionCount_argsTupleSchemeFactory());
    }

    public int ordDetailId; // required
    public int studentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORD_DETAIL_ID((short)1, "ordDetailId"),
      STUDENT_ID((short)2, "studentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORD_DETAIL_ID
            return ORD_DETAIL_ID;
          case 2: // STUDENT_ID
            return STUDENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDDETAILID_ISSET_ID = 0;
    private static final int __STUDENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORD_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("ordDetailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubmitQuestionCount_args.class, metaDataMap);
    }

    public getSubmitQuestionCount_args() {
    }

    public getSubmitQuestionCount_args(
      int ordDetailId,
      int studentId)
    {
      this();
      this.ordDetailId = ordDetailId;
      setOrdDetailIdIsSet(true);
      this.studentId = studentId;
      setStudentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubmitQuestionCount_args(getSubmitQuestionCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ordDetailId = other.ordDetailId;
      this.studentId = other.studentId;
    }

    public getSubmitQuestionCount_args deepCopy() {
      return new getSubmitQuestionCount_args(this);
    }

    @Override
    public void clear() {
      setOrdDetailIdIsSet(false);
      this.ordDetailId = 0;
      setStudentIdIsSet(false);
      this.studentId = 0;
    }

    public int getOrdDetailId() {
      return this.ordDetailId;
    }

    public getSubmitQuestionCount_args setOrdDetailId(int ordDetailId) {
      this.ordDetailId = ordDetailId;
      setOrdDetailIdIsSet(true);
      return this;
    }

    public void unsetOrdDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
    }

    /** Returns true if field ordDetailId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
    }

    public void setOrdDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDDETAILID_ISSET_ID, value);
    }

    public int getStudentId() {
      return this.studentId;
    }

    public getSubmitQuestionCount_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORD_DETAIL_ID:
        if (value == null) {
          unsetOrdDetailId();
        } else {
          setOrdDetailId((Integer)value);
        }
        break;

      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORD_DETAIL_ID:
        return getOrdDetailId();

      case STUDENT_ID:
        return getStudentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORD_DETAIL_ID:
        return isSetOrdDetailId();
      case STUDENT_ID:
        return isSetStudentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubmitQuestionCount_args)
        return this.equals((getSubmitQuestionCount_args)that);
      return false;
    }

    public boolean equals(getSubmitQuestionCount_args that) {
      if (that == null)
        return false;

      boolean this_present_ordDetailId = true;
      boolean that_present_ordDetailId = true;
      if (this_present_ordDetailId || that_present_ordDetailId) {
        if (!(this_present_ordDetailId && that_present_ordDetailId))
          return false;
        if (this.ordDetailId != that.ordDetailId)
          return false;
      }

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ordDetailId = true;
      list.add(present_ordDetailId);
      if (present_ordDetailId)
        list.add(ordDetailId);

      boolean present_studentId = true;
      list.add(present_studentId);
      if (present_studentId)
        list.add(studentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubmitQuestionCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrdDetailId()).compareTo(other.isSetOrdDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordDetailId, other.ordDetailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubmitQuestionCount_args(");
      boolean first = true;

      sb.append("ordDetailId:");
      sb.append(this.ordDetailId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubmitQuestionCount_argsStandardSchemeFactory implements SchemeFactory {
      public getSubmitQuestionCount_argsStandardScheme getScheme() {
        return new getSubmitQuestionCount_argsStandardScheme();
      }
    }

    private static class getSubmitQuestionCount_argsStandardScheme extends StandardScheme<getSubmitQuestionCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubmitQuestionCount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORD_DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ordDetailId = iprot.readI32();
                struct.setOrdDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubmitQuestionCount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORD_DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.ordDetailId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubmitQuestionCount_argsTupleSchemeFactory implements SchemeFactory {
      public getSubmitQuestionCount_argsTupleScheme getScheme() {
        return new getSubmitQuestionCount_argsTupleScheme();
      }
    }

    private static class getSubmitQuestionCount_argsTupleScheme extends TupleScheme<getSubmitQuestionCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubmitQuestionCount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrdDetailId()) {
          optionals.set(0);
        }
        if (struct.isSetStudentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrdDetailId()) {
          oprot.writeI32(struct.ordDetailId);
        }
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubmitQuestionCount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ordDetailId = iprot.readI32();
          struct.setOrdDetailIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
      }
    }

  }

  public static class getSubmitQuestionCount_result implements org.apache.thrift.TBase<getSubmitQuestionCount_result, getSubmitQuestionCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubmitQuestionCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubmitQuestionCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubmitQuestionCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubmitQuestionCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubmitQuestionCount_result.class, metaDataMap);
    }

    public getSubmitQuestionCount_result() {
    }

    public getSubmitQuestionCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubmitQuestionCount_result(getSubmitQuestionCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getSubmitQuestionCount_result deepCopy() {
      return new getSubmitQuestionCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getSubmitQuestionCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubmitQuestionCount_result)
        return this.equals((getSubmitQuestionCount_result)that);
      return false;
    }

    public boolean equals(getSubmitQuestionCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubmitQuestionCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubmitQuestionCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubmitQuestionCount_resultStandardSchemeFactory implements SchemeFactory {
      public getSubmitQuestionCount_resultStandardScheme getScheme() {
        return new getSubmitQuestionCount_resultStandardScheme();
      }
    }

    private static class getSubmitQuestionCount_resultStandardScheme extends StandardScheme<getSubmitQuestionCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubmitQuestionCount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubmitQuestionCount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubmitQuestionCount_resultTupleSchemeFactory implements SchemeFactory {
      public getSubmitQuestionCount_resultTupleScheme getScheme() {
        return new getSubmitQuestionCount_resultTupleScheme();
      }
    }

    private static class getSubmitQuestionCount_resultTupleScheme extends TupleScheme<getSubmitQuestionCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubmitQuestionCount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubmitQuestionCount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isDailyIntelligentExerciseDone_args implements org.apache.thrift.TBase<isDailyIntelligentExerciseDone_args, isDailyIntelligentExerciseDone_args._Fields>, java.io.Serializable, Cloneable, Comparable<isDailyIntelligentExerciseDone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isDailyIntelligentExerciseDone_args");

    private static final org.apache.thrift.protocol.TField ORD_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ordDetailId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isDailyIntelligentExerciseDone_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isDailyIntelligentExerciseDone_argsTupleSchemeFactory());
    }

    public int ordDetailId; // required
    public int studentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORD_DETAIL_ID((short)1, "ordDetailId"),
      STUDENT_ID((short)2, "studentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORD_DETAIL_ID
            return ORD_DETAIL_ID;
          case 2: // STUDENT_ID
            return STUDENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDDETAILID_ISSET_ID = 0;
    private static final int __STUDENTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORD_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("ordDetailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isDailyIntelligentExerciseDone_args.class, metaDataMap);
    }

    public isDailyIntelligentExerciseDone_args() {
    }

    public isDailyIntelligentExerciseDone_args(
      int ordDetailId,
      int studentId)
    {
      this();
      this.ordDetailId = ordDetailId;
      setOrdDetailIdIsSet(true);
      this.studentId = studentId;
      setStudentIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isDailyIntelligentExerciseDone_args(isDailyIntelligentExerciseDone_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.ordDetailId = other.ordDetailId;
      this.studentId = other.studentId;
    }

    public isDailyIntelligentExerciseDone_args deepCopy() {
      return new isDailyIntelligentExerciseDone_args(this);
    }

    @Override
    public void clear() {
      setOrdDetailIdIsSet(false);
      this.ordDetailId = 0;
      setStudentIdIsSet(false);
      this.studentId = 0;
    }

    public int getOrdDetailId() {
      return this.ordDetailId;
    }

    public isDailyIntelligentExerciseDone_args setOrdDetailId(int ordDetailId) {
      this.ordDetailId = ordDetailId;
      setOrdDetailIdIsSet(true);
      return this;
    }

    public void unsetOrdDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
    }

    /** Returns true if field ordDetailId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
    }

    public void setOrdDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDDETAILID_ISSET_ID, value);
    }

    public int getStudentId() {
      return this.studentId;
    }

    public isDailyIntelligentExerciseDone_args setStudentId(int studentId) {
      this.studentId = studentId;
      setStudentIdIsSet(true);
      return this;
    }

    public void unsetStudentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
    }

    public void setStudentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORD_DETAIL_ID:
        if (value == null) {
          unsetOrdDetailId();
        } else {
          setOrdDetailId((Integer)value);
        }
        break;

      case STUDENT_ID:
        if (value == null) {
          unsetStudentId();
        } else {
          setStudentId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORD_DETAIL_ID:
        return getOrdDetailId();

      case STUDENT_ID:
        return getStudentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORD_DETAIL_ID:
        return isSetOrdDetailId();
      case STUDENT_ID:
        return isSetStudentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isDailyIntelligentExerciseDone_args)
        return this.equals((isDailyIntelligentExerciseDone_args)that);
      return false;
    }

    public boolean equals(isDailyIntelligentExerciseDone_args that) {
      if (that == null)
        return false;

      boolean this_present_ordDetailId = true;
      boolean that_present_ordDetailId = true;
      if (this_present_ordDetailId || that_present_ordDetailId) {
        if (!(this_present_ordDetailId && that_present_ordDetailId))
          return false;
        if (this.ordDetailId != that.ordDetailId)
          return false;
      }

      boolean this_present_studentId = true;
      boolean that_present_studentId = true;
      if (this_present_studentId || that_present_studentId) {
        if (!(this_present_studentId && that_present_studentId))
          return false;
        if (this.studentId != that.studentId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ordDetailId = true;
      list.add(present_ordDetailId);
      if (present_ordDetailId)
        list.add(ordDetailId);

      boolean present_studentId = true;
      list.add(present_studentId);
      if (present_studentId)
        list.add(studentId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isDailyIntelligentExerciseDone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrdDetailId()).compareTo(other.isSetOrdDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordDetailId, other.ordDetailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isDailyIntelligentExerciseDone_args(");
      boolean first = true;

      sb.append("ordDetailId:");
      sb.append(this.ordDetailId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("studentId:");
      sb.append(this.studentId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isDailyIntelligentExerciseDone_argsStandardSchemeFactory implements SchemeFactory {
      public isDailyIntelligentExerciseDone_argsStandardScheme getScheme() {
        return new isDailyIntelligentExerciseDone_argsStandardScheme();
      }
    }

    private static class isDailyIntelligentExerciseDone_argsStandardScheme extends StandardScheme<isDailyIntelligentExerciseDone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isDailyIntelligentExerciseDone_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORD_DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ordDetailId = iprot.readI32();
                struct.setOrdDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STUDENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentId = iprot.readI32();
                struct.setStudentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isDailyIntelligentExerciseDone_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORD_DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.ordDetailId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
        oprot.writeI32(struct.studentId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isDailyIntelligentExerciseDone_argsTupleSchemeFactory implements SchemeFactory {
      public isDailyIntelligentExerciseDone_argsTupleScheme getScheme() {
        return new isDailyIntelligentExerciseDone_argsTupleScheme();
      }
    }

    private static class isDailyIntelligentExerciseDone_argsTupleScheme extends TupleScheme<isDailyIntelligentExerciseDone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isDailyIntelligentExerciseDone_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrdDetailId()) {
          optionals.set(0);
        }
        if (struct.isSetStudentId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrdDetailId()) {
          oprot.writeI32(struct.ordDetailId);
        }
        if (struct.isSetStudentId()) {
          oprot.writeI32(struct.studentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isDailyIntelligentExerciseDone_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ordDetailId = iprot.readI32();
          struct.setOrdDetailIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.studentId = iprot.readI32();
          struct.setStudentIdIsSet(true);
        }
      }
    }

  }

  public static class isDailyIntelligentExerciseDone_result implements org.apache.thrift.TBase<isDailyIntelligentExerciseDone_result, isDailyIntelligentExerciseDone_result._Fields>, java.io.Serializable, Cloneable, Comparable<isDailyIntelligentExerciseDone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isDailyIntelligentExerciseDone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isDailyIntelligentExerciseDone_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isDailyIntelligentExerciseDone_resultTupleSchemeFactory());
    }

    public DailyIntelligentExerciseDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailyIntelligentExerciseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isDailyIntelligentExerciseDone_result.class, metaDataMap);
    }

    public isDailyIntelligentExerciseDone_result() {
    }

    public isDailyIntelligentExerciseDone_result(
      DailyIntelligentExerciseDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isDailyIntelligentExerciseDone_result(isDailyIntelligentExerciseDone_result other) {
      if (other.isSetSuccess()) {
        this.success = new DailyIntelligentExerciseDTO(other.success);
      }
    }

    public isDailyIntelligentExerciseDone_result deepCopy() {
      return new isDailyIntelligentExerciseDone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DailyIntelligentExerciseDTO getSuccess() {
      return this.success;
    }

    public isDailyIntelligentExerciseDone_result setSuccess(DailyIntelligentExerciseDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DailyIntelligentExerciseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isDailyIntelligentExerciseDone_result)
        return this.equals((isDailyIntelligentExerciseDone_result)that);
      return false;
    }

    public boolean equals(isDailyIntelligentExerciseDone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isDailyIntelligentExerciseDone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isDailyIntelligentExerciseDone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isDailyIntelligentExerciseDone_resultStandardSchemeFactory implements SchemeFactory {
      public isDailyIntelligentExerciseDone_resultStandardScheme getScheme() {
        return new isDailyIntelligentExerciseDone_resultStandardScheme();
      }
    }

    private static class isDailyIntelligentExerciseDone_resultStandardScheme extends StandardScheme<isDailyIntelligentExerciseDone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isDailyIntelligentExerciseDone_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DailyIntelligentExerciseDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isDailyIntelligentExerciseDone_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isDailyIntelligentExerciseDone_resultTupleSchemeFactory implements SchemeFactory {
      public isDailyIntelligentExerciseDone_resultTupleScheme getScheme() {
        return new isDailyIntelligentExerciseDone_resultTupleScheme();
      }
    }

    private static class isDailyIntelligentExerciseDone_resultTupleScheme extends TupleScheme<isDailyIntelligentExerciseDone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isDailyIntelligentExerciseDone_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isDailyIntelligentExerciseDone_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DailyIntelligentExerciseDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
