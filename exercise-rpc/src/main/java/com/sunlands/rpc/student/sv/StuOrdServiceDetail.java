/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.rpc.student.sv;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-28")
public class StuOrdServiceDetail implements org.apache.thrift.TBase<StuOrdServiceDetail, StuOrdServiceDetail._Fields>, java.io.Serializable, Cloneable, Comparable<StuOrdServiceDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StuOrdServiceDetail");

  private static final org.apache.thrift.protocol.TField STU_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("stuRole", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("teams", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StuOrdServiceDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StuOrdServiceDetailTupleSchemeFactory());
  }

  public Role stuRole; // required
  public List<OrdServiceTeam> teams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STU_ROLE((short)1, "stuRole"),
    TEAMS((short)2, "teams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STU_ROLE
          return STU_ROLE;
        case 2: // TEAMS
          return TEAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STU_ROLE, new org.apache.thrift.meta_data.FieldMetaData("stuRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "Role")));
    tmpMap.put(_Fields.TEAMS, new org.apache.thrift.meta_data.FieldMetaData("teams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdServiceTeam.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StuOrdServiceDetail.class, metaDataMap);
  }

  public StuOrdServiceDetail() {
  }

  public StuOrdServiceDetail(
    Role stuRole,
    List<OrdServiceTeam> teams)
  {
    this();
    this.stuRole = stuRole;
    this.teams = teams;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StuOrdServiceDetail(StuOrdServiceDetail other) {
    if (other.isSetStuRole()) {
      this.stuRole = other.stuRole;
    }
    if (other.isSetTeams()) {
      List<OrdServiceTeam> __this__teams = new ArrayList<OrdServiceTeam>(other.teams.size());
      for (OrdServiceTeam other_element : other.teams) {
        __this__teams.add(new OrdServiceTeam(other_element));
      }
      this.teams = __this__teams;
    }
  }

  public StuOrdServiceDetail deepCopy() {
    return new StuOrdServiceDetail(this);
  }

  @Override
  public void clear() {
    this.stuRole = null;
    this.teams = null;
  }

  public Role getStuRole() {
    return this.stuRole;
  }

  public StuOrdServiceDetail setStuRole(Role stuRole) {
    this.stuRole = stuRole;
    return this;
  }

  public void unsetStuRole() {
    this.stuRole = null;
  }

  /** Returns true if field stuRole is set (has been assigned a value) and false otherwise */
  public boolean isSetStuRole() {
    return this.stuRole != null;
  }

  public void setStuRoleIsSet(boolean value) {
    if (!value) {
      this.stuRole = null;
    }
  }

  public int getTeamsSize() {
    return (this.teams == null) ? 0 : this.teams.size();
  }

  public java.util.Iterator<OrdServiceTeam> getTeamsIterator() {
    return (this.teams == null) ? null : this.teams.iterator();
  }

  public void addToTeams(OrdServiceTeam elem) {
    if (this.teams == null) {
      this.teams = new ArrayList<OrdServiceTeam>();
    }
    this.teams.add(elem);
  }

  public List<OrdServiceTeam> getTeams() {
    return this.teams;
  }

  public StuOrdServiceDetail setTeams(List<OrdServiceTeam> teams) {
    this.teams = teams;
    return this;
  }

  public void unsetTeams() {
    this.teams = null;
  }

  /** Returns true if field teams is set (has been assigned a value) and false otherwise */
  public boolean isSetTeams() {
    return this.teams != null;
  }

  public void setTeamsIsSet(boolean value) {
    if (!value) {
      this.teams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STU_ROLE:
      if (value == null) {
        unsetStuRole();
      } else {
        setStuRole((Role)value);
      }
      break;

    case TEAMS:
      if (value == null) {
        unsetTeams();
      } else {
        setTeams((List<OrdServiceTeam>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STU_ROLE:
      return getStuRole();

    case TEAMS:
      return getTeams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STU_ROLE:
      return isSetStuRole();
    case TEAMS:
      return isSetTeams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StuOrdServiceDetail)
      return this.equals((StuOrdServiceDetail)that);
    return false;
  }

  public boolean equals(StuOrdServiceDetail that) {
    if (that == null)
      return false;

    boolean this_present_stuRole = true && this.isSetStuRole();
    boolean that_present_stuRole = true && that.isSetStuRole();
    if (this_present_stuRole || that_present_stuRole) {
      if (!(this_present_stuRole && that_present_stuRole))
        return false;
      if (!this.stuRole.equals(that.stuRole))
        return false;
    }

    boolean this_present_teams = true && this.isSetTeams();
    boolean that_present_teams = true && that.isSetTeams();
    if (this_present_teams || that_present_teams) {
      if (!(this_present_teams && that_present_teams))
        return false;
      if (!this.teams.equals(that.teams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stuRole = true && (isSetStuRole());
    list.add(present_stuRole);
    if (present_stuRole)
      list.add(stuRole.getValue());

    boolean present_teams = true && (isSetTeams());
    list.add(present_teams);
    if (present_teams)
      list.add(teams);

    return list.hashCode();
  }

  @Override
  public int compareTo(StuOrdServiceDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStuRole()).compareTo(other.isSetStuRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStuRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuRole, other.stuRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeams()).compareTo(other.isSetTeams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teams, other.teams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StuOrdServiceDetail(");
    boolean first = true;

    sb.append("stuRole:");
    if (this.stuRole == null) {
      sb.append("null");
    } else {
      sb.append(this.stuRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teams:");
    if (this.teams == null) {
      sb.append("null");
    } else {
      sb.append(this.teams);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StuOrdServiceDetailStandardSchemeFactory implements SchemeFactory {
    public StuOrdServiceDetailStandardScheme getScheme() {
      return new StuOrdServiceDetailStandardScheme();
    }
  }

  private static class StuOrdServiceDetailStandardScheme extends StandardScheme<StuOrdServiceDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StuOrdServiceDetail struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STU_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stuRole = Role.findByValue(iprot.readI32());
              struct.setStuRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.teams = new ArrayList<OrdServiceTeam>(_list8.size);
                OrdServiceTeam _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new OrdServiceTeam();
                  _elem9.read(iprot);
                  struct.teams.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTeamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StuOrdServiceDetail struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stuRole != null) {
        oprot.writeFieldBegin(STU_ROLE_FIELD_DESC);
        oprot.writeI32(struct.stuRole.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.teams != null) {
        oprot.writeFieldBegin(TEAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teams.size()));
          for (OrdServiceTeam _iter11 : struct.teams)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StuOrdServiceDetailTupleSchemeFactory implements SchemeFactory {
    public StuOrdServiceDetailTupleScheme getScheme() {
      return new StuOrdServiceDetailTupleScheme();
    }
  }

  private static class StuOrdServiceDetailTupleScheme extends TupleScheme<StuOrdServiceDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StuOrdServiceDetail struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStuRole()) {
        optionals.set(0);
      }
      if (struct.isSetTeams()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStuRole()) {
        oprot.writeI32(struct.stuRole.getValue());
      }
      if (struct.isSetTeams()) {
        {
          oprot.writeI32(struct.teams.size());
          for (OrdServiceTeam _iter12 : struct.teams)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StuOrdServiceDetail struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.stuRole = Role.findByValue(iprot.readI32());
        struct.setStuRoleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.teams = new ArrayList<OrdServiceTeam>(_list13.size);
          OrdServiceTeam _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new OrdServiceTeam();
            _elem14.read(iprot);
            struct.teams.add(_elem14);
          }
        }
        struct.setTeamsIsSet(true);
      }
    }
  }

}

