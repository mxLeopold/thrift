/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-24")
public class Student implements org.apache.thrift.TBase<Student, Student._Fields>, java.io.Serializable, Cloneable, Comparable<Student> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Student");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CERT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certNo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("education", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VIP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("vipUser", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField EMAIL263_FIELD_DESC = new org.apache.thrift.protocol.TField("email263", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StudentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StudentTupleSchemeFactory());
  }

  public int id; // required
  public String mobile; // required
  public String username; // optional
  public String nickname; // optional
  public String sex; // optional
  public String email; // optional
  public String certType; // optional
  public String certNo; // optional
  public String education; // optional
  public String birthday; // optional
  public String imId; // optional
  public String avatar; // optional
  public int vipUser; // optional
  public String signature; // optional
  public String email263; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MOBILE((short)2, "mobile"),
    USERNAME((short)3, "username"),
    NICKNAME((short)4, "nickname"),
    SEX((short)5, "sex"),
    EMAIL((short)6, "email"),
    CERT_TYPE((short)7, "certType"),
    CERT_NO((short)8, "certNo"),
    EDUCATION((short)9, "education"),
    BIRTHDAY((short)10, "birthday"),
    IM_ID((short)11, "imId"),
    AVATAR((short)12, "avatar"),
    VIP_USER((short)13, "vipUser"),
    SIGNATURE((short)14, "signature"),
    EMAIL263((short)15, "email263");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MOBILE
          return MOBILE;
        case 3: // USERNAME
          return USERNAME;
        case 4: // NICKNAME
          return NICKNAME;
        case 5: // SEX
          return SEX;
        case 6: // EMAIL
          return EMAIL;
        case 7: // CERT_TYPE
          return CERT_TYPE;
        case 8: // CERT_NO
          return CERT_NO;
        case 9: // EDUCATION
          return EDUCATION;
        case 10: // BIRTHDAY
          return BIRTHDAY;
        case 11: // IM_ID
          return IM_ID;
        case 12: // AVATAR
          return AVATAR;
        case 13: // VIP_USER
          return VIP_USER;
        case 14: // SIGNATURE
          return SIGNATURE;
        case 15: // EMAIL263
          return EMAIL263;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __VIPUSER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USERNAME, _Fields.NICKNAME, _Fields.SEX, _Fields.EMAIL, _Fields.CERT_TYPE, _Fields.CERT_NO, _Fields.EDUCATION, _Fields.BIRTHDAY, _Fields.IM_ID, _Fields.AVATAR, _Fields.VIP_USER, _Fields.SIGNATURE, _Fields.EMAIL263};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_NO, new org.apache.thrift.meta_data.FieldMetaData("certNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EDUCATION, new org.apache.thrift.meta_data.FieldMetaData("education", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IM_ID, new org.apache.thrift.meta_data.FieldMetaData("imId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIP_USER, new org.apache.thrift.meta_data.FieldMetaData("vipUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL263, new org.apache.thrift.meta_data.FieldMetaData("email263", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Student.class, metaDataMap);
  }

  public Student() {
  }

  public Student(
    int id,
    String mobile)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.mobile = mobile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Student(Student other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetCertType()) {
      this.certType = other.certType;
    }
    if (other.isSetCertNo()) {
      this.certNo = other.certNo;
    }
    if (other.isSetEducation()) {
      this.education = other.education;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetImId()) {
      this.imId = other.imId;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    this.vipUser = other.vipUser;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetEmail263()) {
      this.email263 = other.email263;
    }
  }

  public Student deepCopy() {
    return new Student(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.mobile = null;
    this.username = null;
    this.nickname = null;
    this.sex = null;
    this.email = null;
    this.certType = null;
    this.certNo = null;
    this.education = null;
    this.birthday = null;
    this.imId = null;
    this.avatar = null;
    setVipUserIsSet(false);
    this.vipUser = 0;
    this.signature = null;
    this.email263 = null;
  }

  public int getId() {
    return this.id;
  }

  public Student setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getMobile() {
    return this.mobile;
  }

  public Student setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public Student setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public Student setNickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public Student setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public Student setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getCertType() {
    return this.certType;
  }

  public Student setCertType(String certType) {
    this.certType = certType;
    return this;
  }

  public void unsetCertType() {
    this.certType = null;
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return this.certType != null;
  }

  public void setCertTypeIsSet(boolean value) {
    if (!value) {
      this.certType = null;
    }
  }

  public String getCertNo() {
    return this.certNo;
  }

  public Student setCertNo(String certNo) {
    this.certNo = certNo;
    return this;
  }

  public void unsetCertNo() {
    this.certNo = null;
  }

  /** Returns true if field certNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCertNo() {
    return this.certNo != null;
  }

  public void setCertNoIsSet(boolean value) {
    if (!value) {
      this.certNo = null;
    }
  }

  public String getEducation() {
    return this.education;
  }

  public Student setEducation(String education) {
    this.education = education;
    return this;
  }

  public void unsetEducation() {
    this.education = null;
  }

  /** Returns true if field education is set (has been assigned a value) and false otherwise */
  public boolean isSetEducation() {
    return this.education != null;
  }

  public void setEducationIsSet(boolean value) {
    if (!value) {
      this.education = null;
    }
  }

  public String getBirthday() {
    return this.birthday;
  }

  public Student setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public String getImId() {
    return this.imId;
  }

  public Student setImId(String imId) {
    this.imId = imId;
    return this;
  }

  public void unsetImId() {
    this.imId = null;
  }

  /** Returns true if field imId is set (has been assigned a value) and false otherwise */
  public boolean isSetImId() {
    return this.imId != null;
  }

  public void setImIdIsSet(boolean value) {
    if (!value) {
      this.imId = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public Student setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int getVipUser() {
    return this.vipUser;
  }

  public Student setVipUser(int vipUser) {
    this.vipUser = vipUser;
    setVipUserIsSet(true);
    return this;
  }

  public void unsetVipUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPUSER_ISSET_ID);
  }

  /** Returns true if field vipUser is set (has been assigned a value) and false otherwise */
  public boolean isSetVipUser() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPUSER_ISSET_ID);
  }

  public void setVipUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPUSER_ISSET_ID, value);
  }

  public String getSignature() {
    return this.signature;
  }

  public Student setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public String getEmail263() {
    return this.email263;
  }

  public Student setEmail263(String email263) {
    this.email263 = email263;
    return this;
  }

  public void unsetEmail263() {
    this.email263 = null;
  }

  /** Returns true if field email263 is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail263() {
    return this.email263 != null;
  }

  public void setEmail263IsSet(boolean value) {
    if (!value) {
      this.email263 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((String)value);
      }
      break;

    case CERT_NO:
      if (value == null) {
        unsetCertNo();
      } else {
        setCertNo((String)value);
      }
      break;

    case EDUCATION:
      if (value == null) {
        unsetEducation();
      } else {
        setEducation((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case IM_ID:
      if (value == null) {
        unsetImId();
      } else {
        setImId((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case VIP_USER:
      if (value == null) {
        unsetVipUser();
      } else {
        setVipUser((Integer)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case EMAIL263:
      if (value == null) {
        unsetEmail263();
      } else {
        setEmail263((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MOBILE:
      return getMobile();

    case USERNAME:
      return getUsername();

    case NICKNAME:
      return getNickname();

    case SEX:
      return getSex();

    case EMAIL:
      return getEmail();

    case CERT_TYPE:
      return getCertType();

    case CERT_NO:
      return getCertNo();

    case EDUCATION:
      return getEducation();

    case BIRTHDAY:
      return getBirthday();

    case IM_ID:
      return getImId();

    case AVATAR:
      return getAvatar();

    case VIP_USER:
      return getVipUser();

    case SIGNATURE:
      return getSignature();

    case EMAIL263:
      return getEmail263();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MOBILE:
      return isSetMobile();
    case USERNAME:
      return isSetUsername();
    case NICKNAME:
      return isSetNickname();
    case SEX:
      return isSetSex();
    case EMAIL:
      return isSetEmail();
    case CERT_TYPE:
      return isSetCertType();
    case CERT_NO:
      return isSetCertNo();
    case EDUCATION:
      return isSetEducation();
    case BIRTHDAY:
      return isSetBirthday();
    case IM_ID:
      return isSetImId();
    case AVATAR:
      return isSetAvatar();
    case VIP_USER:
      return isSetVipUser();
    case SIGNATURE:
      return isSetSignature();
    case EMAIL263:
      return isSetEmail263();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Student)
      return this.equals((Student)that);
    return false;
  }

  public boolean equals(Student that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_certType = true && this.isSetCertType();
    boolean that_present_certType = true && that.isSetCertType();
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (!this.certType.equals(that.certType))
        return false;
    }

    boolean this_present_certNo = true && this.isSetCertNo();
    boolean that_present_certNo = true && that.isSetCertNo();
    if (this_present_certNo || that_present_certNo) {
      if (!(this_present_certNo && that_present_certNo))
        return false;
      if (!this.certNo.equals(that.certNo))
        return false;
    }

    boolean this_present_education = true && this.isSetEducation();
    boolean that_present_education = true && that.isSetEducation();
    if (this_present_education || that_present_education) {
      if (!(this_present_education && that_present_education))
        return false;
      if (!this.education.equals(that.education))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_imId = true && this.isSetImId();
    boolean that_present_imId = true && that.isSetImId();
    if (this_present_imId || that_present_imId) {
      if (!(this_present_imId && that_present_imId))
        return false;
      if (!this.imId.equals(that.imId))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_vipUser = true && this.isSetVipUser();
    boolean that_present_vipUser = true && that.isSetVipUser();
    if (this_present_vipUser || that_present_vipUser) {
      if (!(this_present_vipUser && that_present_vipUser))
        return false;
      if (this.vipUser != that.vipUser)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_email263 = true && this.isSetEmail263();
    boolean that_present_email263 = true && that.isSetEmail263();
    if (this_present_email263 || that_present_email263) {
      if (!(this_present_email263 && that_present_email263))
        return false;
      if (!this.email263.equals(that.email263))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_nickname = true && (isSetNickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_email = true && (isSetEmail());
    list.add(present_email);
    if (present_email)
      list.add(email);

    boolean present_certType = true && (isSetCertType());
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_certNo = true && (isSetCertNo());
    list.add(present_certNo);
    if (present_certNo)
      list.add(certNo);

    boolean present_education = true && (isSetEducation());
    list.add(present_education);
    if (present_education)
      list.add(education);

    boolean present_birthday = true && (isSetBirthday());
    list.add(present_birthday);
    if (present_birthday)
      list.add(birthday);

    boolean present_imId = true && (isSetImId());
    list.add(present_imId);
    if (present_imId)
      list.add(imId);

    boolean present_avatar = true && (isSetAvatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_vipUser = true && (isSetVipUser());
    list.add(present_vipUser);
    if (present_vipUser)
      list.add(vipUser);

    boolean present_signature = true && (isSetSignature());
    list.add(present_signature);
    if (present_signature)
      list.add(signature);

    boolean present_email263 = true && (isSetEmail263());
    list.add(present_email263);
    if (present_email263)
      list.add(email263);

    return list.hashCode();
  }

  @Override
  public int compareTo(Student other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertNo()).compareTo(other.isSetCertNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certNo, other.certNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEducation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImId()).compareTo(other.isSetImId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imId, other.imId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipUser()).compareTo(other.isSetVipUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipUser, other.vipUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail263()).compareTo(other.isSetEmail263());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail263()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email263, other.email263);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Student(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      if (this.sex == null) {
        sb.append("null");
      } else {
        sb.append(this.sex);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetCertType()) {
      if (!first) sb.append(", ");
      sb.append("certType:");
      if (this.certType == null) {
        sb.append("null");
      } else {
        sb.append(this.certType);
      }
      first = false;
    }
    if (isSetCertNo()) {
      if (!first) sb.append(", ");
      sb.append("certNo:");
      if (this.certNo == null) {
        sb.append("null");
      } else {
        sb.append(this.certNo);
      }
      first = false;
    }
    if (isSetEducation()) {
      if (!first) sb.append(", ");
      sb.append("education:");
      if (this.education == null) {
        sb.append("null");
      } else {
        sb.append(this.education);
      }
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      if (this.birthday == null) {
        sb.append("null");
      } else {
        sb.append(this.birthday);
      }
      first = false;
    }
    if (isSetImId()) {
      if (!first) sb.append(", ");
      sb.append("imId:");
      if (this.imId == null) {
        sb.append("null");
      } else {
        sb.append(this.imId);
      }
      first = false;
    }
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetVipUser()) {
      if (!first) sb.append(", ");
      sb.append("vipUser:");
      sb.append(this.vipUser);
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    if (isSetEmail263()) {
      if (!first) sb.append(", ");
      sb.append("email263:");
      if (this.email263 == null) {
        sb.append("null");
      } else {
        sb.append(this.email263);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StudentStandardSchemeFactory implements SchemeFactory {
    public StudentStandardScheme getScheme() {
      return new StudentStandardScheme();
    }
  }

  private static class StudentStandardScheme extends StandardScheme<Student> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Student struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certType = iprot.readString();
              struct.setCertTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CERT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certNo = iprot.readString();
              struct.setCertNoIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EDUCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.education = iprot.readString();
              struct.setEducationIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imId = iprot.readString();
              struct.setImIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipUser = iprot.readI32();
              struct.setVipUserIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EMAIL263
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email263 = iprot.readString();
              struct.setEmail263IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Student struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sex != null) {
        if (struct.isSetSex()) {
          oprot.writeFieldBegin(SEX_FIELD_DESC);
          oprot.writeString(struct.sex);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.certType != null) {
        if (struct.isSetCertType()) {
          oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
          oprot.writeString(struct.certType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.certNo != null) {
        if (struct.isSetCertNo()) {
          oprot.writeFieldBegin(CERT_NO_FIELD_DESC);
          oprot.writeString(struct.certNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.education != null) {
        if (struct.isSetEducation()) {
          oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
          oprot.writeString(struct.education);
          oprot.writeFieldEnd();
        }
      }
      if (struct.birthday != null) {
        if (struct.isSetBirthday()) {
          oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.birthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imId != null) {
        if (struct.isSetImId()) {
          oprot.writeFieldBegin(IM_ID_FIELD_DESC);
          oprot.writeString(struct.imId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVipUser()) {
        oprot.writeFieldBegin(VIP_USER_FIELD_DESC);
        oprot.writeI32(struct.vipUser);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email263 != null) {
        if (struct.isSetEmail263()) {
          oprot.writeFieldBegin(EMAIL263_FIELD_DESC);
          oprot.writeString(struct.email263);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StudentTupleSchemeFactory implements SchemeFactory {
    public StudentTupleScheme getScheme() {
      return new StudentTupleScheme();
    }
  }

  private static class StudentTupleScheme extends TupleScheme<Student> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Student struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMobile()) {
        optionals.set(1);
      }
      if (struct.isSetUsername()) {
        optionals.set(2);
      }
      if (struct.isSetNickname()) {
        optionals.set(3);
      }
      if (struct.isSetSex()) {
        optionals.set(4);
      }
      if (struct.isSetEmail()) {
        optionals.set(5);
      }
      if (struct.isSetCertType()) {
        optionals.set(6);
      }
      if (struct.isSetCertNo()) {
        optionals.set(7);
      }
      if (struct.isSetEducation()) {
        optionals.set(8);
      }
      if (struct.isSetBirthday()) {
        optionals.set(9);
      }
      if (struct.isSetImId()) {
        optionals.set(10);
      }
      if (struct.isSetAvatar()) {
        optionals.set(11);
      }
      if (struct.isSetVipUser()) {
        optionals.set(12);
      }
      if (struct.isSetSignature()) {
        optionals.set(13);
      }
      if (struct.isSetEmail263()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetCertType()) {
        oprot.writeString(struct.certType);
      }
      if (struct.isSetCertNo()) {
        oprot.writeString(struct.certNo);
      }
      if (struct.isSetEducation()) {
        oprot.writeString(struct.education);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetImId()) {
        oprot.writeString(struct.imId);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetVipUser()) {
        oprot.writeI32(struct.vipUser);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetEmail263()) {
        oprot.writeString(struct.email263);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Student struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(2)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(6)) {
        struct.certType = iprot.readString();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.certNo = iprot.readString();
        struct.setCertNoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.education = iprot.readString();
        struct.setEducationIsSet(true);
      }
      if (incoming.get(9)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.imId = iprot.readString();
        struct.setImIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(12)) {
        struct.vipUser = iprot.readI32();
        struct.setVipUserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(14)) {
        struct.email263 = iprot.readString();
        struct.setEmail263IsSet(true);
      }
    }
  }

}

