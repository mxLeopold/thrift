/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-21")
public class SubjectKnowledgeTreeDTO implements org.apache.thrift.TBase<SubjectKnowledgeTreeDTO, SubjectKnowledgeTreeDTO._Fields>, java.io.Serializable, Cloneable, Comparable<SubjectKnowledgeTreeDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubjectKnowledgeTreeDTO");

  private static final org.apache.thrift.protocol.TField HAS_KNOWLEDGE_TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasKnowledgeTree", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUBJECT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubjectKnowledgeTreeDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubjectKnowledgeTreeDTOTupleSchemeFactory());
  }

  public int hasKnowledgeTree; // required
  public List<Integer> subjectIdList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_KNOWLEDGE_TREE((short)1, "hasKnowledgeTree"),
    SUBJECT_ID_LIST((short)2, "subjectIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_KNOWLEDGE_TREE
          return HAS_KNOWLEDGE_TREE;
        case 2: // SUBJECT_ID_LIST
          return SUBJECT_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASKNOWLEDGETREE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_KNOWLEDGE_TREE, new org.apache.thrift.meta_data.FieldMetaData("hasKnowledgeTree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("subjectIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubjectKnowledgeTreeDTO.class, metaDataMap);
  }

  public SubjectKnowledgeTreeDTO() {
  }

  public SubjectKnowledgeTreeDTO(
    int hasKnowledgeTree,
    List<Integer> subjectIdList)
  {
    this();
    this.hasKnowledgeTree = hasKnowledgeTree;
    setHasKnowledgeTreeIsSet(true);
    this.subjectIdList = subjectIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubjectKnowledgeTreeDTO(SubjectKnowledgeTreeDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasKnowledgeTree = other.hasKnowledgeTree;
    if (other.isSetSubjectIdList()) {
      List<Integer> __this__subjectIdList = new ArrayList<Integer>(other.subjectIdList);
      this.subjectIdList = __this__subjectIdList;
    }
  }

  public SubjectKnowledgeTreeDTO deepCopy() {
    return new SubjectKnowledgeTreeDTO(this);
  }

  @Override
  public void clear() {
    setHasKnowledgeTreeIsSet(false);
    this.hasKnowledgeTree = 0;
    this.subjectIdList = null;
  }

  public int getHasKnowledgeTree() {
    return this.hasKnowledgeTree;
  }

  public SubjectKnowledgeTreeDTO setHasKnowledgeTree(int hasKnowledgeTree) {
    this.hasKnowledgeTree = hasKnowledgeTree;
    setHasKnowledgeTreeIsSet(true);
    return this;
  }

  public void unsetHasKnowledgeTree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASKNOWLEDGETREE_ISSET_ID);
  }

  /** Returns true if field hasKnowledgeTree is set (has been assigned a value) and false otherwise */
  public boolean isSetHasKnowledgeTree() {
    return EncodingUtils.testBit(__isset_bitfield, __HASKNOWLEDGETREE_ISSET_ID);
  }

  public void setHasKnowledgeTreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASKNOWLEDGETREE_ISSET_ID, value);
  }

  public int getSubjectIdListSize() {
    return (this.subjectIdList == null) ? 0 : this.subjectIdList.size();
  }

  public java.util.Iterator<Integer> getSubjectIdListIterator() {
    return (this.subjectIdList == null) ? null : this.subjectIdList.iterator();
  }

  public void addToSubjectIdList(int elem) {
    if (this.subjectIdList == null) {
      this.subjectIdList = new ArrayList<Integer>();
    }
    this.subjectIdList.add(elem);
  }

  public List<Integer> getSubjectIdList() {
    return this.subjectIdList;
  }

  public SubjectKnowledgeTreeDTO setSubjectIdList(List<Integer> subjectIdList) {
    this.subjectIdList = subjectIdList;
    return this;
  }

  public void unsetSubjectIdList() {
    this.subjectIdList = null;
  }

  /** Returns true if field subjectIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectIdList() {
    return this.subjectIdList != null;
  }

  public void setSubjectIdListIsSet(boolean value) {
    if (!value) {
      this.subjectIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HAS_KNOWLEDGE_TREE:
      if (value == null) {
        unsetHasKnowledgeTree();
      } else {
        setHasKnowledgeTree((Integer)value);
      }
      break;

    case SUBJECT_ID_LIST:
      if (value == null) {
        unsetSubjectIdList();
      } else {
        setSubjectIdList((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_KNOWLEDGE_TREE:
      return getHasKnowledgeTree();

    case SUBJECT_ID_LIST:
      return getSubjectIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HAS_KNOWLEDGE_TREE:
      return isSetHasKnowledgeTree();
    case SUBJECT_ID_LIST:
      return isSetSubjectIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubjectKnowledgeTreeDTO)
      return this.equals((SubjectKnowledgeTreeDTO)that);
    return false;
  }

  public boolean equals(SubjectKnowledgeTreeDTO that) {
    if (that == null)
      return false;

    boolean this_present_hasKnowledgeTree = true;
    boolean that_present_hasKnowledgeTree = true;
    if (this_present_hasKnowledgeTree || that_present_hasKnowledgeTree) {
      if (!(this_present_hasKnowledgeTree && that_present_hasKnowledgeTree))
        return false;
      if (this.hasKnowledgeTree != that.hasKnowledgeTree)
        return false;
    }

    boolean this_present_subjectIdList = true && this.isSetSubjectIdList();
    boolean that_present_subjectIdList = true && that.isSetSubjectIdList();
    if (this_present_subjectIdList || that_present_subjectIdList) {
      if (!(this_present_subjectIdList && that_present_subjectIdList))
        return false;
      if (!this.subjectIdList.equals(that.subjectIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hasKnowledgeTree = true;
    list.add(present_hasKnowledgeTree);
    if (present_hasKnowledgeTree)
      list.add(hasKnowledgeTree);

    boolean present_subjectIdList = true && (isSetSubjectIdList());
    list.add(present_subjectIdList);
    if (present_subjectIdList)
      list.add(subjectIdList);

    return list.hashCode();
  }

  @Override
  public int compareTo(SubjectKnowledgeTreeDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHasKnowledgeTree()).compareTo(other.isSetHasKnowledgeTree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasKnowledgeTree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasKnowledgeTree, other.hasKnowledgeTree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubjectIdList()).compareTo(other.isSetSubjectIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectIdList, other.subjectIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubjectKnowledgeTreeDTO(");
    boolean first = true;

    sb.append("hasKnowledgeTree:");
    sb.append(this.hasKnowledgeTree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectIdList:");
    if (this.subjectIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubjectKnowledgeTreeDTOStandardSchemeFactory implements SchemeFactory {
    public SubjectKnowledgeTreeDTOStandardScheme getScheme() {
      return new SubjectKnowledgeTreeDTOStandardScheme();
    }
  }

  private static class SubjectKnowledgeTreeDTOStandardScheme extends StandardScheme<SubjectKnowledgeTreeDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubjectKnowledgeTreeDTO struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_KNOWLEDGE_TREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hasKnowledgeTree = iprot.readI32();
              struct.setHasKnowledgeTreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBJECT_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.subjectIdList = new ArrayList<Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.subjectIdList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setSubjectIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubjectKnowledgeTreeDTO struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_KNOWLEDGE_TREE_FIELD_DESC);
      oprot.writeI32(struct.hasKnowledgeTree);
      oprot.writeFieldEnd();
      if (struct.subjectIdList != null) {
        oprot.writeFieldBegin(SUBJECT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.subjectIdList.size()));
          for (int _iter51 : struct.subjectIdList)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubjectKnowledgeTreeDTOTupleSchemeFactory implements SchemeFactory {
    public SubjectKnowledgeTreeDTOTupleScheme getScheme() {
      return new SubjectKnowledgeTreeDTOTupleScheme();
    }
  }

  private static class SubjectKnowledgeTreeDTOTupleScheme extends TupleScheme<SubjectKnowledgeTreeDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubjectKnowledgeTreeDTO struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHasKnowledgeTree()) {
        optionals.set(0);
      }
      if (struct.isSetSubjectIdList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHasKnowledgeTree()) {
        oprot.writeI32(struct.hasKnowledgeTree);
      }
      if (struct.isSetSubjectIdList()) {
        {
          oprot.writeI32(struct.subjectIdList.size());
          for (int _iter52 : struct.subjectIdList)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubjectKnowledgeTreeDTO struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.hasKnowledgeTree = iprot.readI32();
        struct.setHasKnowledgeTreeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.subjectIdList = new ArrayList<Integer>(_list53.size);
          int _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readI32();
            struct.subjectIdList.add(_elem54);
          }
        }
        struct.setSubjectIdListIsSet(true);
      }
    }
  }

}

