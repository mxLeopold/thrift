/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-24")
public class TeacherServiceStudentResult implements org.apache.thrift.TBase<TeacherServiceStudentResult, TeacherServiceStudentResult._Fields>, java.io.Serializable, Cloneable, Comparable<TeacherServiceStudentResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeacherServiceStudentResult");

  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_STUDENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceStudentList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeacherServiceStudentResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TeacherServiceStudentResultTupleSchemeFactory());
  }

  public int count; // required
  public List<TeacherServiceStudent> serviceStudentList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNT((short)1, "count"),
    SERVICE_STUDENT_LIST((short)2, "serviceStudentList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNT
          return COUNT;
        case 2: // SERVICE_STUDENT_LIST
          return SERVICE_STUDENT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_STUDENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("serviceStudentList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeacherServiceStudent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeacherServiceStudentResult.class, metaDataMap);
  }

  public TeacherServiceStudentResult() {
  }

  public TeacherServiceStudentResult(
    int count,
    List<TeacherServiceStudent> serviceStudentList)
  {
    this();
    this.count = count;
    setCountIsSet(true);
    this.serviceStudentList = serviceStudentList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeacherServiceStudentResult(TeacherServiceStudentResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.count = other.count;
    if (other.isSetServiceStudentList()) {
      List<TeacherServiceStudent> __this__serviceStudentList = new ArrayList<TeacherServiceStudent>(other.serviceStudentList.size());
      for (TeacherServiceStudent other_element : other.serviceStudentList) {
        __this__serviceStudentList.add(new TeacherServiceStudent(other_element));
      }
      this.serviceStudentList = __this__serviceStudentList;
    }
  }

  public TeacherServiceStudentResult deepCopy() {
    return new TeacherServiceStudentResult(this);
  }

  @Override
  public void clear() {
    setCountIsSet(false);
    this.count = 0;
    this.serviceStudentList = null;
  }

  public int getCount() {
    return this.count;
  }

  public TeacherServiceStudentResult setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getServiceStudentListSize() {
    return (this.serviceStudentList == null) ? 0 : this.serviceStudentList.size();
  }

  public java.util.Iterator<TeacherServiceStudent> getServiceStudentListIterator() {
    return (this.serviceStudentList == null) ? null : this.serviceStudentList.iterator();
  }

  public void addToServiceStudentList(TeacherServiceStudent elem) {
    if (this.serviceStudentList == null) {
      this.serviceStudentList = new ArrayList<TeacherServiceStudent>();
    }
    this.serviceStudentList.add(elem);
  }

  public List<TeacherServiceStudent> getServiceStudentList() {
    return this.serviceStudentList;
  }

  public TeacherServiceStudentResult setServiceStudentList(List<TeacherServiceStudent> serviceStudentList) {
    this.serviceStudentList = serviceStudentList;
    return this;
  }

  public void unsetServiceStudentList() {
    this.serviceStudentList = null;
  }

  /** Returns true if field serviceStudentList is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceStudentList() {
    return this.serviceStudentList != null;
  }

  public void setServiceStudentListIsSet(boolean value) {
    if (!value) {
      this.serviceStudentList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case SERVICE_STUDENT_LIST:
      if (value == null) {
        unsetServiceStudentList();
      } else {
        setServiceStudentList((List<TeacherServiceStudent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNT:
      return getCount();

    case SERVICE_STUDENT_LIST:
      return getServiceStudentList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUNT:
      return isSetCount();
    case SERVICE_STUDENT_LIST:
      return isSetServiceStudentList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeacherServiceStudentResult)
      return this.equals((TeacherServiceStudentResult)that);
    return false;
  }

  public boolean equals(TeacherServiceStudentResult that) {
    if (that == null)
      return false;

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_serviceStudentList = true && this.isSetServiceStudentList();
    boolean that_present_serviceStudentList = true && that.isSetServiceStudentList();
    if (this_present_serviceStudentList || that_present_serviceStudentList) {
      if (!(this_present_serviceStudentList && that_present_serviceStudentList))
        return false;
      if (!this.serviceStudentList.equals(that.serviceStudentList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_serviceStudentList = true && (isSetServiceStudentList());
    list.add(present_serviceStudentList);
    if (present_serviceStudentList)
      list.add(serviceStudentList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TeacherServiceStudentResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceStudentList()).compareTo(other.isSetServiceStudentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceStudentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceStudentList, other.serviceStudentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeacherServiceStudentResult(");
    boolean first = true;

    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceStudentList:");
    if (this.serviceStudentList == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceStudentList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeacherServiceStudentResultStandardSchemeFactory implements SchemeFactory {
    public TeacherServiceStudentResultStandardScheme getScheme() {
      return new TeacherServiceStudentResultStandardScheme();
    }
  }

  private static class TeacherServiceStudentResultStandardScheme extends StandardScheme<TeacherServiceStudentResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeacherServiceStudentResult struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_STUDENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.serviceStudentList = new ArrayList<TeacherServiceStudent>(_list16.size);
                TeacherServiceStudent _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TeacherServiceStudent();
                  _elem17.read(iprot);
                  struct.serviceStudentList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setServiceStudentListIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeacherServiceStudentResult struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      if (struct.serviceStudentList != null) {
        oprot.writeFieldBegin(SERVICE_STUDENT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serviceStudentList.size()));
          for (TeacherServiceStudent _iter19 : struct.serviceStudentList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TeacherServiceStudentResultTupleSchemeFactory implements SchemeFactory {
    public TeacherServiceStudentResultTupleScheme getScheme() {
      return new TeacherServiceStudentResultTupleScheme();
    }
  }

  private static class TeacherServiceStudentResultTupleScheme extends TupleScheme<TeacherServiceStudentResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TeacherServiceStudentResult struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCount()) {
        optionals.set(0);
      }
      if (struct.isSetServiceStudentList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetServiceStudentList()) {
        {
          oprot.writeI32(struct.serviceStudentList.size());
          for (TeacherServiceStudent _iter20 : struct.serviceStudentList)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TeacherServiceStudentResult struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serviceStudentList = new ArrayList<TeacherServiceStudent>(_list21.size);
          TeacherServiceStudent _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new TeacherServiceStudent();
            _elem22.read(iprot);
            struct.serviceStudentList.add(_elem22);
          }
        }
        struct.setServiceStudentListIsSet(true);
      }
    }
  }

}

