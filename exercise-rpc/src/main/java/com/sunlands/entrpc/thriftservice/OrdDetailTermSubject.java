/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-28")
public class OrdDetailTermSubject implements org.apache.thrift.TBase<OrdDetailTermSubject, OrdDetailTermSubject._Fields>, java.io.Serializable, Cloneable, Comparable<OrdDetailTermSubject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrdDetailTermSubject");

  private static final org.apache.thrift.protocol.TField ORD_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ordDetailId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("packageId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROVINCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_SECOND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSecondId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrdDetailTermSubjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrdDetailTermSubjectTupleSchemeFactory());
  }

  public int ordDetailId; // required
  public int packageId; // required
  public String packageName; // required
  public int provinceId; // required
  public int projectSecondId; // required
  public List<termSubject> terms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORD_DETAIL_ID((short)1, "ordDetailId"),
    PACKAGE_ID((short)2, "packageId"),
    PACKAGE_NAME((short)3, "packageName"),
    PROVINCE_ID((short)4, "provinceId"),
    PROJECT_SECOND_ID((short)5, "projectSecondId"),
    TERMS((short)6, "terms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORD_DETAIL_ID
          return ORD_DETAIL_ID;
        case 2: // PACKAGE_ID
          return PACKAGE_ID;
        case 3: // PACKAGE_NAME
          return PACKAGE_NAME;
        case 4: // PROVINCE_ID
          return PROVINCE_ID;
        case 5: // PROJECT_SECOND_ID
          return PROJECT_SECOND_ID;
        case 6: // TERMS
          return TERMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDDETAILID_ISSET_ID = 0;
  private static final int __PACKAGEID_ISSET_ID = 1;
  private static final int __PROVINCEID_ISSET_ID = 2;
  private static final int __PROJECTSECONDID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORD_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("ordDetailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("packageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_ID, new org.apache.thrift.meta_data.FieldMetaData("provinceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_SECOND_ID, new org.apache.thrift.meta_data.FieldMetaData("projectSecondId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, termSubject.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrdDetailTermSubject.class, metaDataMap);
  }

  public OrdDetailTermSubject() {
  }

  public OrdDetailTermSubject(
    int ordDetailId,
    int packageId,
    String packageName,
    int provinceId,
    int projectSecondId,
    List<termSubject> terms)
  {
    this();
    this.ordDetailId = ordDetailId;
    setOrdDetailIdIsSet(true);
    this.packageId = packageId;
    setPackageIdIsSet(true);
    this.packageName = packageName;
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    this.projectSecondId = projectSecondId;
    setProjectSecondIdIsSet(true);
    this.terms = terms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrdDetailTermSubject(OrdDetailTermSubject other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ordDetailId = other.ordDetailId;
    this.packageId = other.packageId;
    if (other.isSetPackageName()) {
      this.packageName = other.packageName;
    }
    this.provinceId = other.provinceId;
    this.projectSecondId = other.projectSecondId;
    if (other.isSetTerms()) {
      List<termSubject> __this__terms = new ArrayList<termSubject>(other.terms.size());
      for (termSubject other_element : other.terms) {
        __this__terms.add(new termSubject(other_element));
      }
      this.terms = __this__terms;
    }
  }

  public OrdDetailTermSubject deepCopy() {
    return new OrdDetailTermSubject(this);
  }

  @Override
  public void clear() {
    setOrdDetailIdIsSet(false);
    this.ordDetailId = 0;
    setPackageIdIsSet(false);
    this.packageId = 0;
    this.packageName = null;
    setProvinceIdIsSet(false);
    this.provinceId = 0;
    setProjectSecondIdIsSet(false);
    this.projectSecondId = 0;
    this.terms = null;
  }

  public int getOrdDetailId() {
    return this.ordDetailId;
  }

  public OrdDetailTermSubject setOrdDetailId(int ordDetailId) {
    this.ordDetailId = ordDetailId;
    setOrdDetailIdIsSet(true);
    return this;
  }

  public void unsetOrdDetailId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
  }

  /** Returns true if field ordDetailId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdDetailId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDDETAILID_ISSET_ID);
  }

  public void setOrdDetailIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDDETAILID_ISSET_ID, value);
  }

  public int getPackageId() {
    return this.packageId;
  }

  public OrdDetailTermSubject setPackageId(int packageId) {
    this.packageId = packageId;
    setPackageIdIsSet(true);
    return this;
  }

  public void unsetPackageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
  }

  /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageId() {
    return EncodingUtils.testBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
  }

  public void setPackageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACKAGEID_ISSET_ID, value);
  }

  public String getPackageName() {
    return this.packageName;
  }

  public OrdDetailTermSubject setPackageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  public void unsetPackageName() {
    this.packageName = null;
  }

  /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageName() {
    return this.packageName != null;
  }

  public void setPackageNameIsSet(boolean value) {
    if (!value) {
      this.packageName = null;
    }
  }

  public int getProvinceId() {
    return this.provinceId;
  }

  public OrdDetailTermSubject setProvinceId(int provinceId) {
    this.provinceId = provinceId;
    setProvinceIdIsSet(true);
    return this;
  }

  public void unsetProvinceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
  }

  /** Returns true if field provinceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
  }

  public void setProvinceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCEID_ISSET_ID, value);
  }

  public int getProjectSecondId() {
    return this.projectSecondId;
  }

  public OrdDetailTermSubject setProjectSecondId(int projectSecondId) {
    this.projectSecondId = projectSecondId;
    setProjectSecondIdIsSet(true);
    return this;
  }

  public void unsetProjectSecondId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSECONDID_ISSET_ID);
  }

  /** Returns true if field projectSecondId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSecondId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSECONDID_ISSET_ID);
  }

  public void setProjectSecondIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSECONDID_ISSET_ID, value);
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  public java.util.Iterator<termSubject> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(termSubject elem) {
    if (this.terms == null) {
      this.terms = new ArrayList<termSubject>();
    }
    this.terms.add(elem);
  }

  public List<termSubject> getTerms() {
    return this.terms;
  }

  public OrdDetailTermSubject setTerms(List<termSubject> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been assigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORD_DETAIL_ID:
      if (value == null) {
        unsetOrdDetailId();
      } else {
        setOrdDetailId((Integer)value);
      }
      break;

    case PACKAGE_ID:
      if (value == null) {
        unsetPackageId();
      } else {
        setPackageId((Integer)value);
      }
      break;

    case PACKAGE_NAME:
      if (value == null) {
        unsetPackageName();
      } else {
        setPackageName((String)value);
      }
      break;

    case PROVINCE_ID:
      if (value == null) {
        unsetProvinceId();
      } else {
        setProvinceId((Integer)value);
      }
      break;

    case PROJECT_SECOND_ID:
      if (value == null) {
        unsetProjectSecondId();
      } else {
        setProjectSecondId((Integer)value);
      }
      break;

    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((List<termSubject>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORD_DETAIL_ID:
      return getOrdDetailId();

    case PACKAGE_ID:
      return getPackageId();

    case PACKAGE_NAME:
      return getPackageName();

    case PROVINCE_ID:
      return getProvinceId();

    case PROJECT_SECOND_ID:
      return getProjectSecondId();

    case TERMS:
      return getTerms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORD_DETAIL_ID:
      return isSetOrdDetailId();
    case PACKAGE_ID:
      return isSetPackageId();
    case PACKAGE_NAME:
      return isSetPackageName();
    case PROVINCE_ID:
      return isSetProvinceId();
    case PROJECT_SECOND_ID:
      return isSetProjectSecondId();
    case TERMS:
      return isSetTerms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrdDetailTermSubject)
      return this.equals((OrdDetailTermSubject)that);
    return false;
  }

  public boolean equals(OrdDetailTermSubject that) {
    if (that == null)
      return false;

    boolean this_present_ordDetailId = true;
    boolean that_present_ordDetailId = true;
    if (this_present_ordDetailId || that_present_ordDetailId) {
      if (!(this_present_ordDetailId && that_present_ordDetailId))
        return false;
      if (this.ordDetailId != that.ordDetailId)
        return false;
    }

    boolean this_present_packageId = true;
    boolean that_present_packageId = true;
    if (this_present_packageId || that_present_packageId) {
      if (!(this_present_packageId && that_present_packageId))
        return false;
      if (this.packageId != that.packageId)
        return false;
    }

    boolean this_present_packageName = true && this.isSetPackageName();
    boolean that_present_packageName = true && that.isSetPackageName();
    if (this_present_packageName || that_present_packageName) {
      if (!(this_present_packageName && that_present_packageName))
        return false;
      if (!this.packageName.equals(that.packageName))
        return false;
    }

    boolean this_present_provinceId = true;
    boolean that_present_provinceId = true;
    if (this_present_provinceId || that_present_provinceId) {
      if (!(this_present_provinceId && that_present_provinceId))
        return false;
      if (this.provinceId != that.provinceId)
        return false;
    }

    boolean this_present_projectSecondId = true;
    boolean that_present_projectSecondId = true;
    if (this_present_projectSecondId || that_present_projectSecondId) {
      if (!(this_present_projectSecondId && that_present_projectSecondId))
        return false;
      if (this.projectSecondId != that.projectSecondId)
        return false;
    }

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ordDetailId = true;
    list.add(present_ordDetailId);
    if (present_ordDetailId)
      list.add(ordDetailId);

    boolean present_packageId = true;
    list.add(present_packageId);
    if (present_packageId)
      list.add(packageId);

    boolean present_packageName = true && (isSetPackageName());
    list.add(present_packageName);
    if (present_packageName)
      list.add(packageName);

    boolean present_provinceId = true;
    list.add(present_provinceId);
    if (present_provinceId)
      list.add(provinceId);

    boolean present_projectSecondId = true;
    list.add(present_projectSecondId);
    if (present_projectSecondId)
      list.add(projectSecondId);

    boolean present_terms = true && (isSetTerms());
    list.add(present_terms);
    if (present_terms)
      list.add(terms);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrdDetailTermSubject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrdDetailId()).compareTo(other.isSetOrdDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordDetailId, other.ordDetailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageId()).compareTo(other.isSetPackageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageId, other.packageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(other.isSetProvinceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceId, other.provinceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSecondId()).compareTo(other.isSetProjectSecondId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSecondId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSecondId, other.projectSecondId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerms()).compareTo(other.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrdDetailTermSubject(");
    boolean first = true;

    sb.append("ordDetailId:");
    sb.append(this.ordDetailId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageId:");
    sb.append(this.packageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageName:");
    if (this.packageName == null) {
      sb.append("null");
    } else {
      sb.append(this.packageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceId:");
    sb.append(this.provinceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSecondId:");
    sb.append(this.projectSecondId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("terms:");
    if (this.terms == null) {
      sb.append("null");
    } else {
      sb.append(this.terms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrdDetailTermSubjectStandardSchemeFactory implements SchemeFactory {
    public OrdDetailTermSubjectStandardScheme getScheme() {
      return new OrdDetailTermSubjectStandardScheme();
    }
  }

  private static class OrdDetailTermSubjectStandardScheme extends StandardScheme<OrdDetailTermSubject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrdDetailTermSubject struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORD_DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ordDetailId = iprot.readI32();
              struct.setOrdDetailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.packageId = iprot.readI32();
              struct.setPackageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageName = iprot.readString();
              struct.setPackageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROVINCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.provinceId = iprot.readI32();
              struct.setProvinceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_SECOND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSecondId = iprot.readI32();
              struct.setProjectSecondIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.terms = new ArrayList<termSubject>(_list40.size);
                termSubject _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new termSubject();
                  _elem41.read(iprot);
                  struct.terms.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrdDetailTermSubject struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORD_DETAIL_ID_FIELD_DESC);
      oprot.writeI32(struct.ordDetailId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.packageId);
      oprot.writeFieldEnd();
      if (struct.packageName != null) {
        oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.packageName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
      oprot.writeI32(struct.provinceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SECOND_ID_FIELD_DESC);
      oprot.writeI32(struct.projectSecondId);
      oprot.writeFieldEnd();
      if (struct.terms != null) {
        oprot.writeFieldBegin(TERMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.terms.size()));
          for (termSubject _iter43 : struct.terms)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrdDetailTermSubjectTupleSchemeFactory implements SchemeFactory {
    public OrdDetailTermSubjectTupleScheme getScheme() {
      return new OrdDetailTermSubjectTupleScheme();
    }
  }

  private static class OrdDetailTermSubjectTupleScheme extends TupleScheme<OrdDetailTermSubject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrdDetailTermSubject struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrdDetailId()) {
        optionals.set(0);
      }
      if (struct.isSetPackageId()) {
        optionals.set(1);
      }
      if (struct.isSetPackageName()) {
        optionals.set(2);
      }
      if (struct.isSetProvinceId()) {
        optionals.set(3);
      }
      if (struct.isSetProjectSecondId()) {
        optionals.set(4);
      }
      if (struct.isSetTerms()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOrdDetailId()) {
        oprot.writeI32(struct.ordDetailId);
      }
      if (struct.isSetPackageId()) {
        oprot.writeI32(struct.packageId);
      }
      if (struct.isSetPackageName()) {
        oprot.writeString(struct.packageName);
      }
      if (struct.isSetProvinceId()) {
        oprot.writeI32(struct.provinceId);
      }
      if (struct.isSetProjectSecondId()) {
        oprot.writeI32(struct.projectSecondId);
      }
      if (struct.isSetTerms()) {
        {
          oprot.writeI32(struct.terms.size());
          for (termSubject _iter44 : struct.terms)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrdDetailTermSubject struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.ordDetailId = iprot.readI32();
        struct.setOrdDetailIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.packageId = iprot.readI32();
        struct.setPackageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.packageName = iprot.readString();
        struct.setPackageNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.provinceId = iprot.readI32();
        struct.setProvinceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectSecondId = iprot.readI32();
        struct.setProjectSecondIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.terms = new ArrayList<termSubject>(_list45.size);
          termSubject _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new termSubject();
            _elem46.read(iprot);
            struct.terms.add(_elem46);
          }
        }
        struct.setTermsIsSet(true);
      }
    }
  }

}

