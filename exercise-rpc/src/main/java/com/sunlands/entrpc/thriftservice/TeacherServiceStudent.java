/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-24")
public class TeacherServiceStudent implements org.apache.thrift.TBase<TeacherServiceStudent, TeacherServiceStudent._Fields>, java.io.Serializable, Cloneable, Comparable<TeacherServiceStudent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TeacherServiceStudent");

  private static final org.apache.thrift.protocol.TField STUDENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("studentId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STUDENT_USE_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("studentUseApp", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STUDENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("studentName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STUDENT_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("studentNickName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEACHER_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherAccount", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TEACHER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("packageId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField IM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imId", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TeacherServiceStudentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TeacherServiceStudentTupleSchemeFactory());
  }

  public int studentId; // required
  public int studentUseApp; // required
  public String studentName; // required
  public String studentNickName; // required
  public String teacherAccount; // required
  public String teacherName; // required
  public int teacherId; // required
  public int packageId; // required
  public String packageName; // required
  public int detailId; // required
  public String imId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STUDENT_ID((short)1, "studentId"),
    STUDENT_USE_APP((short)2, "studentUseApp"),
    STUDENT_NAME((short)3, "studentName"),
    STUDENT_NICK_NAME((short)4, "studentNickName"),
    TEACHER_ACCOUNT((short)5, "teacherAccount"),
    TEACHER_NAME((short)6, "teacherName"),
    TEACHER_ID((short)7, "teacherId"),
    PACKAGE_ID((short)8, "packageId"),
    PACKAGE_NAME((short)9, "packageName"),
    DETAIL_ID((short)10, "detailId"),
    IM_ID((short)11, "imId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STUDENT_ID
          return STUDENT_ID;
        case 2: // STUDENT_USE_APP
          return STUDENT_USE_APP;
        case 3: // STUDENT_NAME
          return STUDENT_NAME;
        case 4: // STUDENT_NICK_NAME
          return STUDENT_NICK_NAME;
        case 5: // TEACHER_ACCOUNT
          return TEACHER_ACCOUNT;
        case 6: // TEACHER_NAME
          return TEACHER_NAME;
        case 7: // TEACHER_ID
          return TEACHER_ID;
        case 8: // PACKAGE_ID
          return PACKAGE_ID;
        case 9: // PACKAGE_NAME
          return PACKAGE_NAME;
        case 10: // DETAIL_ID
          return DETAIL_ID;
        case 11: // IM_ID
          return IM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STUDENTID_ISSET_ID = 0;
  private static final int __STUDENTUSEAPP_ISSET_ID = 1;
  private static final int __TEACHERID_ISSET_ID = 2;
  private static final int __PACKAGEID_ISSET_ID = 3;
  private static final int __DETAILID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STUDENT_ID, new org.apache.thrift.meta_data.FieldMetaData("studentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STUDENT_USE_APP, new org.apache.thrift.meta_data.FieldMetaData("studentUseApp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STUDENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("studentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("studentNickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("teacherAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_NAME, new org.apache.thrift.meta_data.FieldMetaData("teacherName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("packageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IM_ID, new org.apache.thrift.meta_data.FieldMetaData("imId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TeacherServiceStudent.class, metaDataMap);
  }

  public TeacherServiceStudent() {
  }

  public TeacherServiceStudent(
    int studentId,
    int studentUseApp,
    String studentName,
    String studentNickName,
    String teacherAccount,
    String teacherName,
    int teacherId,
    int packageId,
    String packageName,
    int detailId,
    String imId)
  {
    this();
    this.studentId = studentId;
    setStudentIdIsSet(true);
    this.studentUseApp = studentUseApp;
    setStudentUseAppIsSet(true);
    this.studentName = studentName;
    this.studentNickName = studentNickName;
    this.teacherAccount = teacherAccount;
    this.teacherName = teacherName;
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    this.packageId = packageId;
    setPackageIdIsSet(true);
    this.packageName = packageName;
    this.detailId = detailId;
    setDetailIdIsSet(true);
    this.imId = imId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TeacherServiceStudent(TeacherServiceStudent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.studentId = other.studentId;
    this.studentUseApp = other.studentUseApp;
    if (other.isSetStudentName()) {
      this.studentName = other.studentName;
    }
    if (other.isSetStudentNickName()) {
      this.studentNickName = other.studentNickName;
    }
    if (other.isSetTeacherAccount()) {
      this.teacherAccount = other.teacherAccount;
    }
    if (other.isSetTeacherName()) {
      this.teacherName = other.teacherName;
    }
    this.teacherId = other.teacherId;
    this.packageId = other.packageId;
    if (other.isSetPackageName()) {
      this.packageName = other.packageName;
    }
    this.detailId = other.detailId;
    if (other.isSetImId()) {
      this.imId = other.imId;
    }
  }

  public TeacherServiceStudent deepCopy() {
    return new TeacherServiceStudent(this);
  }

  @Override
  public void clear() {
    setStudentIdIsSet(false);
    this.studentId = 0;
    setStudentUseAppIsSet(false);
    this.studentUseApp = 0;
    this.studentName = null;
    this.studentNickName = null;
    this.teacherAccount = null;
    this.teacherName = null;
    setTeacherIdIsSet(false);
    this.teacherId = 0;
    setPackageIdIsSet(false);
    this.packageId = 0;
    this.packageName = null;
    setDetailIdIsSet(false);
    this.detailId = 0;
    this.imId = null;
  }

  public int getStudentId() {
    return this.studentId;
  }

  public TeacherServiceStudent setStudentId(int studentId) {
    this.studentId = studentId;
    setStudentIdIsSet(true);
    return this;
  }

  public void unsetStudentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTID_ISSET_ID);
  }

  /** Returns true if field studentId is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentId() {
    return EncodingUtils.testBit(__isset_bitfield, __STUDENTID_ISSET_ID);
  }

  public void setStudentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTID_ISSET_ID, value);
  }

  public int getStudentUseApp() {
    return this.studentUseApp;
  }

  public TeacherServiceStudent setStudentUseApp(int studentUseApp) {
    this.studentUseApp = studentUseApp;
    setStudentUseAppIsSet(true);
    return this;
  }

  public void unsetStudentUseApp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUDENTUSEAPP_ISSET_ID);
  }

  /** Returns true if field studentUseApp is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentUseApp() {
    return EncodingUtils.testBit(__isset_bitfield, __STUDENTUSEAPP_ISSET_ID);
  }

  public void setStudentUseAppIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUDENTUSEAPP_ISSET_ID, value);
  }

  public String getStudentName() {
    return this.studentName;
  }

  public TeacherServiceStudent setStudentName(String studentName) {
    this.studentName = studentName;
    return this;
  }

  public void unsetStudentName() {
    this.studentName = null;
  }

  /** Returns true if field studentName is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentName() {
    return this.studentName != null;
  }

  public void setStudentNameIsSet(boolean value) {
    if (!value) {
      this.studentName = null;
    }
  }

  public String getStudentNickName() {
    return this.studentNickName;
  }

  public TeacherServiceStudent setStudentNickName(String studentNickName) {
    this.studentNickName = studentNickName;
    return this;
  }

  public void unsetStudentNickName() {
    this.studentNickName = null;
  }

  /** Returns true if field studentNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentNickName() {
    return this.studentNickName != null;
  }

  public void setStudentNickNameIsSet(boolean value) {
    if (!value) {
      this.studentNickName = null;
    }
  }

  public String getTeacherAccount() {
    return this.teacherAccount;
  }

  public TeacherServiceStudent setTeacherAccount(String teacherAccount) {
    this.teacherAccount = teacherAccount;
    return this;
  }

  public void unsetTeacherAccount() {
    this.teacherAccount = null;
  }

  /** Returns true if field teacherAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherAccount() {
    return this.teacherAccount != null;
  }

  public void setTeacherAccountIsSet(boolean value) {
    if (!value) {
      this.teacherAccount = null;
    }
  }

  public String getTeacherName() {
    return this.teacherName;
  }

  public TeacherServiceStudent setTeacherName(String teacherName) {
    this.teacherName = teacherName;
    return this;
  }

  public void unsetTeacherName() {
    this.teacherName = null;
  }

  /** Returns true if field teacherName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherName() {
    return this.teacherName != null;
  }

  public void setTeacherNameIsSet(boolean value) {
    if (!value) {
      this.teacherName = null;
    }
  }

  public int getTeacherId() {
    return this.teacherId;
  }

  public TeacherServiceStudent setTeacherId(int teacherId) {
    this.teacherId = teacherId;
    setTeacherIdIsSet(true);
    return this;
  }

  public void unsetTeacherId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
  }

  public void setTeacherIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
  }

  public int getPackageId() {
    return this.packageId;
  }

  public TeacherServiceStudent setPackageId(int packageId) {
    this.packageId = packageId;
    setPackageIdIsSet(true);
    return this;
  }

  public void unsetPackageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
  }

  /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageId() {
    return EncodingUtils.testBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
  }

  public void setPackageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACKAGEID_ISSET_ID, value);
  }

  public String getPackageName() {
    return this.packageName;
  }

  public TeacherServiceStudent setPackageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  public void unsetPackageName() {
    this.packageName = null;
  }

  /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageName() {
    return this.packageName != null;
  }

  public void setPackageNameIsSet(boolean value) {
    if (!value) {
      this.packageName = null;
    }
  }

  public int getDetailId() {
    return this.detailId;
  }

  public TeacherServiceStudent setDetailId(int detailId) {
    this.detailId = detailId;
    setDetailIdIsSet(true);
    return this;
  }

  public void unsetDetailId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
  }

  /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailId() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
  }

  public void setDetailIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
  }

  public String getImId() {
    return this.imId;
  }

  public TeacherServiceStudent setImId(String imId) {
    this.imId = imId;
    return this;
  }

  public void unsetImId() {
    this.imId = null;
  }

  /** Returns true if field imId is set (has been assigned a value) and false otherwise */
  public boolean isSetImId() {
    return this.imId != null;
  }

  public void setImIdIsSet(boolean value) {
    if (!value) {
      this.imId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STUDENT_ID:
      if (value == null) {
        unsetStudentId();
      } else {
        setStudentId((Integer)value);
      }
      break;

    case STUDENT_USE_APP:
      if (value == null) {
        unsetStudentUseApp();
      } else {
        setStudentUseApp((Integer)value);
      }
      break;

    case STUDENT_NAME:
      if (value == null) {
        unsetStudentName();
      } else {
        setStudentName((String)value);
      }
      break;

    case STUDENT_NICK_NAME:
      if (value == null) {
        unsetStudentNickName();
      } else {
        setStudentNickName((String)value);
      }
      break;

    case TEACHER_ACCOUNT:
      if (value == null) {
        unsetTeacherAccount();
      } else {
        setTeacherAccount((String)value);
      }
      break;

    case TEACHER_NAME:
      if (value == null) {
        unsetTeacherName();
      } else {
        setTeacherName((String)value);
      }
      break;

    case TEACHER_ID:
      if (value == null) {
        unsetTeacherId();
      } else {
        setTeacherId((Integer)value);
      }
      break;

    case PACKAGE_ID:
      if (value == null) {
        unsetPackageId();
      } else {
        setPackageId((Integer)value);
      }
      break;

    case PACKAGE_NAME:
      if (value == null) {
        unsetPackageName();
      } else {
        setPackageName((String)value);
      }
      break;

    case DETAIL_ID:
      if (value == null) {
        unsetDetailId();
      } else {
        setDetailId((Integer)value);
      }
      break;

    case IM_ID:
      if (value == null) {
        unsetImId();
      } else {
        setImId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STUDENT_ID:
      return getStudentId();

    case STUDENT_USE_APP:
      return getStudentUseApp();

    case STUDENT_NAME:
      return getStudentName();

    case STUDENT_NICK_NAME:
      return getStudentNickName();

    case TEACHER_ACCOUNT:
      return getTeacherAccount();

    case TEACHER_NAME:
      return getTeacherName();

    case TEACHER_ID:
      return getTeacherId();

    case PACKAGE_ID:
      return getPackageId();

    case PACKAGE_NAME:
      return getPackageName();

    case DETAIL_ID:
      return getDetailId();

    case IM_ID:
      return getImId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STUDENT_ID:
      return isSetStudentId();
    case STUDENT_USE_APP:
      return isSetStudentUseApp();
    case STUDENT_NAME:
      return isSetStudentName();
    case STUDENT_NICK_NAME:
      return isSetStudentNickName();
    case TEACHER_ACCOUNT:
      return isSetTeacherAccount();
    case TEACHER_NAME:
      return isSetTeacherName();
    case TEACHER_ID:
      return isSetTeacherId();
    case PACKAGE_ID:
      return isSetPackageId();
    case PACKAGE_NAME:
      return isSetPackageName();
    case DETAIL_ID:
      return isSetDetailId();
    case IM_ID:
      return isSetImId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TeacherServiceStudent)
      return this.equals((TeacherServiceStudent)that);
    return false;
  }

  public boolean equals(TeacherServiceStudent that) {
    if (that == null)
      return false;

    boolean this_present_studentId = true;
    boolean that_present_studentId = true;
    if (this_present_studentId || that_present_studentId) {
      if (!(this_present_studentId && that_present_studentId))
        return false;
      if (this.studentId != that.studentId)
        return false;
    }

    boolean this_present_studentUseApp = true;
    boolean that_present_studentUseApp = true;
    if (this_present_studentUseApp || that_present_studentUseApp) {
      if (!(this_present_studentUseApp && that_present_studentUseApp))
        return false;
      if (this.studentUseApp != that.studentUseApp)
        return false;
    }

    boolean this_present_studentName = true && this.isSetStudentName();
    boolean that_present_studentName = true && that.isSetStudentName();
    if (this_present_studentName || that_present_studentName) {
      if (!(this_present_studentName && that_present_studentName))
        return false;
      if (!this.studentName.equals(that.studentName))
        return false;
    }

    boolean this_present_studentNickName = true && this.isSetStudentNickName();
    boolean that_present_studentNickName = true && that.isSetStudentNickName();
    if (this_present_studentNickName || that_present_studentNickName) {
      if (!(this_present_studentNickName && that_present_studentNickName))
        return false;
      if (!this.studentNickName.equals(that.studentNickName))
        return false;
    }

    boolean this_present_teacherAccount = true && this.isSetTeacherAccount();
    boolean that_present_teacherAccount = true && that.isSetTeacherAccount();
    if (this_present_teacherAccount || that_present_teacherAccount) {
      if (!(this_present_teacherAccount && that_present_teacherAccount))
        return false;
      if (!this.teacherAccount.equals(that.teacherAccount))
        return false;
    }

    boolean this_present_teacherName = true && this.isSetTeacherName();
    boolean that_present_teacherName = true && that.isSetTeacherName();
    if (this_present_teacherName || that_present_teacherName) {
      if (!(this_present_teacherName && that_present_teacherName))
        return false;
      if (!this.teacherName.equals(that.teacherName))
        return false;
    }

    boolean this_present_teacherId = true;
    boolean that_present_teacherId = true;
    if (this_present_teacherId || that_present_teacherId) {
      if (!(this_present_teacherId && that_present_teacherId))
        return false;
      if (this.teacherId != that.teacherId)
        return false;
    }

    boolean this_present_packageId = true;
    boolean that_present_packageId = true;
    if (this_present_packageId || that_present_packageId) {
      if (!(this_present_packageId && that_present_packageId))
        return false;
      if (this.packageId != that.packageId)
        return false;
    }

    boolean this_present_packageName = true && this.isSetPackageName();
    boolean that_present_packageName = true && that.isSetPackageName();
    if (this_present_packageName || that_present_packageName) {
      if (!(this_present_packageName && that_present_packageName))
        return false;
      if (!this.packageName.equals(that.packageName))
        return false;
    }

    boolean this_present_detailId = true;
    boolean that_present_detailId = true;
    if (this_present_detailId || that_present_detailId) {
      if (!(this_present_detailId && that_present_detailId))
        return false;
      if (this.detailId != that.detailId)
        return false;
    }

    boolean this_present_imId = true && this.isSetImId();
    boolean that_present_imId = true && that.isSetImId();
    if (this_present_imId || that_present_imId) {
      if (!(this_present_imId && that_present_imId))
        return false;
      if (!this.imId.equals(that.imId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_studentId = true;
    list.add(present_studentId);
    if (present_studentId)
      list.add(studentId);

    boolean present_studentUseApp = true;
    list.add(present_studentUseApp);
    if (present_studentUseApp)
      list.add(studentUseApp);

    boolean present_studentName = true && (isSetStudentName());
    list.add(present_studentName);
    if (present_studentName)
      list.add(studentName);

    boolean present_studentNickName = true && (isSetStudentNickName());
    list.add(present_studentNickName);
    if (present_studentNickName)
      list.add(studentNickName);

    boolean present_teacherAccount = true && (isSetTeacherAccount());
    list.add(present_teacherAccount);
    if (present_teacherAccount)
      list.add(teacherAccount);

    boolean present_teacherName = true && (isSetTeacherName());
    list.add(present_teacherName);
    if (present_teacherName)
      list.add(teacherName);

    boolean present_teacherId = true;
    list.add(present_teacherId);
    if (present_teacherId)
      list.add(teacherId);

    boolean present_packageId = true;
    list.add(present_packageId);
    if (present_packageId)
      list.add(packageId);

    boolean present_packageName = true && (isSetPackageName());
    list.add(present_packageName);
    if (present_packageName)
      list.add(packageName);

    boolean present_detailId = true;
    list.add(present_detailId);
    if (present_detailId)
      list.add(detailId);

    boolean present_imId = true && (isSetImId());
    list.add(present_imId);
    if (present_imId)
      list.add(imId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TeacherServiceStudent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStudentId()).compareTo(other.isSetStudentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentId, other.studentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentUseApp()).compareTo(other.isSetStudentUseApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentUseApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentUseApp, other.studentUseApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentName()).compareTo(other.isSetStudentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentName, other.studentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentNickName()).compareTo(other.isSetStudentNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentNickName, other.studentNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherAccount()).compareTo(other.isSetTeacherAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherAccount, other.teacherAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherName()).compareTo(other.isSetTeacherName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherName, other.teacherName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageId()).compareTo(other.isSetPackageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageId, other.packageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImId()).compareTo(other.isSetImId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imId, other.imId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TeacherServiceStudent(");
    boolean first = true;

    sb.append("studentId:");
    sb.append(this.studentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentUseApp:");
    sb.append(this.studentUseApp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentName:");
    if (this.studentName == null) {
      sb.append("null");
    } else {
      sb.append(this.studentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentNickName:");
    if (this.studentNickName == null) {
      sb.append("null");
    } else {
      sb.append(this.studentNickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherAccount:");
    if (this.teacherAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherName:");
    if (this.teacherName == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherId:");
    sb.append(this.teacherId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageId:");
    sb.append(this.packageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageName:");
    if (this.packageName == null) {
      sb.append("null");
    } else {
      sb.append(this.packageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailId:");
    sb.append(this.detailId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imId:");
    if (this.imId == null) {
      sb.append("null");
    } else {
      sb.append(this.imId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TeacherServiceStudentStandardSchemeFactory implements SchemeFactory {
    public TeacherServiceStudentStandardScheme getScheme() {
      return new TeacherServiceStudentStandardScheme();
    }
  }

  private static class TeacherServiceStudentStandardScheme extends StandardScheme<TeacherServiceStudent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TeacherServiceStudent struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // STUDENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.studentId = iprot.readI32();
              struct.setStudentIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STUDENT_USE_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.studentUseApp = iprot.readI32();
              struct.setStudentUseAppIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STUDENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentName = iprot.readString();
              struct.setStudentNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STUDENT_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.studentNickName = iprot.readString();
              struct.setStudentNickNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEACHER_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherAccount = iprot.readString();
              struct.setTeacherAccountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEACHER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teacherName = iprot.readString();
              struct.setTeacherNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEACHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teacherId = iprot.readI32();
              struct.setTeacherIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PACKAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.packageId = iprot.readI32();
              struct.setPackageIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageName = iprot.readString();
              struct.setPackageNameIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.detailId = iprot.readI32();
              struct.setDetailIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imId = iprot.readString();
              struct.setImIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TeacherServiceStudent struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STUDENT_ID_FIELD_DESC);
      oprot.writeI32(struct.studentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STUDENT_USE_APP_FIELD_DESC);
      oprot.writeI32(struct.studentUseApp);
      oprot.writeFieldEnd();
      if (struct.studentName != null) {
        oprot.writeFieldBegin(STUDENT_NAME_FIELD_DESC);
        oprot.writeString(struct.studentName);
        oprot.writeFieldEnd();
      }
      if (struct.studentNickName != null) {
        oprot.writeFieldBegin(STUDENT_NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.studentNickName);
        oprot.writeFieldEnd();
      }
      if (struct.teacherAccount != null) {
        oprot.writeFieldBegin(TEACHER_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.teacherAccount);
        oprot.writeFieldEnd();
      }
      if (struct.teacherName != null) {
        oprot.writeFieldBegin(TEACHER_NAME_FIELD_DESC);
        oprot.writeString(struct.teacherName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
      oprot.writeI32(struct.teacherId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI32(struct.packageId);
      oprot.writeFieldEnd();
      if (struct.packageName != null) {
        oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.packageName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
      oprot.writeI32(struct.detailId);
      oprot.writeFieldEnd();
      if (struct.imId != null) {
        oprot.writeFieldBegin(IM_ID_FIELD_DESC);
        oprot.writeString(struct.imId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TeacherServiceStudentTupleSchemeFactory implements SchemeFactory {
    public TeacherServiceStudentTupleScheme getScheme() {
      return new TeacherServiceStudentTupleScheme();
    }
  }

  private static class TeacherServiceStudentTupleScheme extends TupleScheme<TeacherServiceStudent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TeacherServiceStudent struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStudentId()) {
        optionals.set(0);
      }
      if (struct.isSetStudentUseApp()) {
        optionals.set(1);
      }
      if (struct.isSetStudentName()) {
        optionals.set(2);
      }
      if (struct.isSetStudentNickName()) {
        optionals.set(3);
      }
      if (struct.isSetTeacherAccount()) {
        optionals.set(4);
      }
      if (struct.isSetTeacherName()) {
        optionals.set(5);
      }
      if (struct.isSetTeacherId()) {
        optionals.set(6);
      }
      if (struct.isSetPackageId()) {
        optionals.set(7);
      }
      if (struct.isSetPackageName()) {
        optionals.set(8);
      }
      if (struct.isSetDetailId()) {
        optionals.set(9);
      }
      if (struct.isSetImId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetStudentId()) {
        oprot.writeI32(struct.studentId);
      }
      if (struct.isSetStudentUseApp()) {
        oprot.writeI32(struct.studentUseApp);
      }
      if (struct.isSetStudentName()) {
        oprot.writeString(struct.studentName);
      }
      if (struct.isSetStudentNickName()) {
        oprot.writeString(struct.studentNickName);
      }
      if (struct.isSetTeacherAccount()) {
        oprot.writeString(struct.teacherAccount);
      }
      if (struct.isSetTeacherName()) {
        oprot.writeString(struct.teacherName);
      }
      if (struct.isSetTeacherId()) {
        oprot.writeI32(struct.teacherId);
      }
      if (struct.isSetPackageId()) {
        oprot.writeI32(struct.packageId);
      }
      if (struct.isSetPackageName()) {
        oprot.writeString(struct.packageName);
      }
      if (struct.isSetDetailId()) {
        oprot.writeI32(struct.detailId);
      }
      if (struct.isSetImId()) {
        oprot.writeString(struct.imId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TeacherServiceStudent struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.studentId = iprot.readI32();
        struct.setStudentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.studentUseApp = iprot.readI32();
        struct.setStudentUseAppIsSet(true);
      }
      if (incoming.get(2)) {
        struct.studentName = iprot.readString();
        struct.setStudentNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.studentNickName = iprot.readString();
        struct.setStudentNickNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.teacherAccount = iprot.readString();
        struct.setTeacherAccountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.teacherName = iprot.readString();
        struct.setTeacherNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.teacherId = iprot.readI32();
        struct.setTeacherIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.packageId = iprot.readI32();
        struct.setPackageIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.packageName = iprot.readString();
        struct.setPackageNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.detailId = iprot.readI32();
        struct.setDetailIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.imId = iprot.readString();
        struct.setImIdIsSet(true);
      }
    }
  }

}

