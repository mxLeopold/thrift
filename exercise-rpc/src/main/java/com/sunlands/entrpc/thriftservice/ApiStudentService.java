/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-02-28")
public class ApiStudentService {

  public interface Iface {

    public StuOrdServiceDetail retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException;

    public OrdServiceTeam retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException;

    public List<OrdServiceTeam> retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException;

    public List<OrdDetailTermSubject> getCurrentTermSubjectByStuId(int stuId) throws TException;

    public List<termSubject> getAllTermSubjectByDetailId(int detailId) throws TException;

    public IntelligentExerciseSubject getStuIntelligentExerciseSubject(int stuId) throws TException;

  }

  public interface AsyncIface {

    public void retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuOrdServiceTeamByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name, AsyncMethodCallback resultHandler) throws TException;

    public void getCurrentTermSubjectByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void getAllTermSubjectByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException;

    public void getStuIntelligentExerciseSubject(int stuId, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public StuOrdServiceDetail retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException
    {
      send_retrieveStuOrdServiceDetail(stuId, ordStatus);
      return recv_retrieveStuOrdServiceDetail();
    }

    public void send_retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException
    {
      retrieveStuOrdServiceDetail_args args = new retrieveStuOrdServiceDetail_args();
      args.setStuId(stuId);
      args.setOrdStatus(ordStatus);
      sendBase("retrieveStuOrdServiceDetail", args);
    }

    public StuOrdServiceDetail recv_retrieveStuOrdServiceDetail() throws TException
    {
      retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
      receiveBase(result, "retrieveStuOrdServiceDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceDetail failed: unknown result");
    }

    public OrdServiceTeam retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException
    {
      send_retrieveStuOrdServiceTeamByDetailId(detailId);
      return recv_retrieveStuOrdServiceTeamByDetailId();
    }

    public void send_retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException
    {
      retrieveStuOrdServiceTeamByDetailId_args args = new retrieveStuOrdServiceTeamByDetailId_args();
      args.setDetailId(detailId);
      sendBase("retrieveStuOrdServiceTeamByDetailId", args);
    }

    public OrdServiceTeam recv_retrieveStuOrdServiceTeamByDetailId() throws TException
    {
      retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
      receiveBase(result, "retrieveStuOrdServiceTeamByDetailId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceTeamByDetailId failed: unknown result");
    }

    public List<OrdServiceTeam> retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException
    {
      send_retrieveStuOrdServiceTeamByStuMobileAndName(mobile, name);
      return recv_retrieveStuOrdServiceTeamByStuMobileAndName();
    }

    public void send_retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException
    {
      retrieveStuOrdServiceTeamByStuMobileAndName_args args = new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      args.setMobile(mobile);
      args.setName(name);
      sendBase("retrieveStuOrdServiceTeamByStuMobileAndName", args);
    }

    public List<OrdServiceTeam> recv_retrieveStuOrdServiceTeamByStuMobileAndName() throws TException
    {
      retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
      receiveBase(result, "retrieveStuOrdServiceTeamByStuMobileAndName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceTeamByStuMobileAndName failed: unknown result");
    }

    public List<OrdDetailTermSubject> getCurrentTermSubjectByStuId(int stuId) throws TException
    {
      send_getCurrentTermSubjectByStuId(stuId);
      return recv_getCurrentTermSubjectByStuId();
    }

    public void send_getCurrentTermSubjectByStuId(int stuId) throws TException
    {
      getCurrentTermSubjectByStuId_args args = new getCurrentTermSubjectByStuId_args();
      args.setStuId(stuId);
      sendBase("getCurrentTermSubjectByStuId", args);
    }

    public List<OrdDetailTermSubject> recv_getCurrentTermSubjectByStuId() throws TException
    {
      getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
      receiveBase(result, "getCurrentTermSubjectByStuId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentTermSubjectByStuId failed: unknown result");
    }

    public List<termSubject> getAllTermSubjectByDetailId(int detailId) throws TException
    {
      send_getAllTermSubjectByDetailId(detailId);
      return recv_getAllTermSubjectByDetailId();
    }

    public void send_getAllTermSubjectByDetailId(int detailId) throws TException
    {
      getAllTermSubjectByDetailId_args args = new getAllTermSubjectByDetailId_args();
      args.setDetailId(detailId);
      sendBase("getAllTermSubjectByDetailId", args);
    }

    public List<termSubject> recv_getAllTermSubjectByDetailId() throws TException
    {
      getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
      receiveBase(result, "getAllTermSubjectByDetailId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTermSubjectByDetailId failed: unknown result");
    }

    public IntelligentExerciseSubject getStuIntelligentExerciseSubject(int stuId) throws TException
    {
      send_getStuIntelligentExerciseSubject(stuId);
      return recv_getStuIntelligentExerciseSubject();
    }

    public void send_getStuIntelligentExerciseSubject(int stuId) throws TException
    {
      getStuIntelligentExerciseSubject_args args = new getStuIntelligentExerciseSubject_args();
      args.setStuId(stuId);
      sendBase("getStuIntelligentExerciseSubject", args);
    }

    public IntelligentExerciseSubject recv_getStuIntelligentExerciseSubject() throws TException
    {
      getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
      receiveBase(result, "getStuIntelligentExerciseSubject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStuIntelligentExerciseSubject failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceDetail_call method_call = new retrieveStuOrdServiceDetail_call(stuId, ordStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      private List<String> ordStatus;
      public retrieveStuOrdServiceDetail_call(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
        this.ordStatus = ordStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceDetail_args args = new retrieveStuOrdServiceDetail_args();
        args.setStuId(stuId);
        args.setOrdStatus(ordStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StuOrdServiceDetail getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceDetail();
      }
    }

    public void retrieveStuOrdServiceTeamByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceTeamByDetailId_call method_call = new retrieveStuOrdServiceTeamByDetailId_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceTeamByDetailId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public retrieveStuOrdServiceTeamByDetailId_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceTeamByDetailId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceTeamByDetailId_args args = new retrieveStuOrdServiceTeamByDetailId_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrdServiceTeam getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceTeamByDetailId();
      }
    }

    public void retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceTeamByStuMobileAndName_call method_call = new retrieveStuOrdServiceTeamByStuMobileAndName_call(mobile, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      private String name;
      public retrieveStuOrdServiceTeamByStuMobileAndName_call(String mobile, String name, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceTeamByStuMobileAndName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceTeamByStuMobileAndName_args args = new retrieveStuOrdServiceTeamByStuMobileAndName_args();
        args.setMobile(mobile);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrdServiceTeam> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceTeamByStuMobileAndName();
      }
    }

    public void getCurrentTermSubjectByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCurrentTermSubjectByStuId_call method_call = new getCurrentTermSubjectByStuId_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentTermSubjectByStuId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getCurrentTermSubjectByStuId_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentTermSubjectByStuId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentTermSubjectByStuId_args args = new getCurrentTermSubjectByStuId_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrdDetailTermSubject> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentTermSubjectByStuId();
      }
    }

    public void getAllTermSubjectByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllTermSubjectByDetailId_call method_call = new getAllTermSubjectByDetailId_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTermSubjectByDetailId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public getAllTermSubjectByDetailId_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTermSubjectByDetailId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTermSubjectByDetailId_args args = new getAllTermSubjectByDetailId_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<termSubject> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllTermSubjectByDetailId();
      }
    }

    public void getStuIntelligentExerciseSubject(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStuIntelligentExerciseSubject_call method_call = new getStuIntelligentExerciseSubject_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStuIntelligentExerciseSubject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getStuIntelligentExerciseSubject_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStuIntelligentExerciseSubject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStuIntelligentExerciseSubject_args args = new getStuIntelligentExerciseSubject_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IntelligentExerciseSubject getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStuIntelligentExerciseSubject();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("retrieveStuOrdServiceDetail", new retrieveStuOrdServiceDetail());
      processMap.put("retrieveStuOrdServiceTeamByDetailId", new retrieveStuOrdServiceTeamByDetailId());
      processMap.put("retrieveStuOrdServiceTeamByStuMobileAndName", new retrieveStuOrdServiceTeamByStuMobileAndName());
      processMap.put("getCurrentTermSubjectByStuId", new getCurrentTermSubjectByStuId());
      processMap.put("getAllTermSubjectByDetailId", new getAllTermSubjectByDetailId());
      processMap.put("getStuIntelligentExerciseSubject", new getStuIntelligentExerciseSubject());
      return processMap;
    }

    public static class retrieveStuOrdServiceDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceDetail_args> {
      public retrieveStuOrdServiceDetail() {
        super("retrieveStuOrdServiceDetail");
      }

      public retrieveStuOrdServiceDetail_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceDetail_result getResult(I iface, retrieveStuOrdServiceDetail_args args) throws TException {
        retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
        result.success = iface.retrieveStuOrdServiceDetail(args.stuId, args.ordStatus);
        return result;
      }
    }

    public static class retrieveStuOrdServiceTeamByDetailId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceTeamByDetailId_args> {
      public retrieveStuOrdServiceTeamByDetailId() {
        super("retrieveStuOrdServiceTeamByDetailId");
      }

      public retrieveStuOrdServiceTeamByDetailId_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByDetailId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceTeamByDetailId_result getResult(I iface, retrieveStuOrdServiceTeamByDetailId_args args) throws TException {
        retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
        result.success = iface.retrieveStuOrdServiceTeamByDetailId(args.detailId);
        return result;
      }
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceTeamByStuMobileAndName_args> {
      public retrieveStuOrdServiceTeamByStuMobileAndName() {
        super("retrieveStuOrdServiceTeamByStuMobileAndName");
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_result getResult(I iface, retrieveStuOrdServiceTeamByStuMobileAndName_args args) throws TException {
        retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
        result.success = iface.retrieveStuOrdServiceTeamByStuMobileAndName(args.mobile, args.name);
        return result;
      }
    }

    public static class getCurrentTermSubjectByStuId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentTermSubjectByStuId_args> {
      public getCurrentTermSubjectByStuId() {
        super("getCurrentTermSubjectByStuId");
      }

      public getCurrentTermSubjectByStuId_args getEmptyArgsInstance() {
        return new getCurrentTermSubjectByStuId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentTermSubjectByStuId_result getResult(I iface, getCurrentTermSubjectByStuId_args args) throws TException {
        getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
        result.success = iface.getCurrentTermSubjectByStuId(args.stuId);
        return result;
      }
    }

    public static class getAllTermSubjectByDetailId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTermSubjectByDetailId_args> {
      public getAllTermSubjectByDetailId() {
        super("getAllTermSubjectByDetailId");
      }

      public getAllTermSubjectByDetailId_args getEmptyArgsInstance() {
        return new getAllTermSubjectByDetailId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllTermSubjectByDetailId_result getResult(I iface, getAllTermSubjectByDetailId_args args) throws TException {
        getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
        result.success = iface.getAllTermSubjectByDetailId(args.detailId);
        return result;
      }
    }

    public static class getStuIntelligentExerciseSubject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStuIntelligentExerciseSubject_args> {
      public getStuIntelligentExerciseSubject() {
        super("getStuIntelligentExerciseSubject");
      }

      public getStuIntelligentExerciseSubject_args getEmptyArgsInstance() {
        return new getStuIntelligentExerciseSubject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStuIntelligentExerciseSubject_result getResult(I iface, getStuIntelligentExerciseSubject_args args) throws TException {
        getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
        result.success = iface.getStuIntelligentExerciseSubject(args.stuId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("retrieveStuOrdServiceDetail", new retrieveStuOrdServiceDetail());
      processMap.put("retrieveStuOrdServiceTeamByDetailId", new retrieveStuOrdServiceTeamByDetailId());
      processMap.put("retrieveStuOrdServiceTeamByStuMobileAndName", new retrieveStuOrdServiceTeamByStuMobileAndName());
      processMap.put("getCurrentTermSubjectByStuId", new getCurrentTermSubjectByStuId());
      processMap.put("getAllTermSubjectByDetailId", new getAllTermSubjectByDetailId());
      processMap.put("getStuIntelligentExerciseSubject", new getStuIntelligentExerciseSubject());
      return processMap;
    }

    public static class retrieveStuOrdServiceDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceDetail_args, StuOrdServiceDetail> {
      public retrieveStuOrdServiceDetail() {
        super("retrieveStuOrdServiceDetail");
      }

      public retrieveStuOrdServiceDetail_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceDetail_args();
      }

      public AsyncMethodCallback<StuOrdServiceDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StuOrdServiceDetail>() { 
          public void onComplete(StuOrdServiceDetail o) {
            retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceDetail_args args, AsyncMethodCallback<StuOrdServiceDetail> resultHandler) throws TException {
        iface.retrieveStuOrdServiceDetail(args.stuId, args.ordStatus,resultHandler);
      }
    }

    public static class retrieveStuOrdServiceTeamByDetailId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceTeamByDetailId_args, OrdServiceTeam> {
      public retrieveStuOrdServiceTeamByDetailId() {
        super("retrieveStuOrdServiceTeamByDetailId");
      }

      public retrieveStuOrdServiceTeamByDetailId_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByDetailId_args();
      }

      public AsyncMethodCallback<OrdServiceTeam> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrdServiceTeam>() { 
          public void onComplete(OrdServiceTeam o) {
            retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceTeamByDetailId_args args, AsyncMethodCallback<OrdServiceTeam> resultHandler) throws TException {
        iface.retrieveStuOrdServiceTeamByDetailId(args.detailId,resultHandler);
      }
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceTeamByStuMobileAndName_args, List<OrdServiceTeam>> {
      public retrieveStuOrdServiceTeamByStuMobileAndName() {
        super("retrieveStuOrdServiceTeamByStuMobileAndName");
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      }

      public AsyncMethodCallback<List<OrdServiceTeam>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrdServiceTeam>>() { 
          public void onComplete(List<OrdServiceTeam> o) {
            retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceTeamByStuMobileAndName_args args, AsyncMethodCallback<List<OrdServiceTeam>> resultHandler) throws TException {
        iface.retrieveStuOrdServiceTeamByStuMobileAndName(args.mobile, args.name,resultHandler);
      }
    }

    public static class getCurrentTermSubjectByStuId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentTermSubjectByStuId_args, List<OrdDetailTermSubject>> {
      public getCurrentTermSubjectByStuId() {
        super("getCurrentTermSubjectByStuId");
      }

      public getCurrentTermSubjectByStuId_args getEmptyArgsInstance() {
        return new getCurrentTermSubjectByStuId_args();
      }

      public AsyncMethodCallback<List<OrdDetailTermSubject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrdDetailTermSubject>>() { 
          public void onComplete(List<OrdDetailTermSubject> o) {
            getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentTermSubjectByStuId_args args, AsyncMethodCallback<List<OrdDetailTermSubject>> resultHandler) throws TException {
        iface.getCurrentTermSubjectByStuId(args.stuId,resultHandler);
      }
    }

    public static class getAllTermSubjectByDetailId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTermSubjectByDetailId_args, List<termSubject>> {
      public getAllTermSubjectByDetailId() {
        super("getAllTermSubjectByDetailId");
      }

      public getAllTermSubjectByDetailId_args getEmptyArgsInstance() {
        return new getAllTermSubjectByDetailId_args();
      }

      public AsyncMethodCallback<List<termSubject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<termSubject>>() { 
          public void onComplete(List<termSubject> o) {
            getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllTermSubjectByDetailId_args args, AsyncMethodCallback<List<termSubject>> resultHandler) throws TException {
        iface.getAllTermSubjectByDetailId(args.detailId,resultHandler);
      }
    }

    public static class getStuIntelligentExerciseSubject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStuIntelligentExerciseSubject_args, IntelligentExerciseSubject> {
      public getStuIntelligentExerciseSubject() {
        super("getStuIntelligentExerciseSubject");
      }

      public getStuIntelligentExerciseSubject_args getEmptyArgsInstance() {
        return new getStuIntelligentExerciseSubject_args();
      }

      public AsyncMethodCallback<IntelligentExerciseSubject> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IntelligentExerciseSubject>() { 
          public void onComplete(IntelligentExerciseSubject o) {
            getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStuIntelligentExerciseSubject_args args, AsyncMethodCallback<IntelligentExerciseSubject> resultHandler) throws TException {
        iface.getStuIntelligentExerciseSubject(args.stuId,resultHandler);
      }
    }

  }

  public static class retrieveStuOrdServiceDetail_args implements org.apache.thrift.TBase<retrieveStuOrdServiceDetail_args, retrieveStuOrdServiceDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceDetail_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordStatus", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceDetail_argsTupleSchemeFactory());
    }

    public int stuId; // required
    public List<String> ordStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId"),
      ORD_STATUS((short)2, "ordStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          case 2: // ORD_STATUS
            return ORD_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ordStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceDetail_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceDetail_args() {
    }

    public retrieveStuOrdServiceDetail_args(
      int stuId,
      List<String> ordStatus)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
      this.ordStatus = ordStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceDetail_args(retrieveStuOrdServiceDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
      if (other.isSetOrdStatus()) {
        List<String> __this__ordStatus = new ArrayList<String>(other.ordStatus);
        this.ordStatus = __this__ordStatus;
      }
    }

    public retrieveStuOrdServiceDetail_args deepCopy() {
      return new retrieveStuOrdServiceDetail_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
      this.ordStatus = null;
    }

    public int getStuId() {
      return this.stuId;
    }

    public retrieveStuOrdServiceDetail_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public int getOrdStatusSize() {
      return (this.ordStatus == null) ? 0 : this.ordStatus.size();
    }

    public java.util.Iterator<String> getOrdStatusIterator() {
      return (this.ordStatus == null) ? null : this.ordStatus.iterator();
    }

    public void addToOrdStatus(String elem) {
      if (this.ordStatus == null) {
        this.ordStatus = new ArrayList<String>();
      }
      this.ordStatus.add(elem);
    }

    public List<String> getOrdStatus() {
      return this.ordStatus;
    }

    public retrieveStuOrdServiceDetail_args setOrdStatus(List<String> ordStatus) {
      this.ordStatus = ordStatus;
      return this;
    }

    public void unsetOrdStatus() {
      this.ordStatus = null;
    }

    /** Returns true if field ordStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdStatus() {
      return this.ordStatus != null;
    }

    public void setOrdStatusIsSet(boolean value) {
      if (!value) {
        this.ordStatus = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      case ORD_STATUS:
        if (value == null) {
          unsetOrdStatus();
        } else {
          setOrdStatus((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      case ORD_STATUS:
        return getOrdStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      case ORD_STATUS:
        return isSetOrdStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceDetail_args)
        return this.equals((retrieveStuOrdServiceDetail_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      boolean this_present_ordStatus = true && this.isSetOrdStatus();
      boolean that_present_ordStatus = true && that.isSetOrdStatus();
      if (this_present_ordStatus || that_present_ordStatus) {
        if (!(this_present_ordStatus && that_present_ordStatus))
          return false;
        if (!this.ordStatus.equals(that.ordStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      boolean present_ordStatus = true && (isSetOrdStatus());
      list.add(present_ordStatus);
      if (present_ordStatus)
        list.add(ordStatus);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrdStatus()).compareTo(other.isSetOrdStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordStatus, other.ordStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceDetail_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ordStatus:");
      if (this.ordStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.ordStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceDetail_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceDetail_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORD_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.ordStatus = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.ordStatus.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setOrdStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        if (struct.ordStatus != null) {
          oprot.writeFieldBegin(ORD_STATUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ordStatus.size()));
            for (String _iter35 : struct.ordStatus)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceDetail_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceDetail_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        if (struct.isSetOrdStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
        if (struct.isSetOrdStatus()) {
          {
            oprot.writeI32(struct.ordStatus.size());
            for (String _iter36 : struct.ordStatus)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ordStatus = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.ordStatus.add(_elem38);
            }
          }
          struct.setOrdStatusIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceDetail_result implements org.apache.thrift.TBase<retrieveStuOrdServiceDetail_result, retrieveStuOrdServiceDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceDetail_resultTupleSchemeFactory());
    }

    public StuOrdServiceDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuOrdServiceDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceDetail_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceDetail_result() {
    }

    public retrieveStuOrdServiceDetail_result(
      StuOrdServiceDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceDetail_result(retrieveStuOrdServiceDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new StuOrdServiceDetail(other.success);
      }
    }

    public retrieveStuOrdServiceDetail_result deepCopy() {
      return new retrieveStuOrdServiceDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StuOrdServiceDetail getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceDetail_result setSuccess(StuOrdServiceDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StuOrdServiceDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceDetail_result)
        return this.equals((retrieveStuOrdServiceDetail_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceDetail_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceDetail_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StuOrdServiceDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceDetail_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceDetail_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StuOrdServiceDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByDetailId_args implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByDetailId_args, retrieveStuOrdServiceTeamByDetailId_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByDetailId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByDetailId_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByDetailId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByDetailId_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByDetailId_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByDetailId_args() {
    }

    public retrieveStuOrdServiceTeamByDetailId_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByDetailId_args(retrieveStuOrdServiceTeamByDetailId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public retrieveStuOrdServiceTeamByDetailId_args deepCopy() {
      return new retrieveStuOrdServiceTeamByDetailId_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public retrieveStuOrdServiceTeamByDetailId_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByDetailId_args)
        return this.equals((retrieveStuOrdServiceTeamByDetailId_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByDetailId_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByDetailId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByDetailId_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByDetailId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByDetailId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByDetailId_result implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByDetailId_result, retrieveStuOrdServiceTeamByDetailId_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByDetailId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByDetailId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByDetailId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByDetailId_resultTupleSchemeFactory());
    }

    public OrdServiceTeam success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdServiceTeam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByDetailId_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByDetailId_result() {
    }

    public retrieveStuOrdServiceTeamByDetailId_result(
      OrdServiceTeam success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByDetailId_result(retrieveStuOrdServiceTeamByDetailId_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrdServiceTeam(other.success);
      }
    }

    public retrieveStuOrdServiceTeamByDetailId_result deepCopy() {
      return new retrieveStuOrdServiceTeamByDetailId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OrdServiceTeam getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceTeamByDetailId_result setSuccess(OrdServiceTeam success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrdServiceTeam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByDetailId_result)
        return this.equals((retrieveStuOrdServiceTeamByDetailId_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByDetailId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByDetailId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByDetailId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByDetailId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrdServiceTeam();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByDetailId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OrdServiceTeam();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByStuMobileAndName_args implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByStuMobileAndName_args, retrieveStuOrdServiceTeamByStuMobileAndName_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByStuMobileAndName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByStuMobileAndName_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleSchemeFactory());
    }

    public String mobile; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByStuMobileAndName_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args() {
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args(
      String mobile,
      String name)
    {
      this();
      this.mobile = mobile;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByStuMobileAndName_args(retrieveStuOrdServiceTeamByStuMobileAndName_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args deepCopy() {
      return new retrieveStuOrdServiceTeamByStuMobileAndName_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
      this.name = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByStuMobileAndName_args)
        return this.equals((retrieveStuOrdServiceTeamByStuMobileAndName_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByStuMobileAndName_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByStuMobileAndName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByStuMobileAndName_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByStuMobileAndName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByStuMobileAndName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByStuMobileAndName_result implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByStuMobileAndName_result, retrieveStuOrdServiceTeamByStuMobileAndName_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByStuMobileAndName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByStuMobileAndName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleSchemeFactory());
    }

    public List<OrdServiceTeam> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdServiceTeam.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByStuMobileAndName_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result() {
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result(
      List<OrdServiceTeam> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByStuMobileAndName_result(retrieveStuOrdServiceTeamByStuMobileAndName_result other) {
      if (other.isSetSuccess()) {
        List<OrdServiceTeam> __this__success = new ArrayList<OrdServiceTeam>(other.success.size());
        for (OrdServiceTeam other_element : other.success) {
          __this__success.add(new OrdServiceTeam(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result deepCopy() {
      return new retrieveStuOrdServiceTeamByStuMobileAndName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrdServiceTeam> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrdServiceTeam elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrdServiceTeam>();
      }
      this.success.add(elem);
    }

    public List<OrdServiceTeam> getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result setSuccess(List<OrdServiceTeam> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrdServiceTeam>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByStuMobileAndName_result)
        return this.equals((retrieveStuOrdServiceTeamByStuMobileAndName_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByStuMobileAndName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByStuMobileAndName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByStuMobileAndName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByStuMobileAndName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<OrdServiceTeam>(_list40.size);
                  OrdServiceTeam _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new OrdServiceTeam();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrdServiceTeam _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByStuMobileAndName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrdServiceTeam _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrdServiceTeam>(_list45.size);
            OrdServiceTeam _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new OrdServiceTeam();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentTermSubjectByStuId_args implements org.apache.thrift.TBase<getCurrentTermSubjectByStuId_args, getCurrentTermSubjectByStuId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTermSubjectByStuId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTermSubjectByStuId_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentTermSubjectByStuId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentTermSubjectByStuId_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTermSubjectByStuId_args.class, metaDataMap);
    }

    public getCurrentTermSubjectByStuId_args() {
    }

    public getCurrentTermSubjectByStuId_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTermSubjectByStuId_args(getCurrentTermSubjectByStuId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getCurrentTermSubjectByStuId_args deepCopy() {
      return new getCurrentTermSubjectByStuId_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getCurrentTermSubjectByStuId_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTermSubjectByStuId_args)
        return this.equals((getCurrentTermSubjectByStuId_args)that);
      return false;
    }

    public boolean equals(getCurrentTermSubjectByStuId_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentTermSubjectByStuId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentTermSubjectByStuId_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTermSubjectByStuId_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_argsStandardScheme getScheme() {
        return new getCurrentTermSubjectByStuId_argsStandardScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_argsStandardScheme extends StandardScheme<getCurrentTermSubjectByStuId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTermSubjectByStuId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTermSubjectByStuId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTermSubjectByStuId_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_argsTupleScheme getScheme() {
        return new getCurrentTermSubjectByStuId_argsTupleScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_argsTupleScheme extends TupleScheme<getCurrentTermSubjectByStuId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getCurrentTermSubjectByStuId_result implements org.apache.thrift.TBase<getCurrentTermSubjectByStuId_result, getCurrentTermSubjectByStuId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTermSubjectByStuId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTermSubjectByStuId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentTermSubjectByStuId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentTermSubjectByStuId_resultTupleSchemeFactory());
    }

    public List<OrdDetailTermSubject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdDetailTermSubject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTermSubjectByStuId_result.class, metaDataMap);
    }

    public getCurrentTermSubjectByStuId_result() {
    }

    public getCurrentTermSubjectByStuId_result(
      List<OrdDetailTermSubject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTermSubjectByStuId_result(getCurrentTermSubjectByStuId_result other) {
      if (other.isSetSuccess()) {
        List<OrdDetailTermSubject> __this__success = new ArrayList<OrdDetailTermSubject>(other.success.size());
        for (OrdDetailTermSubject other_element : other.success) {
          __this__success.add(new OrdDetailTermSubject(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCurrentTermSubjectByStuId_result deepCopy() {
      return new getCurrentTermSubjectByStuId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrdDetailTermSubject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrdDetailTermSubject elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrdDetailTermSubject>();
      }
      this.success.add(elem);
    }

    public List<OrdDetailTermSubject> getSuccess() {
      return this.success;
    }

    public getCurrentTermSubjectByStuId_result setSuccess(List<OrdDetailTermSubject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrdDetailTermSubject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTermSubjectByStuId_result)
        return this.equals((getCurrentTermSubjectByStuId_result)that);
      return false;
    }

    public boolean equals(getCurrentTermSubjectByStuId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentTermSubjectByStuId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentTermSubjectByStuId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTermSubjectByStuId_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_resultStandardScheme getScheme() {
        return new getCurrentTermSubjectByStuId_resultStandardScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_resultStandardScheme extends StandardScheme<getCurrentTermSubjectByStuId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTermSubjectByStuId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<OrdDetailTermSubject>(_list48.size);
                  OrdDetailTermSubject _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new OrdDetailTermSubject();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTermSubjectByStuId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrdDetailTermSubject _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTermSubjectByStuId_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_resultTupleScheme getScheme() {
        return new getCurrentTermSubjectByStuId_resultTupleScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_resultTupleScheme extends TupleScheme<getCurrentTermSubjectByStuId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrdDetailTermSubject _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrdDetailTermSubject>(_list53.size);
            OrdDetailTermSubject _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new OrdDetailTermSubject();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllTermSubjectByDetailId_args implements org.apache.thrift.TBase<getAllTermSubjectByDetailId_args, getAllTermSubjectByDetailId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTermSubjectByDetailId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTermSubjectByDetailId_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTermSubjectByDetailId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTermSubjectByDetailId_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTermSubjectByDetailId_args.class, metaDataMap);
    }

    public getAllTermSubjectByDetailId_args() {
    }

    public getAllTermSubjectByDetailId_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTermSubjectByDetailId_args(getAllTermSubjectByDetailId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public getAllTermSubjectByDetailId_args deepCopy() {
      return new getAllTermSubjectByDetailId_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public getAllTermSubjectByDetailId_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTermSubjectByDetailId_args)
        return this.equals((getAllTermSubjectByDetailId_args)that);
      return false;
    }

    public boolean equals(getAllTermSubjectByDetailId_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTermSubjectByDetailId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTermSubjectByDetailId_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTermSubjectByDetailId_argsStandardSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_argsStandardScheme getScheme() {
        return new getAllTermSubjectByDetailId_argsStandardScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_argsStandardScheme extends StandardScheme<getAllTermSubjectByDetailId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTermSubjectByDetailId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTermSubjectByDetailId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTermSubjectByDetailId_argsTupleSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_argsTupleScheme getScheme() {
        return new getAllTermSubjectByDetailId_argsTupleScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_argsTupleScheme extends TupleScheme<getAllTermSubjectByDetailId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class getAllTermSubjectByDetailId_result implements org.apache.thrift.TBase<getAllTermSubjectByDetailId_result, getAllTermSubjectByDetailId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTermSubjectByDetailId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTermSubjectByDetailId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTermSubjectByDetailId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTermSubjectByDetailId_resultTupleSchemeFactory());
    }

    public List<termSubject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, termSubject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTermSubjectByDetailId_result.class, metaDataMap);
    }

    public getAllTermSubjectByDetailId_result() {
    }

    public getAllTermSubjectByDetailId_result(
      List<termSubject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTermSubjectByDetailId_result(getAllTermSubjectByDetailId_result other) {
      if (other.isSetSuccess()) {
        List<termSubject> __this__success = new ArrayList<termSubject>(other.success.size());
        for (termSubject other_element : other.success) {
          __this__success.add(new termSubject(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllTermSubjectByDetailId_result deepCopy() {
      return new getAllTermSubjectByDetailId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<termSubject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(termSubject elem) {
      if (this.success == null) {
        this.success = new ArrayList<termSubject>();
      }
      this.success.add(elem);
    }

    public List<termSubject> getSuccess() {
      return this.success;
    }

    public getAllTermSubjectByDetailId_result setSuccess(List<termSubject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<termSubject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTermSubjectByDetailId_result)
        return this.equals((getAllTermSubjectByDetailId_result)that);
      return false;
    }

    public boolean equals(getAllTermSubjectByDetailId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTermSubjectByDetailId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTermSubjectByDetailId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTermSubjectByDetailId_resultStandardSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_resultStandardScheme getScheme() {
        return new getAllTermSubjectByDetailId_resultStandardScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_resultStandardScheme extends StandardScheme<getAllTermSubjectByDetailId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTermSubjectByDetailId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<termSubject>(_list56.size);
                  termSubject _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new termSubject();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTermSubjectByDetailId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (termSubject _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTermSubjectByDetailId_resultTupleSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_resultTupleScheme getScheme() {
        return new getAllTermSubjectByDetailId_resultTupleScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_resultTupleScheme extends TupleScheme<getAllTermSubjectByDetailId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (termSubject _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<termSubject>(_list61.size);
            termSubject _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new termSubject();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStuIntelligentExerciseSubject_args implements org.apache.thrift.TBase<getStuIntelligentExerciseSubject_args, getStuIntelligentExerciseSubject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStuIntelligentExerciseSubject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuIntelligentExerciseSubject_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuIntelligentExerciseSubject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuIntelligentExerciseSubject_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuIntelligentExerciseSubject_args.class, metaDataMap);
    }

    public getStuIntelligentExerciseSubject_args() {
    }

    public getStuIntelligentExerciseSubject_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuIntelligentExerciseSubject_args(getStuIntelligentExerciseSubject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getStuIntelligentExerciseSubject_args deepCopy() {
      return new getStuIntelligentExerciseSubject_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getStuIntelligentExerciseSubject_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuIntelligentExerciseSubject_args)
        return this.equals((getStuIntelligentExerciseSubject_args)that);
      return false;
    }

    public boolean equals(getStuIntelligentExerciseSubject_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuIntelligentExerciseSubject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuIntelligentExerciseSubject_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuIntelligentExerciseSubject_argsStandardSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_argsStandardScheme getScheme() {
        return new getStuIntelligentExerciseSubject_argsStandardScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_argsStandardScheme extends StandardScheme<getStuIntelligentExerciseSubject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuIntelligentExerciseSubject_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuIntelligentExerciseSubject_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuIntelligentExerciseSubject_argsTupleSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_argsTupleScheme getScheme() {
        return new getStuIntelligentExerciseSubject_argsTupleScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_argsTupleScheme extends TupleScheme<getStuIntelligentExerciseSubject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getStuIntelligentExerciseSubject_result implements org.apache.thrift.TBase<getStuIntelligentExerciseSubject_result, getStuIntelligentExerciseSubject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStuIntelligentExerciseSubject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuIntelligentExerciseSubject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuIntelligentExerciseSubject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuIntelligentExerciseSubject_resultTupleSchemeFactory());
    }

    public IntelligentExerciseSubject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntelligentExerciseSubject.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuIntelligentExerciseSubject_result.class, metaDataMap);
    }

    public getStuIntelligentExerciseSubject_result() {
    }

    public getStuIntelligentExerciseSubject_result(
      IntelligentExerciseSubject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuIntelligentExerciseSubject_result(getStuIntelligentExerciseSubject_result other) {
      if (other.isSetSuccess()) {
        this.success = new IntelligentExerciseSubject(other.success);
      }
    }

    public getStuIntelligentExerciseSubject_result deepCopy() {
      return new getStuIntelligentExerciseSubject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IntelligentExerciseSubject getSuccess() {
      return this.success;
    }

    public getStuIntelligentExerciseSubject_result setSuccess(IntelligentExerciseSubject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IntelligentExerciseSubject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuIntelligentExerciseSubject_result)
        return this.equals((getStuIntelligentExerciseSubject_result)that);
      return false;
    }

    public boolean equals(getStuIntelligentExerciseSubject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuIntelligentExerciseSubject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuIntelligentExerciseSubject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuIntelligentExerciseSubject_resultStandardSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_resultStandardScheme getScheme() {
        return new getStuIntelligentExerciseSubject_resultStandardScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_resultStandardScheme extends StandardScheme<getStuIntelligentExerciseSubject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuIntelligentExerciseSubject_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IntelligentExerciseSubject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuIntelligentExerciseSubject_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuIntelligentExerciseSubject_resultTupleSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_resultTupleScheme getScheme() {
        return new getStuIntelligentExerciseSubject_resultTupleScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_resultTupleScheme extends TupleScheme<getStuIntelligentExerciseSubject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IntelligentExerciseSubject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
