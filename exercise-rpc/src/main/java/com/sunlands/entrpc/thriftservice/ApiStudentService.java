/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sunlands.entrpc.thriftservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-03-21")
public class ApiStudentService {

  public interface Iface {

    public Map<Integer,Short> isVip(List<Integer> stuIds) throws TException;

    public Map<String,String> isInstructor(String username) throws TException;

    public StuOrdServiceDetail retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException;

    public Role retrieveActualRole(int stuId) throws TException;

    public void saveStuApplyProvince(int stuId, int provinceId) throws TException;

    public Province retrieveStuApplyProvince(int stuId) throws TException;

    public List<Student> retrieveStuByFuzzyNickname(String nickname, int limitSize) throws TException;

    public Student retrieveStuByMobile(String mobile) throws TException;

    public int retrieveStuIDByMobile(String mobile) throws TException;

    public Map<String,String> retrieveTeacherIDByEmail(String email) throws TException;

    public List<Integer> getNERoundIds(List<Integer> roundIds) throws TException;

    public List<StuRound> getRoundIdsByStuId(int stuId) throws TException;

    public List<Integer> getStudentsByBrokenMobile(String mobile) throws TException;

    public Map<String,Integer> getOrdCountAndOffServiceOrdCount(int stuId) throws TException;

    public TeacherServiceStudentResult retrieveStudentsListByAccount(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage) throws TException;

    public List<TeacherInfo> retrieveTeacherInfoByAccount(List<String> email) throws TException;

    public int judgeWaitForInsuranceByStudentId(int stuId) throws TException;

    public List<Student> retrieveStudentsInfoByImId(List<String> imIds, List<Integer> userIds) throws TException;

    public List<Province> retrieveAllProvinces() throws TException;

    public List<BaseIdNameDto> retrievePackagesByAccount(List<String> emails) throws TException;

    public int judgeNPSAndComplainByUserId(int stuId) throws TException;

    public int judgeInstructorRelationWithUserId(int userId, int teacherId) throws TException;

    public StuOrderInfo getUserInfoById(int userId) throws TException;

    public List<StuEvaluateCount> getEvaluateCountByStuIds(List<Integer> stuIds) throws TException;

    public List<StuNPSCount> getNPSCountByStuIds(List<Integer> stuIds) throws TException;

    public OrdServiceTeam retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException;

    public Teacher retrieveTeacherByDetailId(int detailId) throws TException;

    public List<OrdServiceTeam> retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException;

    public List<OrdDetailTermSubject> getCurrentTermSubjectByStuId(int stuId) throws TException;

    public List<termSubject> getAllTermSubjectByDetailId(int detailId) throws TException;

    public IntelligentExerciseSubject getStuIntelligentExerciseSubject(int stuId) throws TException;

    public SubjectKnowledgeTreeDTO getSubjectHasKnowledgeTree(int detailId) throws TException;

  }

  public interface AsyncIface {

    public void isVip(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException;

    public void isInstructor(String username, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveActualRole(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void saveStuApplyProvince(int stuId, int provinceId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuApplyProvince(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuByFuzzyNickname(String nickname, int limitSize, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuByMobile(String mobile, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuIDByMobile(String mobile, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveTeacherIDByEmail(String email, AsyncMethodCallback resultHandler) throws TException;

    public void getNERoundIds(List<Integer> roundIds, AsyncMethodCallback resultHandler) throws TException;

    public void getRoundIdsByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void getStudentsByBrokenMobile(String mobile, AsyncMethodCallback resultHandler) throws TException;

    public void getOrdCountAndOffServiceOrdCount(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStudentsListByAccount(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveTeacherInfoByAccount(List<String> email, AsyncMethodCallback resultHandler) throws TException;

    public void judgeWaitForInsuranceByStudentId(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStudentsInfoByImId(List<String> imIds, List<Integer> userIds, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveAllProvinces(AsyncMethodCallback resultHandler) throws TException;

    public void retrievePackagesByAccount(List<String> emails, AsyncMethodCallback resultHandler) throws TException;

    public void judgeNPSAndComplainByUserId(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void judgeInstructorRelationWithUserId(int userId, int teacherId, AsyncMethodCallback resultHandler) throws TException;

    public void getUserInfoById(int userId, AsyncMethodCallback resultHandler) throws TException;

    public void getEvaluateCountByStuIds(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException;

    public void getNPSCountByStuIds(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuOrdServiceTeamByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveTeacherByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name, AsyncMethodCallback resultHandler) throws TException;

    public void getCurrentTermSubjectByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void getAllTermSubjectByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException;

    public void getStuIntelligentExerciseSubject(int stuId, AsyncMethodCallback resultHandler) throws TException;

    public void getSubjectHasKnowledgeTree(int detailId, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<Integer,Short> isVip(List<Integer> stuIds) throws TException
    {
      send_isVip(stuIds);
      return recv_isVip();
    }

    public void send_isVip(List<Integer> stuIds) throws TException
    {
      isVip_args args = new isVip_args();
      args.setStuIds(stuIds);
      sendBase("isVip", args);
    }

    public Map<Integer,Short> recv_isVip() throws TException
    {
      isVip_result result = new isVip_result();
      receiveBase(result, "isVip");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isVip failed: unknown result");
    }

    public Map<String,String> isInstructor(String username) throws TException
    {
      send_isInstructor(username);
      return recv_isInstructor();
    }

    public void send_isInstructor(String username) throws TException
    {
      isInstructor_args args = new isInstructor_args();
      args.setUsername(username);
      sendBase("isInstructor", args);
    }

    public Map<String,String> recv_isInstructor() throws TException
    {
      isInstructor_result result = new isInstructor_result();
      receiveBase(result, "isInstructor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isInstructor failed: unknown result");
    }

    public StuOrdServiceDetail retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException
    {
      send_retrieveStuOrdServiceDetail(stuId, ordStatus);
      return recv_retrieveStuOrdServiceDetail();
    }

    public void send_retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus) throws TException
    {
      retrieveStuOrdServiceDetail_args args = new retrieveStuOrdServiceDetail_args();
      args.setStuId(stuId);
      args.setOrdStatus(ordStatus);
      sendBase("retrieveStuOrdServiceDetail", args);
    }

    public StuOrdServiceDetail recv_retrieveStuOrdServiceDetail() throws TException
    {
      retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
      receiveBase(result, "retrieveStuOrdServiceDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceDetail failed: unknown result");
    }

    public Role retrieveActualRole(int stuId) throws TException
    {
      send_retrieveActualRole(stuId);
      return recv_retrieveActualRole();
    }

    public void send_retrieveActualRole(int stuId) throws TException
    {
      retrieveActualRole_args args = new retrieveActualRole_args();
      args.setStuId(stuId);
      sendBase("retrieveActualRole", args);
    }

    public Role recv_retrieveActualRole() throws TException
    {
      retrieveActualRole_result result = new retrieveActualRole_result();
      receiveBase(result, "retrieveActualRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveActualRole failed: unknown result");
    }

    public void saveStuApplyProvince(int stuId, int provinceId) throws TException
    {
      send_saveStuApplyProvince(stuId, provinceId);
      recv_saveStuApplyProvince();
    }

    public void send_saveStuApplyProvince(int stuId, int provinceId) throws TException
    {
      saveStuApplyProvince_args args = new saveStuApplyProvince_args();
      args.setStuId(stuId);
      args.setProvinceId(provinceId);
      sendBase("saveStuApplyProvince", args);
    }

    public void recv_saveStuApplyProvince() throws TException
    {
      saveStuApplyProvince_result result = new saveStuApplyProvince_result();
      receiveBase(result, "saveStuApplyProvince");
      return;
    }

    public Province retrieveStuApplyProvince(int stuId) throws TException
    {
      send_retrieveStuApplyProvince(stuId);
      return recv_retrieveStuApplyProvince();
    }

    public void send_retrieveStuApplyProvince(int stuId) throws TException
    {
      retrieveStuApplyProvince_args args = new retrieveStuApplyProvince_args();
      args.setStuId(stuId);
      sendBase("retrieveStuApplyProvince", args);
    }

    public Province recv_retrieveStuApplyProvince() throws TException
    {
      retrieveStuApplyProvince_result result = new retrieveStuApplyProvince_result();
      receiveBase(result, "retrieveStuApplyProvince");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuApplyProvince failed: unknown result");
    }

    public List<Student> retrieveStuByFuzzyNickname(String nickname, int limitSize) throws TException
    {
      send_retrieveStuByFuzzyNickname(nickname, limitSize);
      return recv_retrieveStuByFuzzyNickname();
    }

    public void send_retrieveStuByFuzzyNickname(String nickname, int limitSize) throws TException
    {
      retrieveStuByFuzzyNickname_args args = new retrieveStuByFuzzyNickname_args();
      args.setNickname(nickname);
      args.setLimitSize(limitSize);
      sendBase("retrieveStuByFuzzyNickname", args);
    }

    public List<Student> recv_retrieveStuByFuzzyNickname() throws TException
    {
      retrieveStuByFuzzyNickname_result result = new retrieveStuByFuzzyNickname_result();
      receiveBase(result, "retrieveStuByFuzzyNickname");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuByFuzzyNickname failed: unknown result");
    }

    public Student retrieveStuByMobile(String mobile) throws TException
    {
      send_retrieveStuByMobile(mobile);
      return recv_retrieveStuByMobile();
    }

    public void send_retrieveStuByMobile(String mobile) throws TException
    {
      retrieveStuByMobile_args args = new retrieveStuByMobile_args();
      args.setMobile(mobile);
      sendBase("retrieveStuByMobile", args);
    }

    public Student recv_retrieveStuByMobile() throws TException
    {
      retrieveStuByMobile_result result = new retrieveStuByMobile_result();
      receiveBase(result, "retrieveStuByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuByMobile failed: unknown result");
    }

    public int retrieveStuIDByMobile(String mobile) throws TException
    {
      send_retrieveStuIDByMobile(mobile);
      return recv_retrieveStuIDByMobile();
    }

    public void send_retrieveStuIDByMobile(String mobile) throws TException
    {
      retrieveStuIDByMobile_args args = new retrieveStuIDByMobile_args();
      args.setMobile(mobile);
      sendBase("retrieveStuIDByMobile", args);
    }

    public int recv_retrieveStuIDByMobile() throws TException
    {
      retrieveStuIDByMobile_result result = new retrieveStuIDByMobile_result();
      receiveBase(result, "retrieveStuIDByMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuIDByMobile failed: unknown result");
    }

    public Map<String,String> retrieveTeacherIDByEmail(String email) throws TException
    {
      send_retrieveTeacherIDByEmail(email);
      return recv_retrieveTeacherIDByEmail();
    }

    public void send_retrieveTeacherIDByEmail(String email) throws TException
    {
      retrieveTeacherIDByEmail_args args = new retrieveTeacherIDByEmail_args();
      args.setEmail(email);
      sendBase("retrieveTeacherIDByEmail", args);
    }

    public Map<String,String> recv_retrieveTeacherIDByEmail() throws TException
    {
      retrieveTeacherIDByEmail_result result = new retrieveTeacherIDByEmail_result();
      receiveBase(result, "retrieveTeacherIDByEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveTeacherIDByEmail failed: unknown result");
    }

    public List<Integer> getNERoundIds(List<Integer> roundIds) throws TException
    {
      send_getNERoundIds(roundIds);
      return recv_getNERoundIds();
    }

    public void send_getNERoundIds(List<Integer> roundIds) throws TException
    {
      getNERoundIds_args args = new getNERoundIds_args();
      args.setRoundIds(roundIds);
      sendBase("getNERoundIds", args);
    }

    public List<Integer> recv_getNERoundIds() throws TException
    {
      getNERoundIds_result result = new getNERoundIds_result();
      receiveBase(result, "getNERoundIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNERoundIds failed: unknown result");
    }

    public List<StuRound> getRoundIdsByStuId(int stuId) throws TException
    {
      send_getRoundIdsByStuId(stuId);
      return recv_getRoundIdsByStuId();
    }

    public void send_getRoundIdsByStuId(int stuId) throws TException
    {
      getRoundIdsByStuId_args args = new getRoundIdsByStuId_args();
      args.setStuId(stuId);
      sendBase("getRoundIdsByStuId", args);
    }

    public List<StuRound> recv_getRoundIdsByStuId() throws TException
    {
      getRoundIdsByStuId_result result = new getRoundIdsByStuId_result();
      receiveBase(result, "getRoundIdsByStuId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoundIdsByStuId failed: unknown result");
    }

    public List<Integer> getStudentsByBrokenMobile(String mobile) throws TException
    {
      send_getStudentsByBrokenMobile(mobile);
      return recv_getStudentsByBrokenMobile();
    }

    public void send_getStudentsByBrokenMobile(String mobile) throws TException
    {
      getStudentsByBrokenMobile_args args = new getStudentsByBrokenMobile_args();
      args.setMobile(mobile);
      sendBase("getStudentsByBrokenMobile", args);
    }

    public List<Integer> recv_getStudentsByBrokenMobile() throws TException
    {
      getStudentsByBrokenMobile_result result = new getStudentsByBrokenMobile_result();
      receiveBase(result, "getStudentsByBrokenMobile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStudentsByBrokenMobile failed: unknown result");
    }

    public Map<String,Integer> getOrdCountAndOffServiceOrdCount(int stuId) throws TException
    {
      send_getOrdCountAndOffServiceOrdCount(stuId);
      return recv_getOrdCountAndOffServiceOrdCount();
    }

    public void send_getOrdCountAndOffServiceOrdCount(int stuId) throws TException
    {
      getOrdCountAndOffServiceOrdCount_args args = new getOrdCountAndOffServiceOrdCount_args();
      args.setStuId(stuId);
      sendBase("getOrdCountAndOffServiceOrdCount", args);
    }

    public Map<String,Integer> recv_getOrdCountAndOffServiceOrdCount() throws TException
    {
      getOrdCountAndOffServiceOrdCount_result result = new getOrdCountAndOffServiceOrdCount_result();
      receiveBase(result, "getOrdCountAndOffServiceOrdCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrdCountAndOffServiceOrdCount failed: unknown result");
    }

    public TeacherServiceStudentResult retrieveStudentsListByAccount(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage) throws TException
    {
      send_retrieveStudentsListByAccount(email, searchContent, ordStatus, packageIds, provinceIds, startTime, endTime, startIndex, countPerPage);
      return recv_retrieveStudentsListByAccount();
    }

    public void send_retrieveStudentsListByAccount(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage) throws TException
    {
      retrieveStudentsListByAccount_args args = new retrieveStudentsListByAccount_args();
      args.setEmail(email);
      args.setSearchContent(searchContent);
      args.setOrdStatus(ordStatus);
      args.setPackageIds(packageIds);
      args.setProvinceIds(provinceIds);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setStartIndex(startIndex);
      args.setCountPerPage(countPerPage);
      sendBase("retrieveStudentsListByAccount", args);
    }

    public TeacherServiceStudentResult recv_retrieveStudentsListByAccount() throws TException
    {
      retrieveStudentsListByAccount_result result = new retrieveStudentsListByAccount_result();
      receiveBase(result, "retrieveStudentsListByAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStudentsListByAccount failed: unknown result");
    }

    public List<TeacherInfo> retrieveTeacherInfoByAccount(List<String> email) throws TException
    {
      send_retrieveTeacherInfoByAccount(email);
      return recv_retrieveTeacherInfoByAccount();
    }

    public void send_retrieveTeacherInfoByAccount(List<String> email) throws TException
    {
      retrieveTeacherInfoByAccount_args args = new retrieveTeacherInfoByAccount_args();
      args.setEmail(email);
      sendBase("retrieveTeacherInfoByAccount", args);
    }

    public List<TeacherInfo> recv_retrieveTeacherInfoByAccount() throws TException
    {
      retrieveTeacherInfoByAccount_result result = new retrieveTeacherInfoByAccount_result();
      receiveBase(result, "retrieveTeacherInfoByAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveTeacherInfoByAccount failed: unknown result");
    }

    public int judgeWaitForInsuranceByStudentId(int stuId) throws TException
    {
      send_judgeWaitForInsuranceByStudentId(stuId);
      return recv_judgeWaitForInsuranceByStudentId();
    }

    public void send_judgeWaitForInsuranceByStudentId(int stuId) throws TException
    {
      judgeWaitForInsuranceByStudentId_args args = new judgeWaitForInsuranceByStudentId_args();
      args.setStuId(stuId);
      sendBase("judgeWaitForInsuranceByStudentId", args);
    }

    public int recv_judgeWaitForInsuranceByStudentId() throws TException
    {
      judgeWaitForInsuranceByStudentId_result result = new judgeWaitForInsuranceByStudentId_result();
      receiveBase(result, "judgeWaitForInsuranceByStudentId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "judgeWaitForInsuranceByStudentId failed: unknown result");
    }

    public List<Student> retrieveStudentsInfoByImId(List<String> imIds, List<Integer> userIds) throws TException
    {
      send_retrieveStudentsInfoByImId(imIds, userIds);
      return recv_retrieveStudentsInfoByImId();
    }

    public void send_retrieveStudentsInfoByImId(List<String> imIds, List<Integer> userIds) throws TException
    {
      retrieveStudentsInfoByImId_args args = new retrieveStudentsInfoByImId_args();
      args.setImIds(imIds);
      args.setUserIds(userIds);
      sendBase("retrieveStudentsInfoByImId", args);
    }

    public List<Student> recv_retrieveStudentsInfoByImId() throws TException
    {
      retrieveStudentsInfoByImId_result result = new retrieveStudentsInfoByImId_result();
      receiveBase(result, "retrieveStudentsInfoByImId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStudentsInfoByImId failed: unknown result");
    }

    public List<Province> retrieveAllProvinces() throws TException
    {
      send_retrieveAllProvinces();
      return recv_retrieveAllProvinces();
    }

    public void send_retrieveAllProvinces() throws TException
    {
      retrieveAllProvinces_args args = new retrieveAllProvinces_args();
      sendBase("retrieveAllProvinces", args);
    }

    public List<Province> recv_retrieveAllProvinces() throws TException
    {
      retrieveAllProvinces_result result = new retrieveAllProvinces_result();
      receiveBase(result, "retrieveAllProvinces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveAllProvinces failed: unknown result");
    }

    public List<BaseIdNameDto> retrievePackagesByAccount(List<String> emails) throws TException
    {
      send_retrievePackagesByAccount(emails);
      return recv_retrievePackagesByAccount();
    }

    public void send_retrievePackagesByAccount(List<String> emails) throws TException
    {
      retrievePackagesByAccount_args args = new retrievePackagesByAccount_args();
      args.setEmails(emails);
      sendBase("retrievePackagesByAccount", args);
    }

    public List<BaseIdNameDto> recv_retrievePackagesByAccount() throws TException
    {
      retrievePackagesByAccount_result result = new retrievePackagesByAccount_result();
      receiveBase(result, "retrievePackagesByAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrievePackagesByAccount failed: unknown result");
    }

    public int judgeNPSAndComplainByUserId(int stuId) throws TException
    {
      send_judgeNPSAndComplainByUserId(stuId);
      return recv_judgeNPSAndComplainByUserId();
    }

    public void send_judgeNPSAndComplainByUserId(int stuId) throws TException
    {
      judgeNPSAndComplainByUserId_args args = new judgeNPSAndComplainByUserId_args();
      args.setStuId(stuId);
      sendBase("judgeNPSAndComplainByUserId", args);
    }

    public int recv_judgeNPSAndComplainByUserId() throws TException
    {
      judgeNPSAndComplainByUserId_result result = new judgeNPSAndComplainByUserId_result();
      receiveBase(result, "judgeNPSAndComplainByUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "judgeNPSAndComplainByUserId failed: unknown result");
    }

    public int judgeInstructorRelationWithUserId(int userId, int teacherId) throws TException
    {
      send_judgeInstructorRelationWithUserId(userId, teacherId);
      return recv_judgeInstructorRelationWithUserId();
    }

    public void send_judgeInstructorRelationWithUserId(int userId, int teacherId) throws TException
    {
      judgeInstructorRelationWithUserId_args args = new judgeInstructorRelationWithUserId_args();
      args.setUserId(userId);
      args.setTeacherId(teacherId);
      sendBase("judgeInstructorRelationWithUserId", args);
    }

    public int recv_judgeInstructorRelationWithUserId() throws TException
    {
      judgeInstructorRelationWithUserId_result result = new judgeInstructorRelationWithUserId_result();
      receiveBase(result, "judgeInstructorRelationWithUserId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "judgeInstructorRelationWithUserId failed: unknown result");
    }

    public StuOrderInfo getUserInfoById(int userId) throws TException
    {
      send_getUserInfoById(userId);
      return recv_getUserInfoById();
    }

    public void send_getUserInfoById(int userId) throws TException
    {
      getUserInfoById_args args = new getUserInfoById_args();
      args.setUserId(userId);
      sendBase("getUserInfoById", args);
    }

    public StuOrderInfo recv_getUserInfoById() throws TException
    {
      getUserInfoById_result result = new getUserInfoById_result();
      receiveBase(result, "getUserInfoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInfoById failed: unknown result");
    }

    public List<StuEvaluateCount> getEvaluateCountByStuIds(List<Integer> stuIds) throws TException
    {
      send_getEvaluateCountByStuIds(stuIds);
      return recv_getEvaluateCountByStuIds();
    }

    public void send_getEvaluateCountByStuIds(List<Integer> stuIds) throws TException
    {
      getEvaluateCountByStuIds_args args = new getEvaluateCountByStuIds_args();
      args.setStuIds(stuIds);
      sendBase("getEvaluateCountByStuIds", args);
    }

    public List<StuEvaluateCount> recv_getEvaluateCountByStuIds() throws TException
    {
      getEvaluateCountByStuIds_result result = new getEvaluateCountByStuIds_result();
      receiveBase(result, "getEvaluateCountByStuIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvaluateCountByStuIds failed: unknown result");
    }

    public List<StuNPSCount> getNPSCountByStuIds(List<Integer> stuIds) throws TException
    {
      send_getNPSCountByStuIds(stuIds);
      return recv_getNPSCountByStuIds();
    }

    public void send_getNPSCountByStuIds(List<Integer> stuIds) throws TException
    {
      getNPSCountByStuIds_args args = new getNPSCountByStuIds_args();
      args.setStuIds(stuIds);
      sendBase("getNPSCountByStuIds", args);
    }

    public List<StuNPSCount> recv_getNPSCountByStuIds() throws TException
    {
      getNPSCountByStuIds_result result = new getNPSCountByStuIds_result();
      receiveBase(result, "getNPSCountByStuIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNPSCountByStuIds failed: unknown result");
    }

    public OrdServiceTeam retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException
    {
      send_retrieveStuOrdServiceTeamByDetailId(detailId);
      return recv_retrieveStuOrdServiceTeamByDetailId();
    }

    public void send_retrieveStuOrdServiceTeamByDetailId(int detailId) throws TException
    {
      retrieveStuOrdServiceTeamByDetailId_args args = new retrieveStuOrdServiceTeamByDetailId_args();
      args.setDetailId(detailId);
      sendBase("retrieveStuOrdServiceTeamByDetailId", args);
    }

    public OrdServiceTeam recv_retrieveStuOrdServiceTeamByDetailId() throws TException
    {
      retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
      receiveBase(result, "retrieveStuOrdServiceTeamByDetailId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceTeamByDetailId failed: unknown result");
    }

    public Teacher retrieveTeacherByDetailId(int detailId) throws TException
    {
      send_retrieveTeacherByDetailId(detailId);
      return recv_retrieveTeacherByDetailId();
    }

    public void send_retrieveTeacherByDetailId(int detailId) throws TException
    {
      retrieveTeacherByDetailId_args args = new retrieveTeacherByDetailId_args();
      args.setDetailId(detailId);
      sendBase("retrieveTeacherByDetailId", args);
    }

    public Teacher recv_retrieveTeacherByDetailId() throws TException
    {
      retrieveTeacherByDetailId_result result = new retrieveTeacherByDetailId_result();
      receiveBase(result, "retrieveTeacherByDetailId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveTeacherByDetailId failed: unknown result");
    }

    public List<OrdServiceTeam> retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException
    {
      send_retrieveStuOrdServiceTeamByStuMobileAndName(mobile, name);
      return recv_retrieveStuOrdServiceTeamByStuMobileAndName();
    }

    public void send_retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name) throws TException
    {
      retrieveStuOrdServiceTeamByStuMobileAndName_args args = new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      args.setMobile(mobile);
      args.setName(name);
      sendBase("retrieveStuOrdServiceTeamByStuMobileAndName", args);
    }

    public List<OrdServiceTeam> recv_retrieveStuOrdServiceTeamByStuMobileAndName() throws TException
    {
      retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
      receiveBase(result, "retrieveStuOrdServiceTeamByStuMobileAndName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveStuOrdServiceTeamByStuMobileAndName failed: unknown result");
    }

    public List<OrdDetailTermSubject> getCurrentTermSubjectByStuId(int stuId) throws TException
    {
      send_getCurrentTermSubjectByStuId(stuId);
      return recv_getCurrentTermSubjectByStuId();
    }

    public void send_getCurrentTermSubjectByStuId(int stuId) throws TException
    {
      getCurrentTermSubjectByStuId_args args = new getCurrentTermSubjectByStuId_args();
      args.setStuId(stuId);
      sendBase("getCurrentTermSubjectByStuId", args);
    }

    public List<OrdDetailTermSubject> recv_getCurrentTermSubjectByStuId() throws TException
    {
      getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
      receiveBase(result, "getCurrentTermSubjectByStuId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentTermSubjectByStuId failed: unknown result");
    }

    public List<termSubject> getAllTermSubjectByDetailId(int detailId) throws TException
    {
      send_getAllTermSubjectByDetailId(detailId);
      return recv_getAllTermSubjectByDetailId();
    }

    public void send_getAllTermSubjectByDetailId(int detailId) throws TException
    {
      getAllTermSubjectByDetailId_args args = new getAllTermSubjectByDetailId_args();
      args.setDetailId(detailId);
      sendBase("getAllTermSubjectByDetailId", args);
    }

    public List<termSubject> recv_getAllTermSubjectByDetailId() throws TException
    {
      getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
      receiveBase(result, "getAllTermSubjectByDetailId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTermSubjectByDetailId failed: unknown result");
    }

    public IntelligentExerciseSubject getStuIntelligentExerciseSubject(int stuId) throws TException
    {
      send_getStuIntelligentExerciseSubject(stuId);
      return recv_getStuIntelligentExerciseSubject();
    }

    public void send_getStuIntelligentExerciseSubject(int stuId) throws TException
    {
      getStuIntelligentExerciseSubject_args args = new getStuIntelligentExerciseSubject_args();
      args.setStuId(stuId);
      sendBase("getStuIntelligentExerciseSubject", args);
    }

    public IntelligentExerciseSubject recv_getStuIntelligentExerciseSubject() throws TException
    {
      getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
      receiveBase(result, "getStuIntelligentExerciseSubject");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStuIntelligentExerciseSubject failed: unknown result");
    }

    public SubjectKnowledgeTreeDTO getSubjectHasKnowledgeTree(int detailId) throws TException
    {
      send_getSubjectHasKnowledgeTree(detailId);
      return recv_getSubjectHasKnowledgeTree();
    }

    public void send_getSubjectHasKnowledgeTree(int detailId) throws TException
    {
      getSubjectHasKnowledgeTree_args args = new getSubjectHasKnowledgeTree_args();
      args.setDetailId(detailId);
      sendBase("getSubjectHasKnowledgeTree", args);
    }

    public SubjectKnowledgeTreeDTO recv_getSubjectHasKnowledgeTree() throws TException
    {
      getSubjectHasKnowledgeTree_result result = new getSubjectHasKnowledgeTree_result();
      receiveBase(result, "getSubjectHasKnowledgeTree");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubjectHasKnowledgeTree failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void isVip(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      isVip_call method_call = new isVip_call(stuIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isVip_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> stuIds;
      public isVip_call(List<Integer> stuIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuIds = stuIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isVip", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isVip_args args = new isVip_args();
        args.setStuIds(stuIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Short> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isVip();
      }
    }

    public void isInstructor(String username, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      isInstructor_call method_call = new isInstructor_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isInstructor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public isInstructor_call(String username, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isInstructor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isInstructor_args args = new isInstructor_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isInstructor();
      }
    }

    public void retrieveStuOrdServiceDetail(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceDetail_call method_call = new retrieveStuOrdServiceDetail_call(stuId, ordStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      private List<String> ordStatus;
      public retrieveStuOrdServiceDetail_call(int stuId, List<String> ordStatus, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
        this.ordStatus = ordStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceDetail_args args = new retrieveStuOrdServiceDetail_args();
        args.setStuId(stuId);
        args.setOrdStatus(ordStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StuOrdServiceDetail getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceDetail();
      }
    }

    public void retrieveActualRole(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveActualRole_call method_call = new retrieveActualRole_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveActualRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public retrieveActualRole_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveActualRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveActualRole_args args = new retrieveActualRole_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Role getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveActualRole();
      }
    }

    public void saveStuApplyProvince(int stuId, int provinceId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      saveStuApplyProvince_call method_call = new saveStuApplyProvince_call(stuId, provinceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveStuApplyProvince_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      private int provinceId;
      public saveStuApplyProvince_call(int stuId, int provinceId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
        this.provinceId = provinceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveStuApplyProvince", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveStuApplyProvince_args args = new saveStuApplyProvince_args();
        args.setStuId(stuId);
        args.setProvinceId(provinceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveStuApplyProvince();
      }
    }

    public void retrieveStuApplyProvince(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuApplyProvince_call method_call = new retrieveStuApplyProvince_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuApplyProvince_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public retrieveStuApplyProvince_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuApplyProvince", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuApplyProvince_args args = new retrieveStuApplyProvince_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Province getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuApplyProvince();
      }
    }

    public void retrieveStuByFuzzyNickname(String nickname, int limitSize, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuByFuzzyNickname_call method_call = new retrieveStuByFuzzyNickname_call(nickname, limitSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuByFuzzyNickname_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nickname;
      private int limitSize;
      public retrieveStuByFuzzyNickname_call(String nickname, int limitSize, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nickname = nickname;
        this.limitSize = limitSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuByFuzzyNickname", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuByFuzzyNickname_args args = new retrieveStuByFuzzyNickname_args();
        args.setNickname(nickname);
        args.setLimitSize(limitSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Student> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuByFuzzyNickname();
      }
    }

    public void retrieveStuByMobile(String mobile, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuByMobile_call method_call = new retrieveStuByMobile_call(mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      public retrieveStuByMobile_call(String mobile, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuByMobile_args args = new retrieveStuByMobile_args();
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Student getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuByMobile();
      }
    }

    public void retrieveStuIDByMobile(String mobile, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuIDByMobile_call method_call = new retrieveStuIDByMobile_call(mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuIDByMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      public retrieveStuIDByMobile_call(String mobile, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuIDByMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuIDByMobile_args args = new retrieveStuIDByMobile_args();
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuIDByMobile();
      }
    }

    public void retrieveTeacherIDByEmail(String email, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveTeacherIDByEmail_call method_call = new retrieveTeacherIDByEmail_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveTeacherIDByEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String email;
      public retrieveTeacherIDByEmail_call(String email, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveTeacherIDByEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveTeacherIDByEmail_args args = new retrieveTeacherIDByEmail_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveTeacherIDByEmail();
      }
    }

    public void getNERoundIds(List<Integer> roundIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getNERoundIds_call method_call = new getNERoundIds_call(roundIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNERoundIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> roundIds;
      public getNERoundIds_call(List<Integer> roundIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roundIds = roundIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNERoundIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNERoundIds_args args = new getNERoundIds_args();
        args.setRoundIds(roundIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNERoundIds();
      }
    }

    public void getRoundIdsByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getRoundIdsByStuId_call method_call = new getRoundIdsByStuId_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoundIdsByStuId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getRoundIdsByStuId_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoundIdsByStuId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoundIdsByStuId_args args = new getRoundIdsByStuId_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<StuRound> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoundIdsByStuId();
      }
    }

    public void getStudentsByBrokenMobile(String mobile, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStudentsByBrokenMobile_call method_call = new getStudentsByBrokenMobile_call(mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStudentsByBrokenMobile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      public getStudentsByBrokenMobile_call(String mobile, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStudentsByBrokenMobile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStudentsByBrokenMobile_args args = new getStudentsByBrokenMobile_args();
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStudentsByBrokenMobile();
      }
    }

    public void getOrdCountAndOffServiceOrdCount(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getOrdCountAndOffServiceOrdCount_call method_call = new getOrdCountAndOffServiceOrdCount_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrdCountAndOffServiceOrdCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getOrdCountAndOffServiceOrdCount_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrdCountAndOffServiceOrdCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrdCountAndOffServiceOrdCount_args args = new getOrdCountAndOffServiceOrdCount_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Integer> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrdCountAndOffServiceOrdCount();
      }
    }

    public void retrieveStudentsListByAccount(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStudentsListByAccount_call method_call = new retrieveStudentsListByAccount_call(email, searchContent, ordStatus, packageIds, provinceIds, startTime, endTime, startIndex, countPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStudentsListByAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> email;
      private String searchContent;
      private List<String> ordStatus;
      private List<Integer> packageIds;
      private List<Integer> provinceIds;
      private String startTime;
      private String endTime;
      private int startIndex;
      private int countPerPage;
      public retrieveStudentsListByAccount_call(List<String> email, String searchContent, List<String> ordStatus, List<Integer> packageIds, List<Integer> provinceIds, String startTime, String endTime, int startIndex, int countPerPage, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
        this.searchContent = searchContent;
        this.ordStatus = ordStatus;
        this.packageIds = packageIds;
        this.provinceIds = provinceIds;
        this.startTime = startTime;
        this.endTime = endTime;
        this.startIndex = startIndex;
        this.countPerPage = countPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStudentsListByAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStudentsListByAccount_args args = new retrieveStudentsListByAccount_args();
        args.setEmail(email);
        args.setSearchContent(searchContent);
        args.setOrdStatus(ordStatus);
        args.setPackageIds(packageIds);
        args.setProvinceIds(provinceIds);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setStartIndex(startIndex);
        args.setCountPerPage(countPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TeacherServiceStudentResult getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStudentsListByAccount();
      }
    }

    public void retrieveTeacherInfoByAccount(List<String> email, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveTeacherInfoByAccount_call method_call = new retrieveTeacherInfoByAccount_call(email, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveTeacherInfoByAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> email;
      public retrieveTeacherInfoByAccount_call(List<String> email, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.email = email;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveTeacherInfoByAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveTeacherInfoByAccount_args args = new retrieveTeacherInfoByAccount_args();
        args.setEmail(email);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TeacherInfo> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveTeacherInfoByAccount();
      }
    }

    public void judgeWaitForInsuranceByStudentId(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      judgeWaitForInsuranceByStudentId_call method_call = new judgeWaitForInsuranceByStudentId_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class judgeWaitForInsuranceByStudentId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public judgeWaitForInsuranceByStudentId_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("judgeWaitForInsuranceByStudentId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        judgeWaitForInsuranceByStudentId_args args = new judgeWaitForInsuranceByStudentId_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_judgeWaitForInsuranceByStudentId();
      }
    }

    public void retrieveStudentsInfoByImId(List<String> imIds, List<Integer> userIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStudentsInfoByImId_call method_call = new retrieveStudentsInfoByImId_call(imIds, userIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStudentsInfoByImId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> imIds;
      private List<Integer> userIds;
      public retrieveStudentsInfoByImId_call(List<String> imIds, List<Integer> userIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imIds = imIds;
        this.userIds = userIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStudentsInfoByImId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStudentsInfoByImId_args args = new retrieveStudentsInfoByImId_args();
        args.setImIds(imIds);
        args.setUserIds(userIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Student> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStudentsInfoByImId();
      }
    }

    public void retrieveAllProvinces(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveAllProvinces_call method_call = new retrieveAllProvinces_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveAllProvinces_call extends org.apache.thrift.async.TAsyncMethodCall {
      public retrieveAllProvinces_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveAllProvinces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveAllProvinces_args args = new retrieveAllProvinces_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Province> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveAllProvinces();
      }
    }

    public void retrievePackagesByAccount(List<String> emails, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrievePackagesByAccount_call method_call = new retrievePackagesByAccount_call(emails, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrievePackagesByAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> emails;
      public retrievePackagesByAccount_call(List<String> emails, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emails = emails;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrievePackagesByAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrievePackagesByAccount_args args = new retrievePackagesByAccount_args();
        args.setEmails(emails);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BaseIdNameDto> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrievePackagesByAccount();
      }
    }

    public void judgeNPSAndComplainByUserId(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      judgeNPSAndComplainByUserId_call method_call = new judgeNPSAndComplainByUserId_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class judgeNPSAndComplainByUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public judgeNPSAndComplainByUserId_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("judgeNPSAndComplainByUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        judgeNPSAndComplainByUserId_args args = new judgeNPSAndComplainByUserId_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_judgeNPSAndComplainByUserId();
      }
    }

    public void judgeInstructorRelationWithUserId(int userId, int teacherId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      judgeInstructorRelationWithUserId_call method_call = new judgeInstructorRelationWithUserId_call(userId, teacherId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class judgeInstructorRelationWithUserId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int teacherId;
      public judgeInstructorRelationWithUserId_call(int userId, int teacherId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.teacherId = teacherId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("judgeInstructorRelationWithUserId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        judgeInstructorRelationWithUserId_args args = new judgeInstructorRelationWithUserId_args();
        args.setUserId(userId);
        args.setTeacherId(teacherId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_judgeInstructorRelationWithUserId();
      }
    }

    public void getUserInfoById(int userId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getUserInfoById_call method_call = new getUserInfoById_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInfoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getUserInfoById_call(int userId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInfoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInfoById_args args = new getUserInfoById_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StuOrderInfo getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInfoById();
      }
    }

    public void getEvaluateCountByStuIds(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getEvaluateCountByStuIds_call method_call = new getEvaluateCountByStuIds_call(stuIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEvaluateCountByStuIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> stuIds;
      public getEvaluateCountByStuIds_call(List<Integer> stuIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuIds = stuIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvaluateCountByStuIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEvaluateCountByStuIds_args args = new getEvaluateCountByStuIds_args();
        args.setStuIds(stuIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<StuEvaluateCount> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEvaluateCountByStuIds();
      }
    }

    public void getNPSCountByStuIds(List<Integer> stuIds, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getNPSCountByStuIds_call method_call = new getNPSCountByStuIds_call(stuIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNPSCountByStuIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> stuIds;
      public getNPSCountByStuIds_call(List<Integer> stuIds, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuIds = stuIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNPSCountByStuIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNPSCountByStuIds_args args = new getNPSCountByStuIds_args();
        args.setStuIds(stuIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<StuNPSCount> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNPSCountByStuIds();
      }
    }

    public void retrieveStuOrdServiceTeamByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceTeamByDetailId_call method_call = new retrieveStuOrdServiceTeamByDetailId_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceTeamByDetailId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public retrieveStuOrdServiceTeamByDetailId_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceTeamByDetailId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceTeamByDetailId_args args = new retrieveStuOrdServiceTeamByDetailId_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrdServiceTeam getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceTeamByDetailId();
      }
    }

    public void retrieveTeacherByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveTeacherByDetailId_call method_call = new retrieveTeacherByDetailId_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveTeacherByDetailId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public retrieveTeacherByDetailId_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveTeacherByDetailId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveTeacherByDetailId_args args = new retrieveTeacherByDetailId_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Teacher getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveTeacherByDetailId();
      }
    }

    public void retrieveStuOrdServiceTeamByStuMobileAndName(String mobile, String name, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveStuOrdServiceTeamByStuMobileAndName_call method_call = new retrieveStuOrdServiceTeamByStuMobileAndName_call(mobile, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mobile;
      private String name;
      public retrieveStuOrdServiceTeamByStuMobileAndName_call(String mobile, String name, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveStuOrdServiceTeamByStuMobileAndName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveStuOrdServiceTeamByStuMobileAndName_args args = new retrieveStuOrdServiceTeamByStuMobileAndName_args();
        args.setMobile(mobile);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrdServiceTeam> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveStuOrdServiceTeamByStuMobileAndName();
      }
    }

    public void getCurrentTermSubjectByStuId(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getCurrentTermSubjectByStuId_call method_call = new getCurrentTermSubjectByStuId_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentTermSubjectByStuId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getCurrentTermSubjectByStuId_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentTermSubjectByStuId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentTermSubjectByStuId_args args = new getCurrentTermSubjectByStuId_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OrdDetailTermSubject> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentTermSubjectByStuId();
      }
    }

    public void getAllTermSubjectByDetailId(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllTermSubjectByDetailId_call method_call = new getAllTermSubjectByDetailId_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTermSubjectByDetailId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public getAllTermSubjectByDetailId_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTermSubjectByDetailId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTermSubjectByDetailId_args args = new getAllTermSubjectByDetailId_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<termSubject> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllTermSubjectByDetailId();
      }
    }

    public void getStuIntelligentExerciseSubject(int stuId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getStuIntelligentExerciseSubject_call method_call = new getStuIntelligentExerciseSubject_call(stuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStuIntelligentExerciseSubject_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int stuId;
      public getStuIntelligentExerciseSubject_call(int stuId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stuId = stuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStuIntelligentExerciseSubject", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStuIntelligentExerciseSubject_args args = new getStuIntelligentExerciseSubject_args();
        args.setStuId(stuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IntelligentExerciseSubject getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStuIntelligentExerciseSubject();
      }
    }

    public void getSubjectHasKnowledgeTree(int detailId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getSubjectHasKnowledgeTree_call method_call = new getSubjectHasKnowledgeTree_call(detailId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubjectHasKnowledgeTree_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int detailId;
      public getSubjectHasKnowledgeTree_call(int detailId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.detailId = detailId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubjectHasKnowledgeTree", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubjectHasKnowledgeTree_args args = new getSubjectHasKnowledgeTree_args();
        args.setDetailId(detailId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SubjectKnowledgeTreeDTO getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubjectHasKnowledgeTree();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("isVip", new isVip());
      processMap.put("isInstructor", new isInstructor());
      processMap.put("retrieveStuOrdServiceDetail", new retrieveStuOrdServiceDetail());
      processMap.put("retrieveActualRole", new retrieveActualRole());
      processMap.put("saveStuApplyProvince", new saveStuApplyProvince());
      processMap.put("retrieveStuApplyProvince", new retrieveStuApplyProvince());
      processMap.put("retrieveStuByFuzzyNickname", new retrieveStuByFuzzyNickname());
      processMap.put("retrieveStuByMobile", new retrieveStuByMobile());
      processMap.put("retrieveStuIDByMobile", new retrieveStuIDByMobile());
      processMap.put("retrieveTeacherIDByEmail", new retrieveTeacherIDByEmail());
      processMap.put("getNERoundIds", new getNERoundIds());
      processMap.put("getRoundIdsByStuId", new getRoundIdsByStuId());
      processMap.put("getStudentsByBrokenMobile", new getStudentsByBrokenMobile());
      processMap.put("getOrdCountAndOffServiceOrdCount", new getOrdCountAndOffServiceOrdCount());
      processMap.put("retrieveStudentsListByAccount", new retrieveStudentsListByAccount());
      processMap.put("retrieveTeacherInfoByAccount", new retrieveTeacherInfoByAccount());
      processMap.put("judgeWaitForInsuranceByStudentId", new judgeWaitForInsuranceByStudentId());
      processMap.put("retrieveStudentsInfoByImId", new retrieveStudentsInfoByImId());
      processMap.put("retrieveAllProvinces", new retrieveAllProvinces());
      processMap.put("retrievePackagesByAccount", new retrievePackagesByAccount());
      processMap.put("judgeNPSAndComplainByUserId", new judgeNPSAndComplainByUserId());
      processMap.put("judgeInstructorRelationWithUserId", new judgeInstructorRelationWithUserId());
      processMap.put("getUserInfoById", new getUserInfoById());
      processMap.put("getEvaluateCountByStuIds", new getEvaluateCountByStuIds());
      processMap.put("getNPSCountByStuIds", new getNPSCountByStuIds());
      processMap.put("retrieveStuOrdServiceTeamByDetailId", new retrieveStuOrdServiceTeamByDetailId());
      processMap.put("retrieveTeacherByDetailId", new retrieveTeacherByDetailId());
      processMap.put("retrieveStuOrdServiceTeamByStuMobileAndName", new retrieveStuOrdServiceTeamByStuMobileAndName());
      processMap.put("getCurrentTermSubjectByStuId", new getCurrentTermSubjectByStuId());
      processMap.put("getAllTermSubjectByDetailId", new getAllTermSubjectByDetailId());
      processMap.put("getStuIntelligentExerciseSubject", new getStuIntelligentExerciseSubject());
      processMap.put("getSubjectHasKnowledgeTree", new getSubjectHasKnowledgeTree());
      return processMap;
    }

    public static class isVip<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isVip_args> {
      public isVip() {
        super("isVip");
      }

      public isVip_args getEmptyArgsInstance() {
        return new isVip_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isVip_result getResult(I iface, isVip_args args) throws TException {
        isVip_result result = new isVip_result();
        result.success = iface.isVip(args.stuIds);
        return result;
      }
    }

    public static class isInstructor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isInstructor_args> {
      public isInstructor() {
        super("isInstructor");
      }

      public isInstructor_args getEmptyArgsInstance() {
        return new isInstructor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isInstructor_result getResult(I iface, isInstructor_args args) throws TException {
        isInstructor_result result = new isInstructor_result();
        result.success = iface.isInstructor(args.username);
        return result;
      }
    }

    public static class retrieveStuOrdServiceDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceDetail_args> {
      public retrieveStuOrdServiceDetail() {
        super("retrieveStuOrdServiceDetail");
      }

      public retrieveStuOrdServiceDetail_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceDetail_result getResult(I iface, retrieveStuOrdServiceDetail_args args) throws TException {
        retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
        result.success = iface.retrieveStuOrdServiceDetail(args.stuId, args.ordStatus);
        return result;
      }
    }

    public static class retrieveActualRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveActualRole_args> {
      public retrieveActualRole() {
        super("retrieveActualRole");
      }

      public retrieveActualRole_args getEmptyArgsInstance() {
        return new retrieveActualRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveActualRole_result getResult(I iface, retrieveActualRole_args args) throws TException {
        retrieveActualRole_result result = new retrieveActualRole_result();
        result.success = iface.retrieveActualRole(args.stuId);
        return result;
      }
    }

    public static class saveStuApplyProvince<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveStuApplyProvince_args> {
      public saveStuApplyProvince() {
        super("saveStuApplyProvince");
      }

      public saveStuApplyProvince_args getEmptyArgsInstance() {
        return new saveStuApplyProvince_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveStuApplyProvince_result getResult(I iface, saveStuApplyProvince_args args) throws TException {
        saveStuApplyProvince_result result = new saveStuApplyProvince_result();
        iface.saveStuApplyProvince(args.stuId, args.provinceId);
        return result;
      }
    }

    public static class retrieveStuApplyProvince<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuApplyProvince_args> {
      public retrieveStuApplyProvince() {
        super("retrieveStuApplyProvince");
      }

      public retrieveStuApplyProvince_args getEmptyArgsInstance() {
        return new retrieveStuApplyProvince_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuApplyProvince_result getResult(I iface, retrieveStuApplyProvince_args args) throws TException {
        retrieveStuApplyProvince_result result = new retrieveStuApplyProvince_result();
        result.success = iface.retrieveStuApplyProvince(args.stuId);
        return result;
      }
    }

    public static class retrieveStuByFuzzyNickname<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuByFuzzyNickname_args> {
      public retrieveStuByFuzzyNickname() {
        super("retrieveStuByFuzzyNickname");
      }

      public retrieveStuByFuzzyNickname_args getEmptyArgsInstance() {
        return new retrieveStuByFuzzyNickname_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuByFuzzyNickname_result getResult(I iface, retrieveStuByFuzzyNickname_args args) throws TException {
        retrieveStuByFuzzyNickname_result result = new retrieveStuByFuzzyNickname_result();
        result.success = iface.retrieveStuByFuzzyNickname(args.nickname, args.limitSize);
        return result;
      }
    }

    public static class retrieveStuByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuByMobile_args> {
      public retrieveStuByMobile() {
        super("retrieveStuByMobile");
      }

      public retrieveStuByMobile_args getEmptyArgsInstance() {
        return new retrieveStuByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuByMobile_result getResult(I iface, retrieveStuByMobile_args args) throws TException {
        retrieveStuByMobile_result result = new retrieveStuByMobile_result();
        result.success = iface.retrieveStuByMobile(args.mobile);
        return result;
      }
    }

    public static class retrieveStuIDByMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuIDByMobile_args> {
      public retrieveStuIDByMobile() {
        super("retrieveStuIDByMobile");
      }

      public retrieveStuIDByMobile_args getEmptyArgsInstance() {
        return new retrieveStuIDByMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuIDByMobile_result getResult(I iface, retrieveStuIDByMobile_args args) throws TException {
        retrieveStuIDByMobile_result result = new retrieveStuIDByMobile_result();
        result.success = iface.retrieveStuIDByMobile(args.mobile);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class retrieveTeacherIDByEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveTeacherIDByEmail_args> {
      public retrieveTeacherIDByEmail() {
        super("retrieveTeacherIDByEmail");
      }

      public retrieveTeacherIDByEmail_args getEmptyArgsInstance() {
        return new retrieveTeacherIDByEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveTeacherIDByEmail_result getResult(I iface, retrieveTeacherIDByEmail_args args) throws TException {
        retrieveTeacherIDByEmail_result result = new retrieveTeacherIDByEmail_result();
        result.success = iface.retrieveTeacherIDByEmail(args.email);
        return result;
      }
    }

    public static class getNERoundIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNERoundIds_args> {
      public getNERoundIds() {
        super("getNERoundIds");
      }

      public getNERoundIds_args getEmptyArgsInstance() {
        return new getNERoundIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNERoundIds_result getResult(I iface, getNERoundIds_args args) throws TException {
        getNERoundIds_result result = new getNERoundIds_result();
        result.success = iface.getNERoundIds(args.roundIds);
        return result;
      }
    }

    public static class getRoundIdsByStuId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoundIdsByStuId_args> {
      public getRoundIdsByStuId() {
        super("getRoundIdsByStuId");
      }

      public getRoundIdsByStuId_args getEmptyArgsInstance() {
        return new getRoundIdsByStuId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoundIdsByStuId_result getResult(I iface, getRoundIdsByStuId_args args) throws TException {
        getRoundIdsByStuId_result result = new getRoundIdsByStuId_result();
        result.success = iface.getRoundIdsByStuId(args.stuId);
        return result;
      }
    }

    public static class getStudentsByBrokenMobile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStudentsByBrokenMobile_args> {
      public getStudentsByBrokenMobile() {
        super("getStudentsByBrokenMobile");
      }

      public getStudentsByBrokenMobile_args getEmptyArgsInstance() {
        return new getStudentsByBrokenMobile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStudentsByBrokenMobile_result getResult(I iface, getStudentsByBrokenMobile_args args) throws TException {
        getStudentsByBrokenMobile_result result = new getStudentsByBrokenMobile_result();
        result.success = iface.getStudentsByBrokenMobile(args.mobile);
        return result;
      }
    }

    public static class getOrdCountAndOffServiceOrdCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrdCountAndOffServiceOrdCount_args> {
      public getOrdCountAndOffServiceOrdCount() {
        super("getOrdCountAndOffServiceOrdCount");
      }

      public getOrdCountAndOffServiceOrdCount_args getEmptyArgsInstance() {
        return new getOrdCountAndOffServiceOrdCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrdCountAndOffServiceOrdCount_result getResult(I iface, getOrdCountAndOffServiceOrdCount_args args) throws TException {
        getOrdCountAndOffServiceOrdCount_result result = new getOrdCountAndOffServiceOrdCount_result();
        result.success = iface.getOrdCountAndOffServiceOrdCount(args.stuId);
        return result;
      }
    }

    public static class retrieveStudentsListByAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStudentsListByAccount_args> {
      public retrieveStudentsListByAccount() {
        super("retrieveStudentsListByAccount");
      }

      public retrieveStudentsListByAccount_args getEmptyArgsInstance() {
        return new retrieveStudentsListByAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStudentsListByAccount_result getResult(I iface, retrieveStudentsListByAccount_args args) throws TException {
        retrieveStudentsListByAccount_result result = new retrieveStudentsListByAccount_result();
        result.success = iface.retrieveStudentsListByAccount(args.email, args.searchContent, args.ordStatus, args.packageIds, args.provinceIds, args.startTime, args.endTime, args.startIndex, args.countPerPage);
        return result;
      }
    }

    public static class retrieveTeacherInfoByAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveTeacherInfoByAccount_args> {
      public retrieveTeacherInfoByAccount() {
        super("retrieveTeacherInfoByAccount");
      }

      public retrieveTeacherInfoByAccount_args getEmptyArgsInstance() {
        return new retrieveTeacherInfoByAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveTeacherInfoByAccount_result getResult(I iface, retrieveTeacherInfoByAccount_args args) throws TException {
        retrieveTeacherInfoByAccount_result result = new retrieveTeacherInfoByAccount_result();
        result.success = iface.retrieveTeacherInfoByAccount(args.email);
        return result;
      }
    }

    public static class judgeWaitForInsuranceByStudentId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, judgeWaitForInsuranceByStudentId_args> {
      public judgeWaitForInsuranceByStudentId() {
        super("judgeWaitForInsuranceByStudentId");
      }

      public judgeWaitForInsuranceByStudentId_args getEmptyArgsInstance() {
        return new judgeWaitForInsuranceByStudentId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public judgeWaitForInsuranceByStudentId_result getResult(I iface, judgeWaitForInsuranceByStudentId_args args) throws TException {
        judgeWaitForInsuranceByStudentId_result result = new judgeWaitForInsuranceByStudentId_result();
        result.success = iface.judgeWaitForInsuranceByStudentId(args.stuId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class retrieveStudentsInfoByImId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStudentsInfoByImId_args> {
      public retrieveStudentsInfoByImId() {
        super("retrieveStudentsInfoByImId");
      }

      public retrieveStudentsInfoByImId_args getEmptyArgsInstance() {
        return new retrieveStudentsInfoByImId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStudentsInfoByImId_result getResult(I iface, retrieveStudentsInfoByImId_args args) throws TException {
        retrieveStudentsInfoByImId_result result = new retrieveStudentsInfoByImId_result();
        result.success = iface.retrieveStudentsInfoByImId(args.imIds, args.userIds);
        return result;
      }
    }

    public static class retrieveAllProvinces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveAllProvinces_args> {
      public retrieveAllProvinces() {
        super("retrieveAllProvinces");
      }

      public retrieveAllProvinces_args getEmptyArgsInstance() {
        return new retrieveAllProvinces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveAllProvinces_result getResult(I iface, retrieveAllProvinces_args args) throws TException {
        retrieveAllProvinces_result result = new retrieveAllProvinces_result();
        result.success = iface.retrieveAllProvinces();
        return result;
      }
    }

    public static class retrievePackagesByAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrievePackagesByAccount_args> {
      public retrievePackagesByAccount() {
        super("retrievePackagesByAccount");
      }

      public retrievePackagesByAccount_args getEmptyArgsInstance() {
        return new retrievePackagesByAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrievePackagesByAccount_result getResult(I iface, retrievePackagesByAccount_args args) throws TException {
        retrievePackagesByAccount_result result = new retrievePackagesByAccount_result();
        result.success = iface.retrievePackagesByAccount(args.emails);
        return result;
      }
    }

    public static class judgeNPSAndComplainByUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, judgeNPSAndComplainByUserId_args> {
      public judgeNPSAndComplainByUserId() {
        super("judgeNPSAndComplainByUserId");
      }

      public judgeNPSAndComplainByUserId_args getEmptyArgsInstance() {
        return new judgeNPSAndComplainByUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public judgeNPSAndComplainByUserId_result getResult(I iface, judgeNPSAndComplainByUserId_args args) throws TException {
        judgeNPSAndComplainByUserId_result result = new judgeNPSAndComplainByUserId_result();
        result.success = iface.judgeNPSAndComplainByUserId(args.stuId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class judgeInstructorRelationWithUserId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, judgeInstructorRelationWithUserId_args> {
      public judgeInstructorRelationWithUserId() {
        super("judgeInstructorRelationWithUserId");
      }

      public judgeInstructorRelationWithUserId_args getEmptyArgsInstance() {
        return new judgeInstructorRelationWithUserId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public judgeInstructorRelationWithUserId_result getResult(I iface, judgeInstructorRelationWithUserId_args args) throws TException {
        judgeInstructorRelationWithUserId_result result = new judgeInstructorRelationWithUserId_result();
        result.success = iface.judgeInstructorRelationWithUserId(args.userId, args.teacherId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUserInfoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInfoById_args> {
      public getUserInfoById() {
        super("getUserInfoById");
      }

      public getUserInfoById_args getEmptyArgsInstance() {
        return new getUserInfoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInfoById_result getResult(I iface, getUserInfoById_args args) throws TException {
        getUserInfoById_result result = new getUserInfoById_result();
        result.success = iface.getUserInfoById(args.userId);
        return result;
      }
    }

    public static class getEvaluateCountByStuIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvaluateCountByStuIds_args> {
      public getEvaluateCountByStuIds() {
        super("getEvaluateCountByStuIds");
      }

      public getEvaluateCountByStuIds_args getEmptyArgsInstance() {
        return new getEvaluateCountByStuIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEvaluateCountByStuIds_result getResult(I iface, getEvaluateCountByStuIds_args args) throws TException {
        getEvaluateCountByStuIds_result result = new getEvaluateCountByStuIds_result();
        result.success = iface.getEvaluateCountByStuIds(args.stuIds);
        return result;
      }
    }

    public static class getNPSCountByStuIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNPSCountByStuIds_args> {
      public getNPSCountByStuIds() {
        super("getNPSCountByStuIds");
      }

      public getNPSCountByStuIds_args getEmptyArgsInstance() {
        return new getNPSCountByStuIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNPSCountByStuIds_result getResult(I iface, getNPSCountByStuIds_args args) throws TException {
        getNPSCountByStuIds_result result = new getNPSCountByStuIds_result();
        result.success = iface.getNPSCountByStuIds(args.stuIds);
        return result;
      }
    }

    public static class retrieveStuOrdServiceTeamByDetailId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceTeamByDetailId_args> {
      public retrieveStuOrdServiceTeamByDetailId() {
        super("retrieveStuOrdServiceTeamByDetailId");
      }

      public retrieveStuOrdServiceTeamByDetailId_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByDetailId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceTeamByDetailId_result getResult(I iface, retrieveStuOrdServiceTeamByDetailId_args args) throws TException {
        retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
        result.success = iface.retrieveStuOrdServiceTeamByDetailId(args.detailId);
        return result;
      }
    }

    public static class retrieveTeacherByDetailId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveTeacherByDetailId_args> {
      public retrieveTeacherByDetailId() {
        super("retrieveTeacherByDetailId");
      }

      public retrieveTeacherByDetailId_args getEmptyArgsInstance() {
        return new retrieveTeacherByDetailId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveTeacherByDetailId_result getResult(I iface, retrieveTeacherByDetailId_args args) throws TException {
        retrieveTeacherByDetailId_result result = new retrieveTeacherByDetailId_result();
        result.success = iface.retrieveTeacherByDetailId(args.detailId);
        return result;
      }
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveStuOrdServiceTeamByStuMobileAndName_args> {
      public retrieveStuOrdServiceTeamByStuMobileAndName() {
        super("retrieveStuOrdServiceTeamByStuMobileAndName");
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_result getResult(I iface, retrieveStuOrdServiceTeamByStuMobileAndName_args args) throws TException {
        retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
        result.success = iface.retrieveStuOrdServiceTeamByStuMobileAndName(args.mobile, args.name);
        return result;
      }
    }

    public static class getCurrentTermSubjectByStuId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentTermSubjectByStuId_args> {
      public getCurrentTermSubjectByStuId() {
        super("getCurrentTermSubjectByStuId");
      }

      public getCurrentTermSubjectByStuId_args getEmptyArgsInstance() {
        return new getCurrentTermSubjectByStuId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentTermSubjectByStuId_result getResult(I iface, getCurrentTermSubjectByStuId_args args) throws TException {
        getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
        result.success = iface.getCurrentTermSubjectByStuId(args.stuId);
        return result;
      }
    }

    public static class getAllTermSubjectByDetailId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTermSubjectByDetailId_args> {
      public getAllTermSubjectByDetailId() {
        super("getAllTermSubjectByDetailId");
      }

      public getAllTermSubjectByDetailId_args getEmptyArgsInstance() {
        return new getAllTermSubjectByDetailId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllTermSubjectByDetailId_result getResult(I iface, getAllTermSubjectByDetailId_args args) throws TException {
        getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
        result.success = iface.getAllTermSubjectByDetailId(args.detailId);
        return result;
      }
    }

    public static class getStuIntelligentExerciseSubject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStuIntelligentExerciseSubject_args> {
      public getStuIntelligentExerciseSubject() {
        super("getStuIntelligentExerciseSubject");
      }

      public getStuIntelligentExerciseSubject_args getEmptyArgsInstance() {
        return new getStuIntelligentExerciseSubject_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStuIntelligentExerciseSubject_result getResult(I iface, getStuIntelligentExerciseSubject_args args) throws TException {
        getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
        result.success = iface.getStuIntelligentExerciseSubject(args.stuId);
        return result;
      }
    }

    public static class getSubjectHasKnowledgeTree<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubjectHasKnowledgeTree_args> {
      public getSubjectHasKnowledgeTree() {
        super("getSubjectHasKnowledgeTree");
      }

      public getSubjectHasKnowledgeTree_args getEmptyArgsInstance() {
        return new getSubjectHasKnowledgeTree_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubjectHasKnowledgeTree_result getResult(I iface, getSubjectHasKnowledgeTree_args args) throws TException {
        getSubjectHasKnowledgeTree_result result = new getSubjectHasKnowledgeTree_result();
        result.success = iface.getSubjectHasKnowledgeTree(args.detailId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("isVip", new isVip());
      processMap.put("isInstructor", new isInstructor());
      processMap.put("retrieveStuOrdServiceDetail", new retrieveStuOrdServiceDetail());
      processMap.put("retrieveActualRole", new retrieveActualRole());
      processMap.put("saveStuApplyProvince", new saveStuApplyProvince());
      processMap.put("retrieveStuApplyProvince", new retrieveStuApplyProvince());
      processMap.put("retrieveStuByFuzzyNickname", new retrieveStuByFuzzyNickname());
      processMap.put("retrieveStuByMobile", new retrieveStuByMobile());
      processMap.put("retrieveStuIDByMobile", new retrieveStuIDByMobile());
      processMap.put("retrieveTeacherIDByEmail", new retrieveTeacherIDByEmail());
      processMap.put("getNERoundIds", new getNERoundIds());
      processMap.put("getRoundIdsByStuId", new getRoundIdsByStuId());
      processMap.put("getStudentsByBrokenMobile", new getStudentsByBrokenMobile());
      processMap.put("getOrdCountAndOffServiceOrdCount", new getOrdCountAndOffServiceOrdCount());
      processMap.put("retrieveStudentsListByAccount", new retrieveStudentsListByAccount());
      processMap.put("retrieveTeacherInfoByAccount", new retrieveTeacherInfoByAccount());
      processMap.put("judgeWaitForInsuranceByStudentId", new judgeWaitForInsuranceByStudentId());
      processMap.put("retrieveStudentsInfoByImId", new retrieveStudentsInfoByImId());
      processMap.put("retrieveAllProvinces", new retrieveAllProvinces());
      processMap.put("retrievePackagesByAccount", new retrievePackagesByAccount());
      processMap.put("judgeNPSAndComplainByUserId", new judgeNPSAndComplainByUserId());
      processMap.put("judgeInstructorRelationWithUserId", new judgeInstructorRelationWithUserId());
      processMap.put("getUserInfoById", new getUserInfoById());
      processMap.put("getEvaluateCountByStuIds", new getEvaluateCountByStuIds());
      processMap.put("getNPSCountByStuIds", new getNPSCountByStuIds());
      processMap.put("retrieveStuOrdServiceTeamByDetailId", new retrieveStuOrdServiceTeamByDetailId());
      processMap.put("retrieveTeacherByDetailId", new retrieveTeacherByDetailId());
      processMap.put("retrieveStuOrdServiceTeamByStuMobileAndName", new retrieveStuOrdServiceTeamByStuMobileAndName());
      processMap.put("getCurrentTermSubjectByStuId", new getCurrentTermSubjectByStuId());
      processMap.put("getAllTermSubjectByDetailId", new getAllTermSubjectByDetailId());
      processMap.put("getStuIntelligentExerciseSubject", new getStuIntelligentExerciseSubject());
      processMap.put("getSubjectHasKnowledgeTree", new getSubjectHasKnowledgeTree());
      return processMap;
    }

    public static class isVip<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isVip_args, Map<Integer,Short>> {
      public isVip() {
        super("isVip");
      }

      public isVip_args getEmptyArgsInstance() {
        return new isVip_args();
      }

      public AsyncMethodCallback<Map<Integer,Short>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Short>>() { 
          public void onComplete(Map<Integer,Short> o) {
            isVip_result result = new isVip_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isVip_result result = new isVip_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isVip_args args, AsyncMethodCallback<Map<Integer,Short>> resultHandler) throws TException {
        iface.isVip(args.stuIds,resultHandler);
      }
    }

    public static class isInstructor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isInstructor_args, Map<String,String>> {
      public isInstructor() {
        super("isInstructor");
      }

      public isInstructor_args getEmptyArgsInstance() {
        return new isInstructor_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            isInstructor_result result = new isInstructor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isInstructor_result result = new isInstructor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isInstructor_args args, AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.isInstructor(args.username,resultHandler);
      }
    }

    public static class retrieveStuOrdServiceDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceDetail_args, StuOrdServiceDetail> {
      public retrieveStuOrdServiceDetail() {
        super("retrieveStuOrdServiceDetail");
      }

      public retrieveStuOrdServiceDetail_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceDetail_args();
      }

      public AsyncMethodCallback<StuOrdServiceDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StuOrdServiceDetail>() { 
          public void onComplete(StuOrdServiceDetail o) {
            retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceDetail_result result = new retrieveStuOrdServiceDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceDetail_args args, AsyncMethodCallback<StuOrdServiceDetail> resultHandler) throws TException {
        iface.retrieveStuOrdServiceDetail(args.stuId, args.ordStatus,resultHandler);
      }
    }

    public static class retrieveActualRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveActualRole_args, Role> {
      public retrieveActualRole() {
        super("retrieveActualRole");
      }

      public retrieveActualRole_args getEmptyArgsInstance() {
        return new retrieveActualRole_args();
      }

      public AsyncMethodCallback<Role> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Role>() { 
          public void onComplete(Role o) {
            retrieveActualRole_result result = new retrieveActualRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveActualRole_result result = new retrieveActualRole_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveActualRole_args args, AsyncMethodCallback<Role> resultHandler) throws TException {
        iface.retrieveActualRole(args.stuId,resultHandler);
      }
    }

    public static class saveStuApplyProvince<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveStuApplyProvince_args, Void> {
      public saveStuApplyProvince() {
        super("saveStuApplyProvince");
      }

      public saveStuApplyProvince_args getEmptyArgsInstance() {
        return new saveStuApplyProvince_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveStuApplyProvince_result result = new saveStuApplyProvince_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveStuApplyProvince_result result = new saveStuApplyProvince_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveStuApplyProvince_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveStuApplyProvince(args.stuId, args.provinceId,resultHandler);
      }
    }

    public static class retrieveStuApplyProvince<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuApplyProvince_args, Province> {
      public retrieveStuApplyProvince() {
        super("retrieveStuApplyProvince");
      }

      public retrieveStuApplyProvince_args getEmptyArgsInstance() {
        return new retrieveStuApplyProvince_args();
      }

      public AsyncMethodCallback<Province> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Province>() { 
          public void onComplete(Province o) {
            retrieveStuApplyProvince_result result = new retrieveStuApplyProvince_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuApplyProvince_result result = new retrieveStuApplyProvince_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuApplyProvince_args args, AsyncMethodCallback<Province> resultHandler) throws TException {
        iface.retrieveStuApplyProvince(args.stuId,resultHandler);
      }
    }

    public static class retrieveStuByFuzzyNickname<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuByFuzzyNickname_args, List<Student>> {
      public retrieveStuByFuzzyNickname() {
        super("retrieveStuByFuzzyNickname");
      }

      public retrieveStuByFuzzyNickname_args getEmptyArgsInstance() {
        return new retrieveStuByFuzzyNickname_args();
      }

      public AsyncMethodCallback<List<Student>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Student>>() { 
          public void onComplete(List<Student> o) {
            retrieveStuByFuzzyNickname_result result = new retrieveStuByFuzzyNickname_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuByFuzzyNickname_result result = new retrieveStuByFuzzyNickname_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuByFuzzyNickname_args args, AsyncMethodCallback<List<Student>> resultHandler) throws TException {
        iface.retrieveStuByFuzzyNickname(args.nickname, args.limitSize,resultHandler);
      }
    }

    public static class retrieveStuByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuByMobile_args, Student> {
      public retrieveStuByMobile() {
        super("retrieveStuByMobile");
      }

      public retrieveStuByMobile_args getEmptyArgsInstance() {
        return new retrieveStuByMobile_args();
      }

      public AsyncMethodCallback<Student> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Student>() { 
          public void onComplete(Student o) {
            retrieveStuByMobile_result result = new retrieveStuByMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuByMobile_result result = new retrieveStuByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuByMobile_args args, AsyncMethodCallback<Student> resultHandler) throws TException {
        iface.retrieveStuByMobile(args.mobile,resultHandler);
      }
    }

    public static class retrieveStuIDByMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuIDByMobile_args, Integer> {
      public retrieveStuIDByMobile() {
        super("retrieveStuIDByMobile");
      }

      public retrieveStuIDByMobile_args getEmptyArgsInstance() {
        return new retrieveStuIDByMobile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            retrieveStuIDByMobile_result result = new retrieveStuIDByMobile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuIDByMobile_result result = new retrieveStuIDByMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuIDByMobile_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.retrieveStuIDByMobile(args.mobile,resultHandler);
      }
    }

    public static class retrieveTeacherIDByEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveTeacherIDByEmail_args, Map<String,String>> {
      public retrieveTeacherIDByEmail() {
        super("retrieveTeacherIDByEmail");
      }

      public retrieveTeacherIDByEmail_args getEmptyArgsInstance() {
        return new retrieveTeacherIDByEmail_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            retrieveTeacherIDByEmail_result result = new retrieveTeacherIDByEmail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveTeacherIDByEmail_result result = new retrieveTeacherIDByEmail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveTeacherIDByEmail_args args, AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.retrieveTeacherIDByEmail(args.email,resultHandler);
      }
    }

    public static class getNERoundIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNERoundIds_args, List<Integer>> {
      public getNERoundIds() {
        super("getNERoundIds");
      }

      public getNERoundIds_args getEmptyArgsInstance() {
        return new getNERoundIds_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getNERoundIds_result result = new getNERoundIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNERoundIds_result result = new getNERoundIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNERoundIds_args args, AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getNERoundIds(args.roundIds,resultHandler);
      }
    }

    public static class getRoundIdsByStuId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoundIdsByStuId_args, List<StuRound>> {
      public getRoundIdsByStuId() {
        super("getRoundIdsByStuId");
      }

      public getRoundIdsByStuId_args getEmptyArgsInstance() {
        return new getRoundIdsByStuId_args();
      }

      public AsyncMethodCallback<List<StuRound>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<StuRound>>() { 
          public void onComplete(List<StuRound> o) {
            getRoundIdsByStuId_result result = new getRoundIdsByStuId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoundIdsByStuId_result result = new getRoundIdsByStuId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoundIdsByStuId_args args, AsyncMethodCallback<List<StuRound>> resultHandler) throws TException {
        iface.getRoundIdsByStuId(args.stuId,resultHandler);
      }
    }

    public static class getStudentsByBrokenMobile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStudentsByBrokenMobile_args, List<Integer>> {
      public getStudentsByBrokenMobile() {
        super("getStudentsByBrokenMobile");
      }

      public getStudentsByBrokenMobile_args getEmptyArgsInstance() {
        return new getStudentsByBrokenMobile_args();
      }

      public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Integer>>() { 
          public void onComplete(List<Integer> o) {
            getStudentsByBrokenMobile_result result = new getStudentsByBrokenMobile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStudentsByBrokenMobile_result result = new getStudentsByBrokenMobile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStudentsByBrokenMobile_args args, AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
        iface.getStudentsByBrokenMobile(args.mobile,resultHandler);
      }
    }

    public static class getOrdCountAndOffServiceOrdCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrdCountAndOffServiceOrdCount_args, Map<String,Integer>> {
      public getOrdCountAndOffServiceOrdCount() {
        super("getOrdCountAndOffServiceOrdCount");
      }

      public getOrdCountAndOffServiceOrdCount_args getEmptyArgsInstance() {
        return new getOrdCountAndOffServiceOrdCount_args();
      }

      public AsyncMethodCallback<Map<String,Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Integer>>() { 
          public void onComplete(Map<String,Integer> o) {
            getOrdCountAndOffServiceOrdCount_result result = new getOrdCountAndOffServiceOrdCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrdCountAndOffServiceOrdCount_result result = new getOrdCountAndOffServiceOrdCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrdCountAndOffServiceOrdCount_args args, AsyncMethodCallback<Map<String,Integer>> resultHandler) throws TException {
        iface.getOrdCountAndOffServiceOrdCount(args.stuId,resultHandler);
      }
    }

    public static class retrieveStudentsListByAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStudentsListByAccount_args, TeacherServiceStudentResult> {
      public retrieveStudentsListByAccount() {
        super("retrieveStudentsListByAccount");
      }

      public retrieveStudentsListByAccount_args getEmptyArgsInstance() {
        return new retrieveStudentsListByAccount_args();
      }

      public AsyncMethodCallback<TeacherServiceStudentResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TeacherServiceStudentResult>() { 
          public void onComplete(TeacherServiceStudentResult o) {
            retrieveStudentsListByAccount_result result = new retrieveStudentsListByAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStudentsListByAccount_result result = new retrieveStudentsListByAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStudentsListByAccount_args args, AsyncMethodCallback<TeacherServiceStudentResult> resultHandler) throws TException {
        iface.retrieveStudentsListByAccount(args.email, args.searchContent, args.ordStatus, args.packageIds, args.provinceIds, args.startTime, args.endTime, args.startIndex, args.countPerPage,resultHandler);
      }
    }

    public static class retrieveTeacherInfoByAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveTeacherInfoByAccount_args, List<TeacherInfo>> {
      public retrieveTeacherInfoByAccount() {
        super("retrieveTeacherInfoByAccount");
      }

      public retrieveTeacherInfoByAccount_args getEmptyArgsInstance() {
        return new retrieveTeacherInfoByAccount_args();
      }

      public AsyncMethodCallback<List<TeacherInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TeacherInfo>>() { 
          public void onComplete(List<TeacherInfo> o) {
            retrieveTeacherInfoByAccount_result result = new retrieveTeacherInfoByAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveTeacherInfoByAccount_result result = new retrieveTeacherInfoByAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveTeacherInfoByAccount_args args, AsyncMethodCallback<List<TeacherInfo>> resultHandler) throws TException {
        iface.retrieveTeacherInfoByAccount(args.email,resultHandler);
      }
    }

    public static class judgeWaitForInsuranceByStudentId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, judgeWaitForInsuranceByStudentId_args, Integer> {
      public judgeWaitForInsuranceByStudentId() {
        super("judgeWaitForInsuranceByStudentId");
      }

      public judgeWaitForInsuranceByStudentId_args getEmptyArgsInstance() {
        return new judgeWaitForInsuranceByStudentId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            judgeWaitForInsuranceByStudentId_result result = new judgeWaitForInsuranceByStudentId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            judgeWaitForInsuranceByStudentId_result result = new judgeWaitForInsuranceByStudentId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, judgeWaitForInsuranceByStudentId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.judgeWaitForInsuranceByStudentId(args.stuId,resultHandler);
      }
    }

    public static class retrieveStudentsInfoByImId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStudentsInfoByImId_args, List<Student>> {
      public retrieveStudentsInfoByImId() {
        super("retrieveStudentsInfoByImId");
      }

      public retrieveStudentsInfoByImId_args getEmptyArgsInstance() {
        return new retrieveStudentsInfoByImId_args();
      }

      public AsyncMethodCallback<List<Student>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Student>>() { 
          public void onComplete(List<Student> o) {
            retrieveStudentsInfoByImId_result result = new retrieveStudentsInfoByImId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStudentsInfoByImId_result result = new retrieveStudentsInfoByImId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStudentsInfoByImId_args args, AsyncMethodCallback<List<Student>> resultHandler) throws TException {
        iface.retrieveStudentsInfoByImId(args.imIds, args.userIds,resultHandler);
      }
    }

    public static class retrieveAllProvinces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveAllProvinces_args, List<Province>> {
      public retrieveAllProvinces() {
        super("retrieveAllProvinces");
      }

      public retrieveAllProvinces_args getEmptyArgsInstance() {
        return new retrieveAllProvinces_args();
      }

      public AsyncMethodCallback<List<Province>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Province>>() { 
          public void onComplete(List<Province> o) {
            retrieveAllProvinces_result result = new retrieveAllProvinces_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveAllProvinces_result result = new retrieveAllProvinces_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveAllProvinces_args args, AsyncMethodCallback<List<Province>> resultHandler) throws TException {
        iface.retrieveAllProvinces(resultHandler);
      }
    }

    public static class retrievePackagesByAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrievePackagesByAccount_args, List<BaseIdNameDto>> {
      public retrievePackagesByAccount() {
        super("retrievePackagesByAccount");
      }

      public retrievePackagesByAccount_args getEmptyArgsInstance() {
        return new retrievePackagesByAccount_args();
      }

      public AsyncMethodCallback<List<BaseIdNameDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BaseIdNameDto>>() { 
          public void onComplete(List<BaseIdNameDto> o) {
            retrievePackagesByAccount_result result = new retrievePackagesByAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrievePackagesByAccount_result result = new retrievePackagesByAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrievePackagesByAccount_args args, AsyncMethodCallback<List<BaseIdNameDto>> resultHandler) throws TException {
        iface.retrievePackagesByAccount(args.emails,resultHandler);
      }
    }

    public static class judgeNPSAndComplainByUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, judgeNPSAndComplainByUserId_args, Integer> {
      public judgeNPSAndComplainByUserId() {
        super("judgeNPSAndComplainByUserId");
      }

      public judgeNPSAndComplainByUserId_args getEmptyArgsInstance() {
        return new judgeNPSAndComplainByUserId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            judgeNPSAndComplainByUserId_result result = new judgeNPSAndComplainByUserId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            judgeNPSAndComplainByUserId_result result = new judgeNPSAndComplainByUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, judgeNPSAndComplainByUserId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.judgeNPSAndComplainByUserId(args.stuId,resultHandler);
      }
    }

    public static class judgeInstructorRelationWithUserId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, judgeInstructorRelationWithUserId_args, Integer> {
      public judgeInstructorRelationWithUserId() {
        super("judgeInstructorRelationWithUserId");
      }

      public judgeInstructorRelationWithUserId_args getEmptyArgsInstance() {
        return new judgeInstructorRelationWithUserId_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            judgeInstructorRelationWithUserId_result result = new judgeInstructorRelationWithUserId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            judgeInstructorRelationWithUserId_result result = new judgeInstructorRelationWithUserId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, judgeInstructorRelationWithUserId_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.judgeInstructorRelationWithUserId(args.userId, args.teacherId,resultHandler);
      }
    }

    public static class getUserInfoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInfoById_args, StuOrderInfo> {
      public getUserInfoById() {
        super("getUserInfoById");
      }

      public getUserInfoById_args getEmptyArgsInstance() {
        return new getUserInfoById_args();
      }

      public AsyncMethodCallback<StuOrderInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StuOrderInfo>() { 
          public void onComplete(StuOrderInfo o) {
            getUserInfoById_result result = new getUserInfoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserInfoById_result result = new getUserInfoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInfoById_args args, AsyncMethodCallback<StuOrderInfo> resultHandler) throws TException {
        iface.getUserInfoById(args.userId,resultHandler);
      }
    }

    public static class getEvaluateCountByStuIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEvaluateCountByStuIds_args, List<StuEvaluateCount>> {
      public getEvaluateCountByStuIds() {
        super("getEvaluateCountByStuIds");
      }

      public getEvaluateCountByStuIds_args getEmptyArgsInstance() {
        return new getEvaluateCountByStuIds_args();
      }

      public AsyncMethodCallback<List<StuEvaluateCount>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<StuEvaluateCount>>() { 
          public void onComplete(List<StuEvaluateCount> o) {
            getEvaluateCountByStuIds_result result = new getEvaluateCountByStuIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEvaluateCountByStuIds_result result = new getEvaluateCountByStuIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEvaluateCountByStuIds_args args, AsyncMethodCallback<List<StuEvaluateCount>> resultHandler) throws TException {
        iface.getEvaluateCountByStuIds(args.stuIds,resultHandler);
      }
    }

    public static class getNPSCountByStuIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNPSCountByStuIds_args, List<StuNPSCount>> {
      public getNPSCountByStuIds() {
        super("getNPSCountByStuIds");
      }

      public getNPSCountByStuIds_args getEmptyArgsInstance() {
        return new getNPSCountByStuIds_args();
      }

      public AsyncMethodCallback<List<StuNPSCount>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<StuNPSCount>>() { 
          public void onComplete(List<StuNPSCount> o) {
            getNPSCountByStuIds_result result = new getNPSCountByStuIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNPSCountByStuIds_result result = new getNPSCountByStuIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNPSCountByStuIds_args args, AsyncMethodCallback<List<StuNPSCount>> resultHandler) throws TException {
        iface.getNPSCountByStuIds(args.stuIds,resultHandler);
      }
    }

    public static class retrieveStuOrdServiceTeamByDetailId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceTeamByDetailId_args, OrdServiceTeam> {
      public retrieveStuOrdServiceTeamByDetailId() {
        super("retrieveStuOrdServiceTeamByDetailId");
      }

      public retrieveStuOrdServiceTeamByDetailId_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByDetailId_args();
      }

      public AsyncMethodCallback<OrdServiceTeam> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrdServiceTeam>() { 
          public void onComplete(OrdServiceTeam o) {
            retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceTeamByDetailId_result result = new retrieveStuOrdServiceTeamByDetailId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceTeamByDetailId_args args, AsyncMethodCallback<OrdServiceTeam> resultHandler) throws TException {
        iface.retrieveStuOrdServiceTeamByDetailId(args.detailId,resultHandler);
      }
    }

    public static class retrieveTeacherByDetailId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveTeacherByDetailId_args, Teacher> {
      public retrieveTeacherByDetailId() {
        super("retrieveTeacherByDetailId");
      }

      public retrieveTeacherByDetailId_args getEmptyArgsInstance() {
        return new retrieveTeacherByDetailId_args();
      }

      public AsyncMethodCallback<Teacher> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Teacher>() { 
          public void onComplete(Teacher o) {
            retrieveTeacherByDetailId_result result = new retrieveTeacherByDetailId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveTeacherByDetailId_result result = new retrieveTeacherByDetailId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveTeacherByDetailId_args args, AsyncMethodCallback<Teacher> resultHandler) throws TException {
        iface.retrieveTeacherByDetailId(args.detailId,resultHandler);
      }
    }

    public static class retrieveStuOrdServiceTeamByStuMobileAndName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveStuOrdServiceTeamByStuMobileAndName_args, List<OrdServiceTeam>> {
      public retrieveStuOrdServiceTeamByStuMobileAndName() {
        super("retrieveStuOrdServiceTeamByStuMobileAndName");
      }

      public retrieveStuOrdServiceTeamByStuMobileAndName_args getEmptyArgsInstance() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_args();
      }

      public AsyncMethodCallback<List<OrdServiceTeam>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrdServiceTeam>>() { 
          public void onComplete(List<OrdServiceTeam> o) {
            retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveStuOrdServiceTeamByStuMobileAndName_result result = new retrieveStuOrdServiceTeamByStuMobileAndName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveStuOrdServiceTeamByStuMobileAndName_args args, AsyncMethodCallback<List<OrdServiceTeam>> resultHandler) throws TException {
        iface.retrieveStuOrdServiceTeamByStuMobileAndName(args.mobile, args.name,resultHandler);
      }
    }

    public static class getCurrentTermSubjectByStuId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentTermSubjectByStuId_args, List<OrdDetailTermSubject>> {
      public getCurrentTermSubjectByStuId() {
        super("getCurrentTermSubjectByStuId");
      }

      public getCurrentTermSubjectByStuId_args getEmptyArgsInstance() {
        return new getCurrentTermSubjectByStuId_args();
      }

      public AsyncMethodCallback<List<OrdDetailTermSubject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OrdDetailTermSubject>>() { 
          public void onComplete(List<OrdDetailTermSubject> o) {
            getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentTermSubjectByStuId_result result = new getCurrentTermSubjectByStuId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentTermSubjectByStuId_args args, AsyncMethodCallback<List<OrdDetailTermSubject>> resultHandler) throws TException {
        iface.getCurrentTermSubjectByStuId(args.stuId,resultHandler);
      }
    }

    public static class getAllTermSubjectByDetailId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTermSubjectByDetailId_args, List<termSubject>> {
      public getAllTermSubjectByDetailId() {
        super("getAllTermSubjectByDetailId");
      }

      public getAllTermSubjectByDetailId_args getEmptyArgsInstance() {
        return new getAllTermSubjectByDetailId_args();
      }

      public AsyncMethodCallback<List<termSubject>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<termSubject>>() { 
          public void onComplete(List<termSubject> o) {
            getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllTermSubjectByDetailId_result result = new getAllTermSubjectByDetailId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllTermSubjectByDetailId_args args, AsyncMethodCallback<List<termSubject>> resultHandler) throws TException {
        iface.getAllTermSubjectByDetailId(args.detailId,resultHandler);
      }
    }

    public static class getStuIntelligentExerciseSubject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStuIntelligentExerciseSubject_args, IntelligentExerciseSubject> {
      public getStuIntelligentExerciseSubject() {
        super("getStuIntelligentExerciseSubject");
      }

      public getStuIntelligentExerciseSubject_args getEmptyArgsInstance() {
        return new getStuIntelligentExerciseSubject_args();
      }

      public AsyncMethodCallback<IntelligentExerciseSubject> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IntelligentExerciseSubject>() { 
          public void onComplete(IntelligentExerciseSubject o) {
            getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStuIntelligentExerciseSubject_result result = new getStuIntelligentExerciseSubject_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStuIntelligentExerciseSubject_args args, AsyncMethodCallback<IntelligentExerciseSubject> resultHandler) throws TException {
        iface.getStuIntelligentExerciseSubject(args.stuId,resultHandler);
      }
    }

    public static class getSubjectHasKnowledgeTree<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubjectHasKnowledgeTree_args, SubjectKnowledgeTreeDTO> {
      public getSubjectHasKnowledgeTree() {
        super("getSubjectHasKnowledgeTree");
      }

      public getSubjectHasKnowledgeTree_args getEmptyArgsInstance() {
        return new getSubjectHasKnowledgeTree_args();
      }

      public AsyncMethodCallback<SubjectKnowledgeTreeDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SubjectKnowledgeTreeDTO>() { 
          public void onComplete(SubjectKnowledgeTreeDTO o) {
            getSubjectHasKnowledgeTree_result result = new getSubjectHasKnowledgeTree_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubjectHasKnowledgeTree_result result = new getSubjectHasKnowledgeTree_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubjectHasKnowledgeTree_args args, AsyncMethodCallback<SubjectKnowledgeTreeDTO> resultHandler) throws TException {
        iface.getSubjectHasKnowledgeTree(args.detailId,resultHandler);
      }
    }

  }

  public static class isVip_args implements org.apache.thrift.TBase<isVip_args, isVip_args._Fields>, java.io.Serializable, Cloneable, Comparable<isVip_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isVip_args");

    private static final org.apache.thrift.protocol.TField STU_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stuIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isVip_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isVip_argsTupleSchemeFactory());
    }

    public List<Integer> stuIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_IDS((short)1, "stuIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_IDS
            return STU_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_IDS, new org.apache.thrift.meta_data.FieldMetaData("stuIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isVip_args.class, metaDataMap);
    }

    public isVip_args() {
    }

    public isVip_args(
      List<Integer> stuIds)
    {
      this();
      this.stuIds = stuIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isVip_args(isVip_args other) {
      if (other.isSetStuIds()) {
        List<Integer> __this__stuIds = new ArrayList<Integer>(other.stuIds);
        this.stuIds = __this__stuIds;
      }
    }

    public isVip_args deepCopy() {
      return new isVip_args(this);
    }

    @Override
    public void clear() {
      this.stuIds = null;
    }

    public int getStuIdsSize() {
      return (this.stuIds == null) ? 0 : this.stuIds.size();
    }

    public java.util.Iterator<Integer> getStuIdsIterator() {
      return (this.stuIds == null) ? null : this.stuIds.iterator();
    }

    public void addToStuIds(int elem) {
      if (this.stuIds == null) {
        this.stuIds = new ArrayList<Integer>();
      }
      this.stuIds.add(elem);
    }

    public List<Integer> getStuIds() {
      return this.stuIds;
    }

    public isVip_args setStuIds(List<Integer> stuIds) {
      this.stuIds = stuIds;
      return this;
    }

    public void unsetStuIds() {
      this.stuIds = null;
    }

    /** Returns true if field stuIds is set (has been assigned a value) and false otherwise */
    public boolean isSetStuIds() {
      return this.stuIds != null;
    }

    public void setStuIdsIsSet(boolean value) {
      if (!value) {
        this.stuIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_IDS:
        if (value == null) {
          unsetStuIds();
        } else {
          setStuIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_IDS:
        return getStuIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_IDS:
        return isSetStuIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isVip_args)
        return this.equals((isVip_args)that);
      return false;
    }

    public boolean equals(isVip_args that) {
      if (that == null)
        return false;

      boolean this_present_stuIds = true && this.isSetStuIds();
      boolean that_present_stuIds = true && that.isSetStuIds();
      if (this_present_stuIds || that_present_stuIds) {
        if (!(this_present_stuIds && that_present_stuIds))
          return false;
        if (!this.stuIds.equals(that.stuIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuIds = true && (isSetStuIds());
      list.add(present_stuIds);
      if (present_stuIds)
        list.add(stuIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(isVip_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuIds()).compareTo(other.isSetStuIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuIds, other.stuIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isVip_args(");
      boolean first = true;

      sb.append("stuIds:");
      if (this.stuIds == null) {
        sb.append("null");
      } else {
        sb.append(this.stuIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isVip_argsStandardSchemeFactory implements SchemeFactory {
      public isVip_argsStandardScheme getScheme() {
        return new isVip_argsStandardScheme();
      }
    }

    private static class isVip_argsStandardScheme extends StandardScheme<isVip_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isVip_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.stuIds = new ArrayList<Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.stuIds.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setStuIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isVip_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stuIds != null) {
          oprot.writeFieldBegin(STU_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.stuIds.size()));
            for (int _iter59 : struct.stuIds)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isVip_argsTupleSchemeFactory implements SchemeFactory {
      public isVip_argsTupleScheme getScheme() {
        return new isVip_argsTupleScheme();
      }
    }

    private static class isVip_argsTupleScheme extends TupleScheme<isVip_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isVip_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuIds()) {
          {
            oprot.writeI32(struct.stuIds.size());
            for (int _iter60 : struct.stuIds)
            {
              oprot.writeI32(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isVip_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.stuIds = new ArrayList<Integer>(_list61.size);
            int _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readI32();
              struct.stuIds.add(_elem62);
            }
          }
          struct.setStuIdsIsSet(true);
        }
      }
    }

  }

  public static class isVip_result implements org.apache.thrift.TBase<isVip_result, isVip_result._Fields>, java.io.Serializable, Cloneable, Comparable<isVip_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isVip_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isVip_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isVip_resultTupleSchemeFactory());
    }

    public Map<Integer,Short> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isVip_result.class, metaDataMap);
    }

    public isVip_result() {
    }

    public isVip_result(
      Map<Integer,Short> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isVip_result(isVip_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Short> __this__success = new HashMap<Integer,Short>(other.success);
        this.success = __this__success;
      }
    }

    public isVip_result deepCopy() {
      return new isVip_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, short val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Short>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Short> getSuccess() {
      return this.success;
    }

    public isVip_result setSuccess(Map<Integer,Short> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Short>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isVip_result)
        return this.equals((isVip_result)that);
      return false;
    }

    public boolean equals(isVip_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isVip_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isVip_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isVip_resultStandardSchemeFactory implements SchemeFactory {
      public isVip_resultStandardScheme getScheme() {
        return new isVip_resultStandardScheme();
      }
    }

    private static class isVip_resultStandardScheme extends StandardScheme<isVip_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isVip_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Short>(2*_map64.size);
                  int _key65;
                  short _val66;
                  for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                  {
                    _key65 = iprot.readI32();
                    _val66 = iprot.readI16();
                    struct.success.put(_key65, _val66);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isVip_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, struct.success.size()));
            for (Map.Entry<Integer, Short> _iter68 : struct.success.entrySet())
            {
              oprot.writeI32(_iter68.getKey());
              oprot.writeI16(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isVip_resultTupleSchemeFactory implements SchemeFactory {
      public isVip_resultTupleScheme getScheme() {
        return new isVip_resultTupleScheme();
      }
    }

    private static class isVip_resultTupleScheme extends TupleScheme<isVip_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isVip_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Short> _iter69 : struct.success.entrySet())
            {
              oprot.writeI32(_iter69.getKey());
              oprot.writeI16(_iter69.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isVip_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, iprot.readI32());
            struct.success = new HashMap<Integer,Short>(2*_map70.size);
            int _key71;
            short _val72;
            for (int _i73 = 0; _i73 < _map70.size; ++_i73)
            {
              _key71 = iprot.readI32();
              _val72 = iprot.readI16();
              struct.success.put(_key71, _val72);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isInstructor_args implements org.apache.thrift.TBase<isInstructor_args, isInstructor_args._Fields>, java.io.Serializable, Cloneable, Comparable<isInstructor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInstructor_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInstructor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInstructor_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInstructor_args.class, metaDataMap);
    }

    public isInstructor_args() {
    }

    public isInstructor_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInstructor_args(isInstructor_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public isInstructor_args deepCopy() {
      return new isInstructor_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public isInstructor_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInstructor_args)
        return this.equals((isInstructor_args)that);
      return false;
    }

    public boolean equals(isInstructor_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(isInstructor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInstructor_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInstructor_argsStandardSchemeFactory implements SchemeFactory {
      public isInstructor_argsStandardScheme getScheme() {
        return new isInstructor_argsStandardScheme();
      }
    }

    private static class isInstructor_argsStandardScheme extends StandardScheme<isInstructor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInstructor_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInstructor_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInstructor_argsTupleSchemeFactory implements SchemeFactory {
      public isInstructor_argsTupleScheme getScheme() {
        return new isInstructor_argsTupleScheme();
      }
    }

    private static class isInstructor_argsTupleScheme extends TupleScheme<isInstructor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInstructor_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInstructor_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
      }
    }

  }

  public static class isInstructor_result implements org.apache.thrift.TBase<isInstructor_result, isInstructor_result._Fields>, java.io.Serializable, Cloneable, Comparable<isInstructor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInstructor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInstructor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInstructor_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInstructor_result.class, metaDataMap);
    }

    public isInstructor_result() {
    }

    public isInstructor_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInstructor_result(isInstructor_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public isInstructor_result deepCopy() {
      return new isInstructor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public isInstructor_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInstructor_result)
        return this.equals((isInstructor_result)that);
      return false;
    }

    public boolean equals(isInstructor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isInstructor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInstructor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInstructor_resultStandardSchemeFactory implements SchemeFactory {
      public isInstructor_resultStandardScheme getScheme() {
        return new isInstructor_resultStandardScheme();
      }
    }

    private static class isInstructor_resultStandardScheme extends StandardScheme<isInstructor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInstructor_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map74.size);
                  String _key75;
                  String _val76;
                  for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                  {
                    _key75 = iprot.readString();
                    _val76 = iprot.readString();
                    struct.success.put(_key75, _val76);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInstructor_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter78 : struct.success.entrySet())
            {
              oprot.writeString(_iter78.getKey());
              oprot.writeString(_iter78.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInstructor_resultTupleSchemeFactory implements SchemeFactory {
      public isInstructor_resultTupleScheme getScheme() {
        return new isInstructor_resultTupleScheme();
      }
    }

    private static class isInstructor_resultTupleScheme extends TupleScheme<isInstructor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInstructor_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter79 : struct.success.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              oprot.writeString(_iter79.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInstructor_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map80.size);
            String _key81;
            String _val82;
            for (int _i83 = 0; _i83 < _map80.size; ++_i83)
            {
              _key81 = iprot.readString();
              _val82 = iprot.readString();
              struct.success.put(_key81, _val82);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceDetail_args implements org.apache.thrift.TBase<retrieveStuOrdServiceDetail_args, retrieveStuOrdServiceDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceDetail_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordStatus", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceDetail_argsTupleSchemeFactory());
    }

    public int stuId; // required
    public List<String> ordStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId"),
      ORD_STATUS((short)2, "ordStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          case 2: // ORD_STATUS
            return ORD_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ordStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceDetail_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceDetail_args() {
    }

    public retrieveStuOrdServiceDetail_args(
      int stuId,
      List<String> ordStatus)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
      this.ordStatus = ordStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceDetail_args(retrieveStuOrdServiceDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
      if (other.isSetOrdStatus()) {
        List<String> __this__ordStatus = new ArrayList<String>(other.ordStatus);
        this.ordStatus = __this__ordStatus;
      }
    }

    public retrieveStuOrdServiceDetail_args deepCopy() {
      return new retrieveStuOrdServiceDetail_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
      this.ordStatus = null;
    }

    public int getStuId() {
      return this.stuId;
    }

    public retrieveStuOrdServiceDetail_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public int getOrdStatusSize() {
      return (this.ordStatus == null) ? 0 : this.ordStatus.size();
    }

    public java.util.Iterator<String> getOrdStatusIterator() {
      return (this.ordStatus == null) ? null : this.ordStatus.iterator();
    }

    public void addToOrdStatus(String elem) {
      if (this.ordStatus == null) {
        this.ordStatus = new ArrayList<String>();
      }
      this.ordStatus.add(elem);
    }

    public List<String> getOrdStatus() {
      return this.ordStatus;
    }

    public retrieveStuOrdServiceDetail_args setOrdStatus(List<String> ordStatus) {
      this.ordStatus = ordStatus;
      return this;
    }

    public void unsetOrdStatus() {
      this.ordStatus = null;
    }

    /** Returns true if field ordStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdStatus() {
      return this.ordStatus != null;
    }

    public void setOrdStatusIsSet(boolean value) {
      if (!value) {
        this.ordStatus = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      case ORD_STATUS:
        if (value == null) {
          unsetOrdStatus();
        } else {
          setOrdStatus((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      case ORD_STATUS:
        return getOrdStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      case ORD_STATUS:
        return isSetOrdStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceDetail_args)
        return this.equals((retrieveStuOrdServiceDetail_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      boolean this_present_ordStatus = true && this.isSetOrdStatus();
      boolean that_present_ordStatus = true && that.isSetOrdStatus();
      if (this_present_ordStatus || that_present_ordStatus) {
        if (!(this_present_ordStatus && that_present_ordStatus))
          return false;
        if (!this.ordStatus.equals(that.ordStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      boolean present_ordStatus = true && (isSetOrdStatus());
      list.add(present_ordStatus);
      if (present_ordStatus)
        list.add(ordStatus);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrdStatus()).compareTo(other.isSetOrdStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordStatus, other.ordStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceDetail_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ordStatus:");
      if (this.ordStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.ordStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceDetail_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceDetail_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceDetail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORD_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                  struct.ordStatus = new ArrayList<String>(_list84.size);
                  String _elem85;
                  for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                  {
                    _elem85 = iprot.readString();
                    struct.ordStatus.add(_elem85);
                  }
                  iprot.readListEnd();
                }
                struct.setOrdStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceDetail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        if (struct.ordStatus != null) {
          oprot.writeFieldBegin(ORD_STATUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ordStatus.size()));
            for (String _iter87 : struct.ordStatus)
            {
              oprot.writeString(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceDetail_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceDetail_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        if (struct.isSetOrdStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
        if (struct.isSetOrdStatus()) {
          {
            oprot.writeI32(struct.ordStatus.size());
            for (String _iter88 : struct.ordStatus)
            {
              oprot.writeString(_iter88);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ordStatus = new ArrayList<String>(_list89.size);
            String _elem90;
            for (int _i91 = 0; _i91 < _list89.size; ++_i91)
            {
              _elem90 = iprot.readString();
              struct.ordStatus.add(_elem90);
            }
          }
          struct.setOrdStatusIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceDetail_result implements org.apache.thrift.TBase<retrieveStuOrdServiceDetail_result, retrieveStuOrdServiceDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceDetail_resultTupleSchemeFactory());
    }

    public StuOrdServiceDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuOrdServiceDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceDetail_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceDetail_result() {
    }

    public retrieveStuOrdServiceDetail_result(
      StuOrdServiceDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceDetail_result(retrieveStuOrdServiceDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new StuOrdServiceDetail(other.success);
      }
    }

    public retrieveStuOrdServiceDetail_result deepCopy() {
      return new retrieveStuOrdServiceDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StuOrdServiceDetail getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceDetail_result setSuccess(StuOrdServiceDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StuOrdServiceDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceDetail_result)
        return this.equals((retrieveStuOrdServiceDetail_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceDetail_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceDetail_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceDetail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StuOrdServiceDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceDetail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceDetail_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceDetail_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceDetail_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceDetail_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceDetail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StuOrdServiceDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveActualRole_args implements org.apache.thrift.TBase<retrieveActualRole_args, retrieveActualRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveActualRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveActualRole_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveActualRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveActualRole_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveActualRole_args.class, metaDataMap);
    }

    public retrieveActualRole_args() {
    }

    public retrieveActualRole_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveActualRole_args(retrieveActualRole_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public retrieveActualRole_args deepCopy() {
      return new retrieveActualRole_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public retrieveActualRole_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveActualRole_args)
        return this.equals((retrieveActualRole_args)that);
      return false;
    }

    public boolean equals(retrieveActualRole_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveActualRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveActualRole_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveActualRole_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveActualRole_argsStandardScheme getScheme() {
        return new retrieveActualRole_argsStandardScheme();
      }
    }

    private static class retrieveActualRole_argsStandardScheme extends StandardScheme<retrieveActualRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveActualRole_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveActualRole_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveActualRole_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveActualRole_argsTupleScheme getScheme() {
        return new retrieveActualRole_argsTupleScheme();
      }
    }

    private static class retrieveActualRole_argsTupleScheme extends TupleScheme<retrieveActualRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveActualRole_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveActualRole_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveActualRole_result implements org.apache.thrift.TBase<retrieveActualRole_result, retrieveActualRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveActualRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveActualRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveActualRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveActualRole_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see Role
     */
    public Role success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Role
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Role.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveActualRole_result.class, metaDataMap);
    }

    public retrieveActualRole_result() {
    }

    public retrieveActualRole_result(
      Role success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveActualRole_result(retrieveActualRole_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public retrieveActualRole_result deepCopy() {
      return new retrieveActualRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see Role
     */
    public Role getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Role
     */
    public retrieveActualRole_result setSuccess(Role success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Role)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveActualRole_result)
        return this.equals((retrieveActualRole_result)that);
      return false;
    }

    public boolean equals(retrieveActualRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveActualRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveActualRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveActualRole_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveActualRole_resultStandardScheme getScheme() {
        return new retrieveActualRole_resultStandardScheme();
      }
    }

    private static class retrieveActualRole_resultStandardScheme extends StandardScheme<retrieveActualRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveActualRole_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = Role.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveActualRole_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveActualRole_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveActualRole_resultTupleScheme getScheme() {
        return new retrieveActualRole_resultTupleScheme();
      }
    }

    private static class retrieveActualRole_resultTupleScheme extends TupleScheme<retrieveActualRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveActualRole_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveActualRole_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = Role.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveStuApplyProvince_args implements org.apache.thrift.TBase<saveStuApplyProvince_args, saveStuApplyProvince_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveStuApplyProvince_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStuApplyProvince_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PROVINCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStuApplyProvince_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStuApplyProvince_argsTupleSchemeFactory());
    }

    public int stuId; // required
    public int provinceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId"),
      PROVINCE_ID((short)2, "provinceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          case 2: // PROVINCE_ID
            return PROVINCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private static final int __PROVINCEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROVINCE_ID, new org.apache.thrift.meta_data.FieldMetaData("provinceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStuApplyProvince_args.class, metaDataMap);
    }

    public saveStuApplyProvince_args() {
    }

    public saveStuApplyProvince_args(
      int stuId,
      int provinceId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
      this.provinceId = provinceId;
      setProvinceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStuApplyProvince_args(saveStuApplyProvince_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
      this.provinceId = other.provinceId;
    }

    public saveStuApplyProvince_args deepCopy() {
      return new saveStuApplyProvince_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
      setProvinceIdIsSet(false);
      this.provinceId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public saveStuApplyProvince_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public int getProvinceId() {
      return this.provinceId;
    }

    public saveStuApplyProvince_args setProvinceId(int provinceId) {
      this.provinceId = provinceId;
      setProvinceIdIsSet(true);
      return this;
    }

    public void unsetProvinceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
    }

    /** Returns true if field provinceId is set (has been assigned a value) and false otherwise */
    public boolean isSetProvinceId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROVINCEID_ISSET_ID);
    }

    public void setProvinceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROVINCEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      case PROVINCE_ID:
        if (value == null) {
          unsetProvinceId();
        } else {
          setProvinceId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      case PROVINCE_ID:
        return getProvinceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      case PROVINCE_ID:
        return isSetProvinceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStuApplyProvince_args)
        return this.equals((saveStuApplyProvince_args)that);
      return false;
    }

    public boolean equals(saveStuApplyProvince_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      boolean this_present_provinceId = true;
      boolean that_present_provinceId = true;
      if (this_present_provinceId || that_present_provinceId) {
        if (!(this_present_provinceId && that_present_provinceId))
          return false;
        if (this.provinceId != that.provinceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      boolean present_provinceId = true;
      list.add(present_provinceId);
      if (present_provinceId)
        list.add(provinceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStuApplyProvince_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvinceId()).compareTo(other.isSetProvinceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvinceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceId, other.provinceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStuApplyProvince_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("provinceId:");
      sb.append(this.provinceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStuApplyProvince_argsStandardSchemeFactory implements SchemeFactory {
      public saveStuApplyProvince_argsStandardScheme getScheme() {
        return new saveStuApplyProvince_argsStandardScheme();
      }
    }

    private static class saveStuApplyProvince_argsStandardScheme extends StandardScheme<saveStuApplyProvince_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStuApplyProvince_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROVINCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.provinceId = iprot.readI32();
                struct.setProvinceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStuApplyProvince_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PROVINCE_ID_FIELD_DESC);
        oprot.writeI32(struct.provinceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStuApplyProvince_argsTupleSchemeFactory implements SchemeFactory {
      public saveStuApplyProvince_argsTupleScheme getScheme() {
        return new saveStuApplyProvince_argsTupleScheme();
      }
    }

    private static class saveStuApplyProvince_argsTupleScheme extends TupleScheme<saveStuApplyProvince_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStuApplyProvince_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        if (struct.isSetProvinceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
        if (struct.isSetProvinceId()) {
          oprot.writeI32(struct.provinceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStuApplyProvince_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.provinceId = iprot.readI32();
          struct.setProvinceIdIsSet(true);
        }
      }
    }

  }

  public static class saveStuApplyProvince_result implements org.apache.thrift.TBase<saveStuApplyProvince_result, saveStuApplyProvince_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveStuApplyProvince_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveStuApplyProvince_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveStuApplyProvince_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveStuApplyProvince_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveStuApplyProvince_result.class, metaDataMap);
    }

    public saveStuApplyProvince_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveStuApplyProvince_result(saveStuApplyProvince_result other) {
    }

    public saveStuApplyProvince_result deepCopy() {
      return new saveStuApplyProvince_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveStuApplyProvince_result)
        return this.equals((saveStuApplyProvince_result)that);
      return false;
    }

    public boolean equals(saveStuApplyProvince_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveStuApplyProvince_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveStuApplyProvince_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveStuApplyProvince_resultStandardSchemeFactory implements SchemeFactory {
      public saveStuApplyProvince_resultStandardScheme getScheme() {
        return new saveStuApplyProvince_resultStandardScheme();
      }
    }

    private static class saveStuApplyProvince_resultStandardScheme extends StandardScheme<saveStuApplyProvince_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveStuApplyProvince_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveStuApplyProvince_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveStuApplyProvince_resultTupleSchemeFactory implements SchemeFactory {
      public saveStuApplyProvince_resultTupleScheme getScheme() {
        return new saveStuApplyProvince_resultTupleScheme();
      }
    }

    private static class saveStuApplyProvince_resultTupleScheme extends TupleScheme<saveStuApplyProvince_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveStuApplyProvince_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveStuApplyProvince_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class retrieveStuApplyProvince_args implements org.apache.thrift.TBase<retrieveStuApplyProvince_args, retrieveStuApplyProvince_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuApplyProvince_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuApplyProvince_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuApplyProvince_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuApplyProvince_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuApplyProvince_args.class, metaDataMap);
    }

    public retrieveStuApplyProvince_args() {
    }

    public retrieveStuApplyProvince_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuApplyProvince_args(retrieveStuApplyProvince_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public retrieveStuApplyProvince_args deepCopy() {
      return new retrieveStuApplyProvince_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public retrieveStuApplyProvince_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuApplyProvince_args)
        return this.equals((retrieveStuApplyProvince_args)that);
      return false;
    }

    public boolean equals(retrieveStuApplyProvince_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuApplyProvince_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuApplyProvince_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuApplyProvince_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuApplyProvince_argsStandardScheme getScheme() {
        return new retrieveStuApplyProvince_argsStandardScheme();
      }
    }

    private static class retrieveStuApplyProvince_argsStandardScheme extends StandardScheme<retrieveStuApplyProvince_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuApplyProvince_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuApplyProvince_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuApplyProvince_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuApplyProvince_argsTupleScheme getScheme() {
        return new retrieveStuApplyProvince_argsTupleScheme();
      }
    }

    private static class retrieveStuApplyProvince_argsTupleScheme extends TupleScheme<retrieveStuApplyProvince_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuApplyProvince_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuApplyProvince_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuApplyProvince_result implements org.apache.thrift.TBase<retrieveStuApplyProvince_result, retrieveStuApplyProvince_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuApplyProvince_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuApplyProvince_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuApplyProvince_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuApplyProvince_resultTupleSchemeFactory());
    }

    public Province success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Province.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuApplyProvince_result.class, metaDataMap);
    }

    public retrieveStuApplyProvince_result() {
    }

    public retrieveStuApplyProvince_result(
      Province success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuApplyProvince_result(retrieveStuApplyProvince_result other) {
      if (other.isSetSuccess()) {
        this.success = new Province(other.success);
      }
    }

    public retrieveStuApplyProvince_result deepCopy() {
      return new retrieveStuApplyProvince_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Province getSuccess() {
      return this.success;
    }

    public retrieveStuApplyProvince_result setSuccess(Province success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Province)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuApplyProvince_result)
        return this.equals((retrieveStuApplyProvince_result)that);
      return false;
    }

    public boolean equals(retrieveStuApplyProvince_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuApplyProvince_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuApplyProvince_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuApplyProvince_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuApplyProvince_resultStandardScheme getScheme() {
        return new retrieveStuApplyProvince_resultStandardScheme();
      }
    }

    private static class retrieveStuApplyProvince_resultStandardScheme extends StandardScheme<retrieveStuApplyProvince_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuApplyProvince_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Province();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuApplyProvince_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuApplyProvince_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuApplyProvince_resultTupleScheme getScheme() {
        return new retrieveStuApplyProvince_resultTupleScheme();
      }
    }

    private static class retrieveStuApplyProvince_resultTupleScheme extends TupleScheme<retrieveStuApplyProvince_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuApplyProvince_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuApplyProvince_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Province();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuByFuzzyNickname_args implements org.apache.thrift.TBase<retrieveStuByFuzzyNickname_args, retrieveStuByFuzzyNickname_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuByFuzzyNickname_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuByFuzzyNickname_args");

    private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitSize", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuByFuzzyNickname_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuByFuzzyNickname_argsTupleSchemeFactory());
    }

    public String nickname; // required
    public int limitSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NICKNAME((short)1, "nickname"),
      LIMIT_SIZE((short)2, "limitSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NICKNAME
            return NICKNAME;
          case 2: // LIMIT_SIZE
            return LIMIT_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMITSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIMIT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("limitSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuByFuzzyNickname_args.class, metaDataMap);
    }

    public retrieveStuByFuzzyNickname_args() {
    }

    public retrieveStuByFuzzyNickname_args(
      String nickname,
      int limitSize)
    {
      this();
      this.nickname = nickname;
      this.limitSize = limitSize;
      setLimitSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuByFuzzyNickname_args(retrieveStuByFuzzyNickname_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNickname()) {
        this.nickname = other.nickname;
      }
      this.limitSize = other.limitSize;
    }

    public retrieveStuByFuzzyNickname_args deepCopy() {
      return new retrieveStuByFuzzyNickname_args(this);
    }

    @Override
    public void clear() {
      this.nickname = null;
      setLimitSizeIsSet(false);
      this.limitSize = 0;
    }

    public String getNickname() {
      return this.nickname;
    }

    public retrieveStuByFuzzyNickname_args setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public void unsetNickname() {
      this.nickname = null;
    }

    /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
    public boolean isSetNickname() {
      return this.nickname != null;
    }

    public void setNicknameIsSet(boolean value) {
      if (!value) {
        this.nickname = null;
      }
    }

    public int getLimitSize() {
      return this.limitSize;
    }

    public retrieveStuByFuzzyNickname_args setLimitSize(int limitSize) {
      this.limitSize = limitSize;
      setLimitSizeIsSet(true);
      return this;
    }

    public void unsetLimitSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITSIZE_ISSET_ID);
    }

    /** Returns true if field limitSize is set (has been assigned a value) and false otherwise */
    public boolean isSetLimitSize() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMITSIZE_ISSET_ID);
    }

    public void setLimitSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NICKNAME:
        if (value == null) {
          unsetNickname();
        } else {
          setNickname((String)value);
        }
        break;

      case LIMIT_SIZE:
        if (value == null) {
          unsetLimitSize();
        } else {
          setLimitSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NICKNAME:
        return getNickname();

      case LIMIT_SIZE:
        return getLimitSize();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NICKNAME:
        return isSetNickname();
      case LIMIT_SIZE:
        return isSetLimitSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuByFuzzyNickname_args)
        return this.equals((retrieveStuByFuzzyNickname_args)that);
      return false;
    }

    public boolean equals(retrieveStuByFuzzyNickname_args that) {
      if (that == null)
        return false;

      boolean this_present_nickname = true && this.isSetNickname();
      boolean that_present_nickname = true && that.isSetNickname();
      if (this_present_nickname || that_present_nickname) {
        if (!(this_present_nickname && that_present_nickname))
          return false;
        if (!this.nickname.equals(that.nickname))
          return false;
      }

      boolean this_present_limitSize = true;
      boolean that_present_limitSize = true;
      if (this_present_limitSize || that_present_limitSize) {
        if (!(this_present_limitSize && that_present_limitSize))
          return false;
        if (this.limitSize != that.limitSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_nickname = true && (isSetNickname());
      list.add(present_nickname);
      if (present_nickname)
        list.add(nickname);

      boolean present_limitSize = true;
      list.add(present_limitSize);
      if (present_limitSize)
        list.add(limitSize);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuByFuzzyNickname_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNickname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimitSize()).compareTo(other.isSetLimitSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimitSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitSize, other.limitSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuByFuzzyNickname_args(");
      boolean first = true;

      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limitSize:");
      sb.append(this.limitSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuByFuzzyNickname_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuByFuzzyNickname_argsStandardScheme getScheme() {
        return new retrieveStuByFuzzyNickname_argsStandardScheme();
      }
    }

    private static class retrieveStuByFuzzyNickname_argsStandardScheme extends StandardScheme<retrieveStuByFuzzyNickname_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuByFuzzyNickname_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NICKNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nickname = iprot.readString();
                struct.setNicknameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limitSize = iprot.readI32();
                struct.setLimitSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuByFuzzyNickname_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nickname != null) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_SIZE_FIELD_DESC);
        oprot.writeI32(struct.limitSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuByFuzzyNickname_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuByFuzzyNickname_argsTupleScheme getScheme() {
        return new retrieveStuByFuzzyNickname_argsTupleScheme();
      }
    }

    private static class retrieveStuByFuzzyNickname_argsTupleScheme extends TupleScheme<retrieveStuByFuzzyNickname_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuByFuzzyNickname_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNickname()) {
          optionals.set(0);
        }
        if (struct.isSetLimitSize()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNickname()) {
          oprot.writeString(struct.nickname);
        }
        if (struct.isSetLimitSize()) {
          oprot.writeI32(struct.limitSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuByFuzzyNickname_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nickname = iprot.readString();
          struct.setNicknameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limitSize = iprot.readI32();
          struct.setLimitSizeIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuByFuzzyNickname_result implements org.apache.thrift.TBase<retrieveStuByFuzzyNickname_result, retrieveStuByFuzzyNickname_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuByFuzzyNickname_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuByFuzzyNickname_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuByFuzzyNickname_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuByFuzzyNickname_resultTupleSchemeFactory());
    }

    public List<Student> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuByFuzzyNickname_result.class, metaDataMap);
    }

    public retrieveStuByFuzzyNickname_result() {
    }

    public retrieveStuByFuzzyNickname_result(
      List<Student> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuByFuzzyNickname_result(retrieveStuByFuzzyNickname_result other) {
      if (other.isSetSuccess()) {
        List<Student> __this__success = new ArrayList<Student>(other.success.size());
        for (Student other_element : other.success) {
          __this__success.add(new Student(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveStuByFuzzyNickname_result deepCopy() {
      return new retrieveStuByFuzzyNickname_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Student> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Student elem) {
      if (this.success == null) {
        this.success = new ArrayList<Student>();
      }
      this.success.add(elem);
    }

    public List<Student> getSuccess() {
      return this.success;
    }

    public retrieveStuByFuzzyNickname_result setSuccess(List<Student> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Student>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuByFuzzyNickname_result)
        return this.equals((retrieveStuByFuzzyNickname_result)that);
      return false;
    }

    public boolean equals(retrieveStuByFuzzyNickname_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuByFuzzyNickname_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuByFuzzyNickname_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuByFuzzyNickname_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuByFuzzyNickname_resultStandardScheme getScheme() {
        return new retrieveStuByFuzzyNickname_resultStandardScheme();
      }
    }

    private static class retrieveStuByFuzzyNickname_resultStandardScheme extends StandardScheme<retrieveStuByFuzzyNickname_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuByFuzzyNickname_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                  struct.success = new ArrayList<Student>(_list92.size);
                  Student _elem93;
                  for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                  {
                    _elem93 = new Student();
                    _elem93.read(iprot);
                    struct.success.add(_elem93);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuByFuzzyNickname_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Student _iter95 : struct.success)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuByFuzzyNickname_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuByFuzzyNickname_resultTupleScheme getScheme() {
        return new retrieveStuByFuzzyNickname_resultTupleScheme();
      }
    }

    private static class retrieveStuByFuzzyNickname_resultTupleScheme extends TupleScheme<retrieveStuByFuzzyNickname_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuByFuzzyNickname_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Student _iter96 : struct.success)
            {
              _iter96.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuByFuzzyNickname_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Student>(_list97.size);
            Student _elem98;
            for (int _i99 = 0; _i99 < _list97.size; ++_i99)
            {
              _elem98 = new Student();
              _elem98.read(iprot);
              struct.success.add(_elem98);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuByMobile_args implements org.apache.thrift.TBase<retrieveStuByMobile_args, retrieveStuByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuByMobile_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuByMobile_argsTupleSchemeFactory());
    }

    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuByMobile_args.class, metaDataMap);
    }

    public retrieveStuByMobile_args() {
    }

    public retrieveStuByMobile_args(
      String mobile)
    {
      this();
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuByMobile_args(retrieveStuByMobile_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public retrieveStuByMobile_args deepCopy() {
      return new retrieveStuByMobile_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public retrieveStuByMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuByMobile_args)
        return this.equals((retrieveStuByMobile_args)that);
      return false;
    }

    public boolean equals(retrieveStuByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuByMobile_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuByMobile_argsStandardScheme getScheme() {
        return new retrieveStuByMobile_argsStandardScheme();
      }
    }

    private static class retrieveStuByMobile_argsStandardScheme extends StandardScheme<retrieveStuByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuByMobile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuByMobile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuByMobile_argsTupleScheme getScheme() {
        return new retrieveStuByMobile_argsTupleScheme();
      }
    }

    private static class retrieveStuByMobile_argsTupleScheme extends TupleScheme<retrieveStuByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuByMobile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuByMobile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuByMobile_result implements org.apache.thrift.TBase<retrieveStuByMobile_result, retrieveStuByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuByMobile_resultTupleSchemeFactory());
    }

    public Student success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuByMobile_result.class, metaDataMap);
    }

    public retrieveStuByMobile_result() {
    }

    public retrieveStuByMobile_result(
      Student success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuByMobile_result(retrieveStuByMobile_result other) {
      if (other.isSetSuccess()) {
        this.success = new Student(other.success);
      }
    }

    public retrieveStuByMobile_result deepCopy() {
      return new retrieveStuByMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Student getSuccess() {
      return this.success;
    }

    public retrieveStuByMobile_result setSuccess(Student success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Student)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuByMobile_result)
        return this.equals((retrieveStuByMobile_result)that);
      return false;
    }

    public boolean equals(retrieveStuByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuByMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuByMobile_resultStandardScheme getScheme() {
        return new retrieveStuByMobile_resultStandardScheme();
      }
    }

    private static class retrieveStuByMobile_resultStandardScheme extends StandardScheme<retrieveStuByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuByMobile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Student();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuByMobile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuByMobile_resultTupleScheme getScheme() {
        return new retrieveStuByMobile_resultTupleScheme();
      }
    }

    private static class retrieveStuByMobile_resultTupleScheme extends TupleScheme<retrieveStuByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuByMobile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuByMobile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Student();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuIDByMobile_args implements org.apache.thrift.TBase<retrieveStuIDByMobile_args, retrieveStuIDByMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuIDByMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuIDByMobile_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuIDByMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuIDByMobile_argsTupleSchemeFactory());
    }

    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuIDByMobile_args.class, metaDataMap);
    }

    public retrieveStuIDByMobile_args() {
    }

    public retrieveStuIDByMobile_args(
      String mobile)
    {
      this();
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuIDByMobile_args(retrieveStuIDByMobile_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public retrieveStuIDByMobile_args deepCopy() {
      return new retrieveStuIDByMobile_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public retrieveStuIDByMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuIDByMobile_args)
        return this.equals((retrieveStuIDByMobile_args)that);
      return false;
    }

    public boolean equals(retrieveStuIDByMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuIDByMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuIDByMobile_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuIDByMobile_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuIDByMobile_argsStandardScheme getScheme() {
        return new retrieveStuIDByMobile_argsStandardScheme();
      }
    }

    private static class retrieveStuIDByMobile_argsStandardScheme extends StandardScheme<retrieveStuIDByMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuIDByMobile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuIDByMobile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuIDByMobile_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuIDByMobile_argsTupleScheme getScheme() {
        return new retrieveStuIDByMobile_argsTupleScheme();
      }
    }

    private static class retrieveStuIDByMobile_argsTupleScheme extends TupleScheme<retrieveStuIDByMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuIDByMobile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuIDByMobile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuIDByMobile_result implements org.apache.thrift.TBase<retrieveStuIDByMobile_result, retrieveStuIDByMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuIDByMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuIDByMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuIDByMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuIDByMobile_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuIDByMobile_result.class, metaDataMap);
    }

    public retrieveStuIDByMobile_result() {
    }

    public retrieveStuIDByMobile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuIDByMobile_result(retrieveStuIDByMobile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public retrieveStuIDByMobile_result deepCopy() {
      return new retrieveStuIDByMobile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public retrieveStuIDByMobile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuIDByMobile_result)
        return this.equals((retrieveStuIDByMobile_result)that);
      return false;
    }

    public boolean equals(retrieveStuIDByMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuIDByMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuIDByMobile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuIDByMobile_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuIDByMobile_resultStandardScheme getScheme() {
        return new retrieveStuIDByMobile_resultStandardScheme();
      }
    }

    private static class retrieveStuIDByMobile_resultStandardScheme extends StandardScheme<retrieveStuIDByMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuIDByMobile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuIDByMobile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuIDByMobile_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuIDByMobile_resultTupleScheme getScheme() {
        return new retrieveStuIDByMobile_resultTupleScheme();
      }
    }

    private static class retrieveStuIDByMobile_resultTupleScheme extends TupleScheme<retrieveStuIDByMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuIDByMobile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuIDByMobile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherIDByEmail_args implements org.apache.thrift.TBase<retrieveTeacherIDByEmail_args, retrieveTeacherIDByEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherIDByEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherIDByEmail_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherIDByEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherIDByEmail_argsTupleSchemeFactory());
    }

    public String email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherIDByEmail_args.class, metaDataMap);
    }

    public retrieveTeacherIDByEmail_args() {
    }

    public retrieveTeacherIDByEmail_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherIDByEmail_args(retrieveTeacherIDByEmail_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    public retrieveTeacherIDByEmail_args deepCopy() {
      return new retrieveTeacherIDByEmail_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public String getEmail() {
      return this.email;
    }

    public retrieveTeacherIDByEmail_args setEmail(String email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherIDByEmail_args)
        return this.equals((retrieveTeacherIDByEmail_args)that);
      return false;
    }

    public boolean equals(retrieveTeacherIDByEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherIDByEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherIDByEmail_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherIDByEmail_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherIDByEmail_argsStandardScheme getScheme() {
        return new retrieveTeacherIDByEmail_argsStandardScheme();
      }
    }

    private static class retrieveTeacherIDByEmail_argsStandardScheme extends StandardScheme<retrieveTeacherIDByEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherIDByEmail_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.email = iprot.readString();
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherIDByEmail_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherIDByEmail_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherIDByEmail_argsTupleScheme getScheme() {
        return new retrieveTeacherIDByEmail_argsTupleScheme();
      }
    }

    private static class retrieveTeacherIDByEmail_argsTupleScheme extends TupleScheme<retrieveTeacherIDByEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherIDByEmail_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          oprot.writeString(struct.email);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherIDByEmail_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.email = iprot.readString();
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherIDByEmail_result implements org.apache.thrift.TBase<retrieveTeacherIDByEmail_result, retrieveTeacherIDByEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherIDByEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherIDByEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherIDByEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherIDByEmail_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherIDByEmail_result.class, metaDataMap);
    }

    public retrieveTeacherIDByEmail_result() {
    }

    public retrieveTeacherIDByEmail_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherIDByEmail_result(retrieveTeacherIDByEmail_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public retrieveTeacherIDByEmail_result deepCopy() {
      return new retrieveTeacherIDByEmail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public retrieveTeacherIDByEmail_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherIDByEmail_result)
        return this.equals((retrieveTeacherIDByEmail_result)that);
      return false;
    }

    public boolean equals(retrieveTeacherIDByEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherIDByEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherIDByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherIDByEmail_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherIDByEmail_resultStandardScheme getScheme() {
        return new retrieveTeacherIDByEmail_resultStandardScheme();
      }
    }

    private static class retrieveTeacherIDByEmail_resultStandardScheme extends StandardScheme<retrieveTeacherIDByEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherIDByEmail_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map100.size);
                  String _key101;
                  String _val102;
                  for (int _i103 = 0; _i103 < _map100.size; ++_i103)
                  {
                    _key101 = iprot.readString();
                    _val102 = iprot.readString();
                    struct.success.put(_key101, _val102);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherIDByEmail_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter104 : struct.success.entrySet())
            {
              oprot.writeString(_iter104.getKey());
              oprot.writeString(_iter104.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherIDByEmail_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherIDByEmail_resultTupleScheme getScheme() {
        return new retrieveTeacherIDByEmail_resultTupleScheme();
      }
    }

    private static class retrieveTeacherIDByEmail_resultTupleScheme extends TupleScheme<retrieveTeacherIDByEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherIDByEmail_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter105 : struct.success.entrySet())
            {
              oprot.writeString(_iter105.getKey());
              oprot.writeString(_iter105.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherIDByEmail_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map106.size);
            String _key107;
            String _val108;
            for (int _i109 = 0; _i109 < _map106.size; ++_i109)
            {
              _key107 = iprot.readString();
              _val108 = iprot.readString();
              struct.success.put(_key107, _val108);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNERoundIds_args implements org.apache.thrift.TBase<getNERoundIds_args, getNERoundIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNERoundIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNERoundIds_args");

    private static final org.apache.thrift.protocol.TField ROUND_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("roundIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNERoundIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNERoundIds_argsTupleSchemeFactory());
    }

    public List<Integer> roundIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUND_IDS((short)1, "roundIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUND_IDS
            return ROUND_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUND_IDS, new org.apache.thrift.meta_data.FieldMetaData("roundIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNERoundIds_args.class, metaDataMap);
    }

    public getNERoundIds_args() {
    }

    public getNERoundIds_args(
      List<Integer> roundIds)
    {
      this();
      this.roundIds = roundIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNERoundIds_args(getNERoundIds_args other) {
      if (other.isSetRoundIds()) {
        List<Integer> __this__roundIds = new ArrayList<Integer>(other.roundIds);
        this.roundIds = __this__roundIds;
      }
    }

    public getNERoundIds_args deepCopy() {
      return new getNERoundIds_args(this);
    }

    @Override
    public void clear() {
      this.roundIds = null;
    }

    public int getRoundIdsSize() {
      return (this.roundIds == null) ? 0 : this.roundIds.size();
    }

    public java.util.Iterator<Integer> getRoundIdsIterator() {
      return (this.roundIds == null) ? null : this.roundIds.iterator();
    }

    public void addToRoundIds(int elem) {
      if (this.roundIds == null) {
        this.roundIds = new ArrayList<Integer>();
      }
      this.roundIds.add(elem);
    }

    public List<Integer> getRoundIds() {
      return this.roundIds;
    }

    public getNERoundIds_args setRoundIds(List<Integer> roundIds) {
      this.roundIds = roundIds;
      return this;
    }

    public void unsetRoundIds() {
      this.roundIds = null;
    }

    /** Returns true if field roundIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRoundIds() {
      return this.roundIds != null;
    }

    public void setRoundIdsIsSet(boolean value) {
      if (!value) {
        this.roundIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROUND_IDS:
        if (value == null) {
          unsetRoundIds();
        } else {
          setRoundIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUND_IDS:
        return getRoundIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROUND_IDS:
        return isSetRoundIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNERoundIds_args)
        return this.equals((getNERoundIds_args)that);
      return false;
    }

    public boolean equals(getNERoundIds_args that) {
      if (that == null)
        return false;

      boolean this_present_roundIds = true && this.isSetRoundIds();
      boolean that_present_roundIds = true && that.isSetRoundIds();
      if (this_present_roundIds || that_present_roundIds) {
        if (!(this_present_roundIds && that_present_roundIds))
          return false;
        if (!this.roundIds.equals(that.roundIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roundIds = true && (isSetRoundIds());
      list.add(present_roundIds);
      if (present_roundIds)
        list.add(roundIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNERoundIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoundIds()).compareTo(other.isSetRoundIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoundIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundIds, other.roundIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNERoundIds_args(");
      boolean first = true;

      sb.append("roundIds:");
      if (this.roundIds == null) {
        sb.append("null");
      } else {
        sb.append(this.roundIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNERoundIds_argsStandardSchemeFactory implements SchemeFactory {
      public getNERoundIds_argsStandardScheme getScheme() {
        return new getNERoundIds_argsStandardScheme();
      }
    }

    private static class getNERoundIds_argsStandardScheme extends StandardScheme<getNERoundIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNERoundIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUND_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.roundIds = new ArrayList<Integer>(_list110.size);
                  int _elem111;
                  for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                  {
                    _elem111 = iprot.readI32();
                    struct.roundIds.add(_elem111);
                  }
                  iprot.readListEnd();
                }
                struct.setRoundIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNERoundIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roundIds != null) {
          oprot.writeFieldBegin(ROUND_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.roundIds.size()));
            for (int _iter113 : struct.roundIds)
            {
              oprot.writeI32(_iter113);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNERoundIds_argsTupleSchemeFactory implements SchemeFactory {
      public getNERoundIds_argsTupleScheme getScheme() {
        return new getNERoundIds_argsTupleScheme();
      }
    }

    private static class getNERoundIds_argsTupleScheme extends TupleScheme<getNERoundIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNERoundIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoundIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoundIds()) {
          {
            oprot.writeI32(struct.roundIds.size());
            for (int _iter114 : struct.roundIds)
            {
              oprot.writeI32(_iter114);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNERoundIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.roundIds = new ArrayList<Integer>(_list115.size);
            int _elem116;
            for (int _i117 = 0; _i117 < _list115.size; ++_i117)
            {
              _elem116 = iprot.readI32();
              struct.roundIds.add(_elem116);
            }
          }
          struct.setRoundIdsIsSet(true);
        }
      }
    }

  }

  public static class getNERoundIds_result implements org.apache.thrift.TBase<getNERoundIds_result, getNERoundIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNERoundIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNERoundIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNERoundIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNERoundIds_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNERoundIds_result.class, metaDataMap);
    }

    public getNERoundIds_result() {
    }

    public getNERoundIds_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNERoundIds_result(getNERoundIds_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getNERoundIds_result deepCopy() {
      return new getNERoundIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getNERoundIds_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNERoundIds_result)
        return this.equals((getNERoundIds_result)that);
      return false;
    }

    public boolean equals(getNERoundIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNERoundIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNERoundIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNERoundIds_resultStandardSchemeFactory implements SchemeFactory {
      public getNERoundIds_resultStandardScheme getScheme() {
        return new getNERoundIds_resultStandardScheme();
      }
    }

    private static class getNERoundIds_resultStandardScheme extends StandardScheme<getNERoundIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNERoundIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list118.size);
                  int _elem119;
                  for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                  {
                    _elem119 = iprot.readI32();
                    struct.success.add(_elem119);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNERoundIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter121 : struct.success)
            {
              oprot.writeI32(_iter121);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNERoundIds_resultTupleSchemeFactory implements SchemeFactory {
      public getNERoundIds_resultTupleScheme getScheme() {
        return new getNERoundIds_resultTupleScheme();
      }
    }

    private static class getNERoundIds_resultTupleScheme extends TupleScheme<getNERoundIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNERoundIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter122 : struct.success)
            {
              oprot.writeI32(_iter122);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNERoundIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list123.size);
            int _elem124;
            for (int _i125 = 0; _i125 < _list123.size; ++_i125)
            {
              _elem124 = iprot.readI32();
              struct.success.add(_elem124);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRoundIdsByStuId_args implements org.apache.thrift.TBase<getRoundIdsByStuId_args, getRoundIdsByStuId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoundIdsByStuId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoundIdsByStuId_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoundIdsByStuId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoundIdsByStuId_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoundIdsByStuId_args.class, metaDataMap);
    }

    public getRoundIdsByStuId_args() {
    }

    public getRoundIdsByStuId_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoundIdsByStuId_args(getRoundIdsByStuId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getRoundIdsByStuId_args deepCopy() {
      return new getRoundIdsByStuId_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getRoundIdsByStuId_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoundIdsByStuId_args)
        return this.equals((getRoundIdsByStuId_args)that);
      return false;
    }

    public boolean equals(getRoundIdsByStuId_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoundIdsByStuId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoundIdsByStuId_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoundIdsByStuId_argsStandardSchemeFactory implements SchemeFactory {
      public getRoundIdsByStuId_argsStandardScheme getScheme() {
        return new getRoundIdsByStuId_argsStandardScheme();
      }
    }

    private static class getRoundIdsByStuId_argsStandardScheme extends StandardScheme<getRoundIdsByStuId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoundIdsByStuId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoundIdsByStuId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoundIdsByStuId_argsTupleSchemeFactory implements SchemeFactory {
      public getRoundIdsByStuId_argsTupleScheme getScheme() {
        return new getRoundIdsByStuId_argsTupleScheme();
      }
    }

    private static class getRoundIdsByStuId_argsTupleScheme extends TupleScheme<getRoundIdsByStuId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoundIdsByStuId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoundIdsByStuId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getRoundIdsByStuId_result implements org.apache.thrift.TBase<getRoundIdsByStuId_result, getRoundIdsByStuId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoundIdsByStuId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoundIdsByStuId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoundIdsByStuId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoundIdsByStuId_resultTupleSchemeFactory());
    }

    public List<StuRound> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuRound.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoundIdsByStuId_result.class, metaDataMap);
    }

    public getRoundIdsByStuId_result() {
    }

    public getRoundIdsByStuId_result(
      List<StuRound> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoundIdsByStuId_result(getRoundIdsByStuId_result other) {
      if (other.isSetSuccess()) {
        List<StuRound> __this__success = new ArrayList<StuRound>(other.success.size());
        for (StuRound other_element : other.success) {
          __this__success.add(new StuRound(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoundIdsByStuId_result deepCopy() {
      return new getRoundIdsByStuId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<StuRound> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(StuRound elem) {
      if (this.success == null) {
        this.success = new ArrayList<StuRound>();
      }
      this.success.add(elem);
    }

    public List<StuRound> getSuccess() {
      return this.success;
    }

    public getRoundIdsByStuId_result setSuccess(List<StuRound> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<StuRound>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoundIdsByStuId_result)
        return this.equals((getRoundIdsByStuId_result)that);
      return false;
    }

    public boolean equals(getRoundIdsByStuId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoundIdsByStuId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoundIdsByStuId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoundIdsByStuId_resultStandardSchemeFactory implements SchemeFactory {
      public getRoundIdsByStuId_resultStandardScheme getScheme() {
        return new getRoundIdsByStuId_resultStandardScheme();
      }
    }

    private static class getRoundIdsByStuId_resultStandardScheme extends StandardScheme<getRoundIdsByStuId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoundIdsByStuId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.success = new ArrayList<StuRound>(_list126.size);
                  StuRound _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new StuRound();
                    _elem127.read(iprot);
                    struct.success.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoundIdsByStuId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (StuRound _iter129 : struct.success)
            {
              _iter129.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoundIdsByStuId_resultTupleSchemeFactory implements SchemeFactory {
      public getRoundIdsByStuId_resultTupleScheme getScheme() {
        return new getRoundIdsByStuId_resultTupleScheme();
      }
    }

    private static class getRoundIdsByStuId_resultTupleScheme extends TupleScheme<getRoundIdsByStuId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoundIdsByStuId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (StuRound _iter130 : struct.success)
            {
              _iter130.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoundIdsByStuId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<StuRound>(_list131.size);
            StuRound _elem132;
            for (int _i133 = 0; _i133 < _list131.size; ++_i133)
            {
              _elem132 = new StuRound();
              _elem132.read(iprot);
              struct.success.add(_elem132);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStudentsByBrokenMobile_args implements org.apache.thrift.TBase<getStudentsByBrokenMobile_args, getStudentsByBrokenMobile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentsByBrokenMobile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentsByBrokenMobile_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentsByBrokenMobile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentsByBrokenMobile_argsTupleSchemeFactory());
    }

    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentsByBrokenMobile_args.class, metaDataMap);
    }

    public getStudentsByBrokenMobile_args() {
    }

    public getStudentsByBrokenMobile_args(
      String mobile)
    {
      this();
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentsByBrokenMobile_args(getStudentsByBrokenMobile_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public getStudentsByBrokenMobile_args deepCopy() {
      return new getStudentsByBrokenMobile_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public getStudentsByBrokenMobile_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentsByBrokenMobile_args)
        return this.equals((getStudentsByBrokenMobile_args)that);
      return false;
    }

    public boolean equals(getStudentsByBrokenMobile_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStudentsByBrokenMobile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentsByBrokenMobile_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentsByBrokenMobile_argsStandardSchemeFactory implements SchemeFactory {
      public getStudentsByBrokenMobile_argsStandardScheme getScheme() {
        return new getStudentsByBrokenMobile_argsStandardScheme();
      }
    }

    private static class getStudentsByBrokenMobile_argsStandardScheme extends StandardScheme<getStudentsByBrokenMobile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentsByBrokenMobile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentsByBrokenMobile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentsByBrokenMobile_argsTupleSchemeFactory implements SchemeFactory {
      public getStudentsByBrokenMobile_argsTupleScheme getScheme() {
        return new getStudentsByBrokenMobile_argsTupleScheme();
      }
    }

    private static class getStudentsByBrokenMobile_argsTupleScheme extends TupleScheme<getStudentsByBrokenMobile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentsByBrokenMobile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentsByBrokenMobile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class getStudentsByBrokenMobile_result implements org.apache.thrift.TBase<getStudentsByBrokenMobile_result, getStudentsByBrokenMobile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStudentsByBrokenMobile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStudentsByBrokenMobile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStudentsByBrokenMobile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStudentsByBrokenMobile_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStudentsByBrokenMobile_result.class, metaDataMap);
    }

    public getStudentsByBrokenMobile_result() {
    }

    public getStudentsByBrokenMobile_result(
      List<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStudentsByBrokenMobile_result(getStudentsByBrokenMobile_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getStudentsByBrokenMobile_result deepCopy() {
      return new getStudentsByBrokenMobile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public getStudentsByBrokenMobile_result setSuccess(List<Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStudentsByBrokenMobile_result)
        return this.equals((getStudentsByBrokenMobile_result)that);
      return false;
    }

    public boolean equals(getStudentsByBrokenMobile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStudentsByBrokenMobile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStudentsByBrokenMobile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStudentsByBrokenMobile_resultStandardSchemeFactory implements SchemeFactory {
      public getStudentsByBrokenMobile_resultStandardScheme getScheme() {
        return new getStudentsByBrokenMobile_resultStandardScheme();
      }
    }

    private static class getStudentsByBrokenMobile_resultStandardScheme extends StandardScheme<getStudentsByBrokenMobile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStudentsByBrokenMobile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list134.size);
                  int _elem135;
                  for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                  {
                    _elem135 = iprot.readI32();
                    struct.success.add(_elem135);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStudentsByBrokenMobile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter137 : struct.success)
            {
              oprot.writeI32(_iter137);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStudentsByBrokenMobile_resultTupleSchemeFactory implements SchemeFactory {
      public getStudentsByBrokenMobile_resultTupleScheme getScheme() {
        return new getStudentsByBrokenMobile_resultTupleScheme();
      }
    }

    private static class getStudentsByBrokenMobile_resultTupleScheme extends TupleScheme<getStudentsByBrokenMobile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStudentsByBrokenMobile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter138 : struct.success)
            {
              oprot.writeI32(_iter138);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStudentsByBrokenMobile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list139.size);
            int _elem140;
            for (int _i141 = 0; _i141 < _list139.size; ++_i141)
            {
              _elem140 = iprot.readI32();
              struct.success.add(_elem140);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrdCountAndOffServiceOrdCount_args implements org.apache.thrift.TBase<getOrdCountAndOffServiceOrdCount_args, getOrdCountAndOffServiceOrdCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdCountAndOffServiceOrdCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdCountAndOffServiceOrdCount_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrdCountAndOffServiceOrdCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrdCountAndOffServiceOrdCount_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdCountAndOffServiceOrdCount_args.class, metaDataMap);
    }

    public getOrdCountAndOffServiceOrdCount_args() {
    }

    public getOrdCountAndOffServiceOrdCount_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrdCountAndOffServiceOrdCount_args(getOrdCountAndOffServiceOrdCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getOrdCountAndOffServiceOrdCount_args deepCopy() {
      return new getOrdCountAndOffServiceOrdCount_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getOrdCountAndOffServiceOrdCount_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrdCountAndOffServiceOrdCount_args)
        return this.equals((getOrdCountAndOffServiceOrdCount_args)that);
      return false;
    }

    public boolean equals(getOrdCountAndOffServiceOrdCount_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrdCountAndOffServiceOrdCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrdCountAndOffServiceOrdCount_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_argsStandardSchemeFactory implements SchemeFactory {
      public getOrdCountAndOffServiceOrdCount_argsStandardScheme getScheme() {
        return new getOrdCountAndOffServiceOrdCount_argsStandardScheme();
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_argsStandardScheme extends StandardScheme<getOrdCountAndOffServiceOrdCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdCountAndOffServiceOrdCount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdCountAndOffServiceOrdCount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrdCountAndOffServiceOrdCount_argsTupleSchemeFactory implements SchemeFactory {
      public getOrdCountAndOffServiceOrdCount_argsTupleScheme getScheme() {
        return new getOrdCountAndOffServiceOrdCount_argsTupleScheme();
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_argsTupleScheme extends TupleScheme<getOrdCountAndOffServiceOrdCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdCountAndOffServiceOrdCount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdCountAndOffServiceOrdCount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getOrdCountAndOffServiceOrdCount_result implements org.apache.thrift.TBase<getOrdCountAndOffServiceOrdCount_result, getOrdCountAndOffServiceOrdCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrdCountAndOffServiceOrdCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrdCountAndOffServiceOrdCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrdCountAndOffServiceOrdCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrdCountAndOffServiceOrdCount_resultTupleSchemeFactory());
    }

    public Map<String,Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrdCountAndOffServiceOrdCount_result.class, metaDataMap);
    }

    public getOrdCountAndOffServiceOrdCount_result() {
    }

    public getOrdCountAndOffServiceOrdCount_result(
      Map<String,Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrdCountAndOffServiceOrdCount_result(getOrdCountAndOffServiceOrdCount_result other) {
      if (other.isSetSuccess()) {
        Map<String,Integer> __this__success = new HashMap<String,Integer>(other.success);
        this.success = __this__success;
      }
    }

    public getOrdCountAndOffServiceOrdCount_result deepCopy() {
      return new getOrdCountAndOffServiceOrdCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, int val) {
      if (this.success == null) {
        this.success = new HashMap<String,Integer>();
      }
      this.success.put(key, val);
    }

    public Map<String,Integer> getSuccess() {
      return this.success;
    }

    public getOrdCountAndOffServiceOrdCount_result setSuccess(Map<String,Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrdCountAndOffServiceOrdCount_result)
        return this.equals((getOrdCountAndOffServiceOrdCount_result)that);
      return false;
    }

    public boolean equals(getOrdCountAndOffServiceOrdCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrdCountAndOffServiceOrdCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrdCountAndOffServiceOrdCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_resultStandardSchemeFactory implements SchemeFactory {
      public getOrdCountAndOffServiceOrdCount_resultStandardScheme getScheme() {
        return new getOrdCountAndOffServiceOrdCount_resultStandardScheme();
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_resultStandardScheme extends StandardScheme<getOrdCountAndOffServiceOrdCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrdCountAndOffServiceOrdCount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Integer>(2*_map142.size);
                  String _key143;
                  int _val144;
                  for (int _i145 = 0; _i145 < _map142.size; ++_i145)
                  {
                    _key143 = iprot.readString();
                    _val144 = iprot.readI32();
                    struct.success.put(_key143, _val144);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrdCountAndOffServiceOrdCount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Map.Entry<String, Integer> _iter146 : struct.success.entrySet())
            {
              oprot.writeString(_iter146.getKey());
              oprot.writeI32(_iter146.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrdCountAndOffServiceOrdCount_resultTupleSchemeFactory implements SchemeFactory {
      public getOrdCountAndOffServiceOrdCount_resultTupleScheme getScheme() {
        return new getOrdCountAndOffServiceOrdCount_resultTupleScheme();
      }
    }

    private static class getOrdCountAndOffServiceOrdCount_resultTupleScheme extends TupleScheme<getOrdCountAndOffServiceOrdCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrdCountAndOffServiceOrdCount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Integer> _iter147 : struct.success.entrySet())
            {
              oprot.writeString(_iter147.getKey());
              oprot.writeI32(_iter147.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrdCountAndOffServiceOrdCount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map148 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashMap<String,Integer>(2*_map148.size);
            String _key149;
            int _val150;
            for (int _i151 = 0; _i151 < _map148.size; ++_i151)
            {
              _key149 = iprot.readString();
              _val150 = iprot.readI32();
              struct.success.put(_key149, _val150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStudentsListByAccount_args implements org.apache.thrift.TBase<retrieveStudentsListByAccount_args, retrieveStudentsListByAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStudentsListByAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStudentsListByAccount_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchContent", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordStatus", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField PACKAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("packageIds", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField PROVINCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceIds", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField COUNT_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("countPerPage", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStudentsListByAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStudentsListByAccount_argsTupleSchemeFactory());
    }

    public List<String> email; // required
    public String searchContent; // required
    public List<String> ordStatus; // required
    public List<Integer> packageIds; // required
    public List<Integer> provinceIds; // required
    public String startTime; // required
    public String endTime; // required
    public int startIndex; // required
    public int countPerPage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email"),
      SEARCH_CONTENT((short)2, "searchContent"),
      ORD_STATUS((short)3, "ordStatus"),
      PACKAGE_IDS((short)4, "packageIds"),
      PROVINCE_IDS((short)5, "provinceIds"),
      START_TIME((short)6, "startTime"),
      END_TIME((short)7, "endTime"),
      START_INDEX((short)8, "startIndex"),
      COUNT_PER_PAGE((short)9, "countPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          case 2: // SEARCH_CONTENT
            return SEARCH_CONTENT;
          case 3: // ORD_STATUS
            return ORD_STATUS;
          case 4: // PACKAGE_IDS
            return PACKAGE_IDS;
          case 5: // PROVINCE_IDS
            return PROVINCE_IDS;
          case 6: // START_TIME
            return START_TIME;
          case 7: // END_TIME
            return END_TIME;
          case 8: // START_INDEX
            return START_INDEX;
          case 9: // COUNT_PER_PAGE
            return COUNT_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTINDEX_ISSET_ID = 0;
    private static final int __COUNTPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SEARCH_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("searchContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("ordStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.PACKAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("packageIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.PROVINCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("provinceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("countPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStudentsListByAccount_args.class, metaDataMap);
    }

    public retrieveStudentsListByAccount_args() {
    }

    public retrieveStudentsListByAccount_args(
      List<String> email,
      String searchContent,
      List<String> ordStatus,
      List<Integer> packageIds,
      List<Integer> provinceIds,
      String startTime,
      String endTime,
      int startIndex,
      int countPerPage)
    {
      this();
      this.email = email;
      this.searchContent = searchContent;
      this.ordStatus = ordStatus;
      this.packageIds = packageIds;
      this.provinceIds = provinceIds;
      this.startTime = startTime;
      this.endTime = endTime;
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      this.countPerPage = countPerPage;
      setCountPerPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStudentsListByAccount_args(retrieveStudentsListByAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetEmail()) {
        List<String> __this__email = new ArrayList<String>(other.email);
        this.email = __this__email;
      }
      if (other.isSetSearchContent()) {
        this.searchContent = other.searchContent;
      }
      if (other.isSetOrdStatus()) {
        List<String> __this__ordStatus = new ArrayList<String>(other.ordStatus);
        this.ordStatus = __this__ordStatus;
      }
      if (other.isSetPackageIds()) {
        List<Integer> __this__packageIds = new ArrayList<Integer>(other.packageIds);
        this.packageIds = __this__packageIds;
      }
      if (other.isSetProvinceIds()) {
        List<Integer> __this__provinceIds = new ArrayList<Integer>(other.provinceIds);
        this.provinceIds = __this__provinceIds;
      }
      if (other.isSetStartTime()) {
        this.startTime = other.startTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
      this.startIndex = other.startIndex;
      this.countPerPage = other.countPerPage;
    }

    public retrieveStudentsListByAccount_args deepCopy() {
      return new retrieveStudentsListByAccount_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
      this.searchContent = null;
      this.ordStatus = null;
      this.packageIds = null;
      this.provinceIds = null;
      this.startTime = null;
      this.endTime = null;
      setStartIndexIsSet(false);
      this.startIndex = 0;
      setCountPerPageIsSet(false);
      this.countPerPage = 0;
    }

    public int getEmailSize() {
      return (this.email == null) ? 0 : this.email.size();
    }

    public java.util.Iterator<String> getEmailIterator() {
      return (this.email == null) ? null : this.email.iterator();
    }

    public void addToEmail(String elem) {
      if (this.email == null) {
        this.email = new ArrayList<String>();
      }
      this.email.add(elem);
    }

    public List<String> getEmail() {
      return this.email;
    }

    public retrieveStudentsListByAccount_args setEmail(List<String> email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getSearchContent() {
      return this.searchContent;
    }

    public retrieveStudentsListByAccount_args setSearchContent(String searchContent) {
      this.searchContent = searchContent;
      return this;
    }

    public void unsetSearchContent() {
      this.searchContent = null;
    }

    /** Returns true if field searchContent is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchContent() {
      return this.searchContent != null;
    }

    public void setSearchContentIsSet(boolean value) {
      if (!value) {
        this.searchContent = null;
      }
    }

    public int getOrdStatusSize() {
      return (this.ordStatus == null) ? 0 : this.ordStatus.size();
    }

    public java.util.Iterator<String> getOrdStatusIterator() {
      return (this.ordStatus == null) ? null : this.ordStatus.iterator();
    }

    public void addToOrdStatus(String elem) {
      if (this.ordStatus == null) {
        this.ordStatus = new ArrayList<String>();
      }
      this.ordStatus.add(elem);
    }

    public List<String> getOrdStatus() {
      return this.ordStatus;
    }

    public retrieveStudentsListByAccount_args setOrdStatus(List<String> ordStatus) {
      this.ordStatus = ordStatus;
      return this;
    }

    public void unsetOrdStatus() {
      this.ordStatus = null;
    }

    /** Returns true if field ordStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetOrdStatus() {
      return this.ordStatus != null;
    }

    public void setOrdStatusIsSet(boolean value) {
      if (!value) {
        this.ordStatus = null;
      }
    }

    public int getPackageIdsSize() {
      return (this.packageIds == null) ? 0 : this.packageIds.size();
    }

    public java.util.Iterator<Integer> getPackageIdsIterator() {
      return (this.packageIds == null) ? null : this.packageIds.iterator();
    }

    public void addToPackageIds(int elem) {
      if (this.packageIds == null) {
        this.packageIds = new ArrayList<Integer>();
      }
      this.packageIds.add(elem);
    }

    public List<Integer> getPackageIds() {
      return this.packageIds;
    }

    public retrieveStudentsListByAccount_args setPackageIds(List<Integer> packageIds) {
      this.packageIds = packageIds;
      return this;
    }

    public void unsetPackageIds() {
      this.packageIds = null;
    }

    /** Returns true if field packageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageIds() {
      return this.packageIds != null;
    }

    public void setPackageIdsIsSet(boolean value) {
      if (!value) {
        this.packageIds = null;
      }
    }

    public int getProvinceIdsSize() {
      return (this.provinceIds == null) ? 0 : this.provinceIds.size();
    }

    public java.util.Iterator<Integer> getProvinceIdsIterator() {
      return (this.provinceIds == null) ? null : this.provinceIds.iterator();
    }

    public void addToProvinceIds(int elem) {
      if (this.provinceIds == null) {
        this.provinceIds = new ArrayList<Integer>();
      }
      this.provinceIds.add(elem);
    }

    public List<Integer> getProvinceIds() {
      return this.provinceIds;
    }

    public retrieveStudentsListByAccount_args setProvinceIds(List<Integer> provinceIds) {
      this.provinceIds = provinceIds;
      return this;
    }

    public void unsetProvinceIds() {
      this.provinceIds = null;
    }

    /** Returns true if field provinceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetProvinceIds() {
      return this.provinceIds != null;
    }

    public void setProvinceIdsIsSet(boolean value) {
      if (!value) {
        this.provinceIds = null;
      }
    }

    public String getStartTime() {
      return this.startTime;
    }

    public retrieveStudentsListByAccount_args setStartTime(String startTime) {
      this.startTime = startTime;
      return this;
    }

    public void unsetStartTime() {
      this.startTime = null;
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return this.startTime != null;
    }

    public void setStartTimeIsSet(boolean value) {
      if (!value) {
        this.startTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public retrieveStudentsListByAccount_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public int getStartIndex() {
      return this.startIndex;
    }

    public retrieveStudentsListByAccount_args setStartIndex(int startIndex) {
      this.startIndex = startIndex;
      setStartIndexIsSet(true);
      return this;
    }

    public void unsetStartIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
    }

    public void setStartIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
    }

    public int getCountPerPage() {
      return this.countPerPage;
    }

    public retrieveStudentsListByAccount_args setCountPerPage(int countPerPage) {
      this.countPerPage = countPerPage;
      setCountPerPageIsSet(true);
      return this;
    }

    public void unsetCountPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
    }

    /** Returns true if field countPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetCountPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID);
    }

    public void setCountPerPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((List<String>)value);
        }
        break;

      case SEARCH_CONTENT:
        if (value == null) {
          unsetSearchContent();
        } else {
          setSearchContent((String)value);
        }
        break;

      case ORD_STATUS:
        if (value == null) {
          unsetOrdStatus();
        } else {
          setOrdStatus((List<String>)value);
        }
        break;

      case PACKAGE_IDS:
        if (value == null) {
          unsetPackageIds();
        } else {
          setPackageIds((List<Integer>)value);
        }
        break;

      case PROVINCE_IDS:
        if (value == null) {
          unsetProvinceIds();
        } else {
          setProvinceIds((List<Integer>)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      case START_INDEX:
        if (value == null) {
          unsetStartIndex();
        } else {
          setStartIndex((Integer)value);
        }
        break;

      case COUNT_PER_PAGE:
        if (value == null) {
          unsetCountPerPage();
        } else {
          setCountPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      case SEARCH_CONTENT:
        return getSearchContent();

      case ORD_STATUS:
        return getOrdStatus();

      case PACKAGE_IDS:
        return getPackageIds();

      case PROVINCE_IDS:
        return getProvinceIds();

      case START_TIME:
        return getStartTime();

      case END_TIME:
        return getEndTime();

      case START_INDEX:
        return getStartIndex();

      case COUNT_PER_PAGE:
        return getCountPerPage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      case SEARCH_CONTENT:
        return isSetSearchContent();
      case ORD_STATUS:
        return isSetOrdStatus();
      case PACKAGE_IDS:
        return isSetPackageIds();
      case PROVINCE_IDS:
        return isSetProvinceIds();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case START_INDEX:
        return isSetStartIndex();
      case COUNT_PER_PAGE:
        return isSetCountPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStudentsListByAccount_args)
        return this.equals((retrieveStudentsListByAccount_args)that);
      return false;
    }

    public boolean equals(retrieveStudentsListByAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_searchContent = true && this.isSetSearchContent();
      boolean that_present_searchContent = true && that.isSetSearchContent();
      if (this_present_searchContent || that_present_searchContent) {
        if (!(this_present_searchContent && that_present_searchContent))
          return false;
        if (!this.searchContent.equals(that.searchContent))
          return false;
      }

      boolean this_present_ordStatus = true && this.isSetOrdStatus();
      boolean that_present_ordStatus = true && that.isSetOrdStatus();
      if (this_present_ordStatus || that_present_ordStatus) {
        if (!(this_present_ordStatus && that_present_ordStatus))
          return false;
        if (!this.ordStatus.equals(that.ordStatus))
          return false;
      }

      boolean this_present_packageIds = true && this.isSetPackageIds();
      boolean that_present_packageIds = true && that.isSetPackageIds();
      if (this_present_packageIds || that_present_packageIds) {
        if (!(this_present_packageIds && that_present_packageIds))
          return false;
        if (!this.packageIds.equals(that.packageIds))
          return false;
      }

      boolean this_present_provinceIds = true && this.isSetProvinceIds();
      boolean that_present_provinceIds = true && that.isSetProvinceIds();
      if (this_present_provinceIds || that_present_provinceIds) {
        if (!(this_present_provinceIds && that_present_provinceIds))
          return false;
        if (!this.provinceIds.equals(that.provinceIds))
          return false;
      }

      boolean this_present_startTime = true && this.isSetStartTime();
      boolean that_present_startTime = true && that.isSetStartTime();
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (!this.startTime.equals(that.startTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      boolean this_present_startIndex = true;
      boolean that_present_startIndex = true;
      if (this_present_startIndex || that_present_startIndex) {
        if (!(this_present_startIndex && that_present_startIndex))
          return false;
        if (this.startIndex != that.startIndex)
          return false;
      }

      boolean this_present_countPerPage = true;
      boolean that_present_countPerPage = true;
      if (this_present_countPerPage || that_present_countPerPage) {
        if (!(this_present_countPerPage && that_present_countPerPage))
          return false;
        if (this.countPerPage != that.countPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      boolean present_searchContent = true && (isSetSearchContent());
      list.add(present_searchContent);
      if (present_searchContent)
        list.add(searchContent);

      boolean present_ordStatus = true && (isSetOrdStatus());
      list.add(present_ordStatus);
      if (present_ordStatus)
        list.add(ordStatus);

      boolean present_packageIds = true && (isSetPackageIds());
      list.add(present_packageIds);
      if (present_packageIds)
        list.add(packageIds);

      boolean present_provinceIds = true && (isSetProvinceIds());
      list.add(present_provinceIds);
      if (present_provinceIds)
        list.add(provinceIds);

      boolean present_startTime = true && (isSetStartTime());
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true && (isSetEndTime());
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_startIndex = true;
      list.add(present_startIndex);
      if (present_startIndex)
        list.add(startIndex);

      boolean present_countPerPage = true;
      list.add(present_countPerPage);
      if (present_countPerPage)
        list.add(countPerPage);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStudentsListByAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSearchContent()).compareTo(other.isSetSearchContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchContent, other.searchContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrdStatus()).compareTo(other.isSetOrdStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrdStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordStatus, other.ordStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPackageIds()).compareTo(other.isSetPackageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageIds, other.packageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProvinceIds()).compareTo(other.isSetProvinceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvinceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceIds, other.provinceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCountPerPage()).compareTo(other.isSetCountPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countPerPage, other.countPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStudentsListByAccount_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchContent:");
      if (this.searchContent == null) {
        sb.append("null");
      } else {
        sb.append(this.searchContent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ordStatus:");
      if (this.ordStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.ordStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageIds:");
      if (this.packageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.packageIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("provinceIds:");
      if (this.provinceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.provinceIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("countPerPage:");
      sb.append(this.countPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStudentsListByAccount_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStudentsListByAccount_argsStandardScheme getScheme() {
        return new retrieveStudentsListByAccount_argsStandardScheme();
      }
    }

    private static class retrieveStudentsListByAccount_argsStandardScheme extends StandardScheme<retrieveStudentsListByAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStudentsListByAccount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.email = new ArrayList<String>(_list152.size);
                  String _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = iprot.readString();
                    struct.email.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchContent = iprot.readString();
                struct.setSearchContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORD_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                  struct.ordStatus = new ArrayList<String>(_list155.size);
                  String _elem156;
                  for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                  {
                    _elem156 = iprot.readString();
                    struct.ordStatus.add(_elem156);
                  }
                  iprot.readListEnd();
                }
                struct.setOrdStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PACKAGE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                  struct.packageIds = new ArrayList<Integer>(_list158.size);
                  int _elem159;
                  for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                  {
                    _elem159 = iprot.readI32();
                    struct.packageIds.add(_elem159);
                  }
                  iprot.readListEnd();
                }
                struct.setPackageIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PROVINCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                  struct.provinceIds = new ArrayList<Integer>(_list161.size);
                  int _elem162;
                  for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                  {
                    _elem162 = iprot.readI32();
                    struct.provinceIds.add(_elem162);
                  }
                  iprot.readListEnd();
                }
                struct.setProvinceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTime = iprot.readString();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // START_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startIndex = iprot.readI32();
                struct.setStartIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // COUNT_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.countPerPage = iprot.readI32();
                struct.setCountPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStudentsListByAccount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.email.size()));
            for (String _iter164 : struct.email)
            {
              oprot.writeString(_iter164);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.searchContent != null) {
          oprot.writeFieldBegin(SEARCH_CONTENT_FIELD_DESC);
          oprot.writeString(struct.searchContent);
          oprot.writeFieldEnd();
        }
        if (struct.ordStatus != null) {
          oprot.writeFieldBegin(ORD_STATUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ordStatus.size()));
            for (String _iter165 : struct.ordStatus)
            {
              oprot.writeString(_iter165);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.packageIds != null) {
          oprot.writeFieldBegin(PACKAGE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.packageIds.size()));
            for (int _iter166 : struct.packageIds)
            {
              oprot.writeI32(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.provinceIds != null) {
          oprot.writeFieldBegin(PROVINCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.provinceIds.size()));
            for (int _iter167 : struct.provinceIds)
            {
              oprot.writeI32(_iter167);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.startTime != null) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI32(struct.startIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.countPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStudentsListByAccount_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStudentsListByAccount_argsTupleScheme getScheme() {
        return new retrieveStudentsListByAccount_argsTupleScheme();
      }
    }

    private static class retrieveStudentsListByAccount_argsTupleScheme extends TupleScheme<retrieveStudentsListByAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsListByAccount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        if (struct.isSetSearchContent()) {
          optionals.set(1);
        }
        if (struct.isSetOrdStatus()) {
          optionals.set(2);
        }
        if (struct.isSetPackageIds()) {
          optionals.set(3);
        }
        if (struct.isSetProvinceIds()) {
          optionals.set(4);
        }
        if (struct.isSetStartTime()) {
          optionals.set(5);
        }
        if (struct.isSetEndTime()) {
          optionals.set(6);
        }
        if (struct.isSetStartIndex()) {
          optionals.set(7);
        }
        if (struct.isSetCountPerPage()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetEmail()) {
          {
            oprot.writeI32(struct.email.size());
            for (String _iter168 : struct.email)
            {
              oprot.writeString(_iter168);
            }
          }
        }
        if (struct.isSetSearchContent()) {
          oprot.writeString(struct.searchContent);
        }
        if (struct.isSetOrdStatus()) {
          {
            oprot.writeI32(struct.ordStatus.size());
            for (String _iter169 : struct.ordStatus)
            {
              oprot.writeString(_iter169);
            }
          }
        }
        if (struct.isSetPackageIds()) {
          {
            oprot.writeI32(struct.packageIds.size());
            for (int _iter170 : struct.packageIds)
            {
              oprot.writeI32(_iter170);
            }
          }
        }
        if (struct.isSetProvinceIds()) {
          {
            oprot.writeI32(struct.provinceIds.size());
            for (int _iter171 : struct.provinceIds)
            {
              oprot.writeI32(_iter171);
            }
          }
        }
        if (struct.isSetStartTime()) {
          oprot.writeString(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
        if (struct.isSetStartIndex()) {
          oprot.writeI32(struct.startIndex);
        }
        if (struct.isSetCountPerPage()) {
          oprot.writeI32(struct.countPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsListByAccount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.email = new ArrayList<String>(_list172.size);
            String _elem173;
            for (int _i174 = 0; _i174 < _list172.size; ++_i174)
            {
              _elem173 = iprot.readString();
              struct.email.add(_elem173);
            }
          }
          struct.setEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchContent = iprot.readString();
          struct.setSearchContentIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.ordStatus = new ArrayList<String>(_list175.size);
            String _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              _elem176 = iprot.readString();
              struct.ordStatus.add(_elem176);
            }
          }
          struct.setOrdStatusIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.packageIds = new ArrayList<Integer>(_list178.size);
            int _elem179;
            for (int _i180 = 0; _i180 < _list178.size; ++_i180)
            {
              _elem179 = iprot.readI32();
              struct.packageIds.add(_elem179);
            }
          }
          struct.setPackageIdsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.provinceIds = new ArrayList<Integer>(_list181.size);
            int _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = iprot.readI32();
              struct.provinceIds.add(_elem182);
            }
          }
          struct.setProvinceIdsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startTime = iprot.readString();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.startIndex = iprot.readI32();
          struct.setStartIndexIsSet(true);
        }
        if (incoming.get(8)) {
          struct.countPerPage = iprot.readI32();
          struct.setCountPerPageIsSet(true);
        }
      }
    }

  }

  public static class retrieveStudentsListByAccount_result implements org.apache.thrift.TBase<retrieveStudentsListByAccount_result, retrieveStudentsListByAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStudentsListByAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStudentsListByAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStudentsListByAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStudentsListByAccount_resultTupleSchemeFactory());
    }

    public TeacherServiceStudentResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeacherServiceStudentResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStudentsListByAccount_result.class, metaDataMap);
    }

    public retrieveStudentsListByAccount_result() {
    }

    public retrieveStudentsListByAccount_result(
      TeacherServiceStudentResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStudentsListByAccount_result(retrieveStudentsListByAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = new TeacherServiceStudentResult(other.success);
      }
    }

    public retrieveStudentsListByAccount_result deepCopy() {
      return new retrieveStudentsListByAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TeacherServiceStudentResult getSuccess() {
      return this.success;
    }

    public retrieveStudentsListByAccount_result setSuccess(TeacherServiceStudentResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TeacherServiceStudentResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStudentsListByAccount_result)
        return this.equals((retrieveStudentsListByAccount_result)that);
      return false;
    }

    public boolean equals(retrieveStudentsListByAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStudentsListByAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStudentsListByAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStudentsListByAccount_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStudentsListByAccount_resultStandardScheme getScheme() {
        return new retrieveStudentsListByAccount_resultStandardScheme();
      }
    }

    private static class retrieveStudentsListByAccount_resultStandardScheme extends StandardScheme<retrieveStudentsListByAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStudentsListByAccount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TeacherServiceStudentResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStudentsListByAccount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStudentsListByAccount_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStudentsListByAccount_resultTupleScheme getScheme() {
        return new retrieveStudentsListByAccount_resultTupleScheme();
      }
    }

    private static class retrieveStudentsListByAccount_resultTupleScheme extends TupleScheme<retrieveStudentsListByAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsListByAccount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsListByAccount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TeacherServiceStudentResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherInfoByAccount_args implements org.apache.thrift.TBase<retrieveTeacherInfoByAccount_args, retrieveTeacherInfoByAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherInfoByAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherInfoByAccount_args");

    private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherInfoByAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherInfoByAccount_argsTupleSchemeFactory());
    }

    public List<String> email; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAIL((short)1, "email");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAIL
            return EMAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherInfoByAccount_args.class, metaDataMap);
    }

    public retrieveTeacherInfoByAccount_args() {
    }

    public retrieveTeacherInfoByAccount_args(
      List<String> email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherInfoByAccount_args(retrieveTeacherInfoByAccount_args other) {
      if (other.isSetEmail()) {
        List<String> __this__email = new ArrayList<String>(other.email);
        this.email = __this__email;
      }
    }

    public retrieveTeacherInfoByAccount_args deepCopy() {
      return new retrieveTeacherInfoByAccount_args(this);
    }

    @Override
    public void clear() {
      this.email = null;
    }

    public int getEmailSize() {
      return (this.email == null) ? 0 : this.email.size();
    }

    public java.util.Iterator<String> getEmailIterator() {
      return (this.email == null) ? null : this.email.iterator();
    }

    public void addToEmail(String elem) {
      if (this.email == null) {
        this.email = new ArrayList<String>();
      }
      this.email.add(elem);
    }

    public List<String> getEmail() {
      return this.email;
    }

    public retrieveTeacherInfoByAccount_args setEmail(List<String> email) {
      this.email = email;
      return this;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAIL:
        return getEmail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAIL:
        return isSetEmail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherInfoByAccount_args)
        return this.equals((retrieveTeacherInfoByAccount_args)that);
      return false;
    }

    public boolean equals(retrieveTeacherInfoByAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_email = true && (isSetEmail());
      list.add(present_email);
      if (present_email)
        list.add(email);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherInfoByAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherInfoByAccount_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherInfoByAccount_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherInfoByAccount_argsStandardScheme getScheme() {
        return new retrieveTeacherInfoByAccount_argsStandardScheme();
      }
    }

    private static class retrieveTeacherInfoByAccount_argsStandardScheme extends StandardScheme<retrieveTeacherInfoByAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherInfoByAccount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.email = new ArrayList<String>(_list184.size);
                  String _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = iprot.readString();
                    struct.email.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherInfoByAccount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.email != null) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.email.size()));
            for (String _iter187 : struct.email)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherInfoByAccount_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherInfoByAccount_argsTupleScheme getScheme() {
        return new retrieveTeacherInfoByAccount_argsTupleScheme();
      }
    }

    private static class retrieveTeacherInfoByAccount_argsTupleScheme extends TupleScheme<retrieveTeacherInfoByAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherInfoByAccount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmail()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmail()) {
          {
            oprot.writeI32(struct.email.size());
            for (String _iter188 : struct.email)
            {
              oprot.writeString(_iter188);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherInfoByAccount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.email = new ArrayList<String>(_list189.size);
            String _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = iprot.readString();
              struct.email.add(_elem190);
            }
          }
          struct.setEmailIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherInfoByAccount_result implements org.apache.thrift.TBase<retrieveTeacherInfoByAccount_result, retrieveTeacherInfoByAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherInfoByAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherInfoByAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherInfoByAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherInfoByAccount_resultTupleSchemeFactory());
    }

    public List<TeacherInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeacherInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherInfoByAccount_result.class, metaDataMap);
    }

    public retrieveTeacherInfoByAccount_result() {
    }

    public retrieveTeacherInfoByAccount_result(
      List<TeacherInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherInfoByAccount_result(retrieveTeacherInfoByAccount_result other) {
      if (other.isSetSuccess()) {
        List<TeacherInfo> __this__success = new ArrayList<TeacherInfo>(other.success.size());
        for (TeacherInfo other_element : other.success) {
          __this__success.add(new TeacherInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveTeacherInfoByAccount_result deepCopy() {
      return new retrieveTeacherInfoByAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TeacherInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TeacherInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TeacherInfo>();
      }
      this.success.add(elem);
    }

    public List<TeacherInfo> getSuccess() {
      return this.success;
    }

    public retrieveTeacherInfoByAccount_result setSuccess(List<TeacherInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TeacherInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherInfoByAccount_result)
        return this.equals((retrieveTeacherInfoByAccount_result)that);
      return false;
    }

    public boolean equals(retrieveTeacherInfoByAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherInfoByAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherInfoByAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherInfoByAccount_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherInfoByAccount_resultStandardScheme getScheme() {
        return new retrieveTeacherInfoByAccount_resultStandardScheme();
      }
    }

    private static class retrieveTeacherInfoByAccount_resultStandardScheme extends StandardScheme<retrieveTeacherInfoByAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherInfoByAccount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new ArrayList<TeacherInfo>(_list192.size);
                  TeacherInfo _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new TeacherInfo();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherInfoByAccount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TeacherInfo _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherInfoByAccount_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherInfoByAccount_resultTupleScheme getScheme() {
        return new retrieveTeacherInfoByAccount_resultTupleScheme();
      }
    }

    private static class retrieveTeacherInfoByAccount_resultTupleScheme extends TupleScheme<retrieveTeacherInfoByAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherInfoByAccount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TeacherInfo _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherInfoByAccount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TeacherInfo>(_list197.size);
            TeacherInfo _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new TeacherInfo();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class judgeWaitForInsuranceByStudentId_args implements org.apache.thrift.TBase<judgeWaitForInsuranceByStudentId_args, judgeWaitForInsuranceByStudentId_args._Fields>, java.io.Serializable, Cloneable, Comparable<judgeWaitForInsuranceByStudentId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeWaitForInsuranceByStudentId_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeWaitForInsuranceByStudentId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeWaitForInsuranceByStudentId_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeWaitForInsuranceByStudentId_args.class, metaDataMap);
    }

    public judgeWaitForInsuranceByStudentId_args() {
    }

    public judgeWaitForInsuranceByStudentId_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeWaitForInsuranceByStudentId_args(judgeWaitForInsuranceByStudentId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public judgeWaitForInsuranceByStudentId_args deepCopy() {
      return new judgeWaitForInsuranceByStudentId_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public judgeWaitForInsuranceByStudentId_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeWaitForInsuranceByStudentId_args)
        return this.equals((judgeWaitForInsuranceByStudentId_args)that);
      return false;
    }

    public boolean equals(judgeWaitForInsuranceByStudentId_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeWaitForInsuranceByStudentId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeWaitForInsuranceByStudentId_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeWaitForInsuranceByStudentId_argsStandardSchemeFactory implements SchemeFactory {
      public judgeWaitForInsuranceByStudentId_argsStandardScheme getScheme() {
        return new judgeWaitForInsuranceByStudentId_argsStandardScheme();
      }
    }

    private static class judgeWaitForInsuranceByStudentId_argsStandardScheme extends StandardScheme<judgeWaitForInsuranceByStudentId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeWaitForInsuranceByStudentId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeWaitForInsuranceByStudentId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeWaitForInsuranceByStudentId_argsTupleSchemeFactory implements SchemeFactory {
      public judgeWaitForInsuranceByStudentId_argsTupleScheme getScheme() {
        return new judgeWaitForInsuranceByStudentId_argsTupleScheme();
      }
    }

    private static class judgeWaitForInsuranceByStudentId_argsTupleScheme extends TupleScheme<judgeWaitForInsuranceByStudentId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeWaitForInsuranceByStudentId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeWaitForInsuranceByStudentId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class judgeWaitForInsuranceByStudentId_result implements org.apache.thrift.TBase<judgeWaitForInsuranceByStudentId_result, judgeWaitForInsuranceByStudentId_result._Fields>, java.io.Serializable, Cloneable, Comparable<judgeWaitForInsuranceByStudentId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeWaitForInsuranceByStudentId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeWaitForInsuranceByStudentId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeWaitForInsuranceByStudentId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeWaitForInsuranceByStudentId_result.class, metaDataMap);
    }

    public judgeWaitForInsuranceByStudentId_result() {
    }

    public judgeWaitForInsuranceByStudentId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeWaitForInsuranceByStudentId_result(judgeWaitForInsuranceByStudentId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public judgeWaitForInsuranceByStudentId_result deepCopy() {
      return new judgeWaitForInsuranceByStudentId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public judgeWaitForInsuranceByStudentId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeWaitForInsuranceByStudentId_result)
        return this.equals((judgeWaitForInsuranceByStudentId_result)that);
      return false;
    }

    public boolean equals(judgeWaitForInsuranceByStudentId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeWaitForInsuranceByStudentId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeWaitForInsuranceByStudentId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeWaitForInsuranceByStudentId_resultStandardSchemeFactory implements SchemeFactory {
      public judgeWaitForInsuranceByStudentId_resultStandardScheme getScheme() {
        return new judgeWaitForInsuranceByStudentId_resultStandardScheme();
      }
    }

    private static class judgeWaitForInsuranceByStudentId_resultStandardScheme extends StandardScheme<judgeWaitForInsuranceByStudentId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeWaitForInsuranceByStudentId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeWaitForInsuranceByStudentId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeWaitForInsuranceByStudentId_resultTupleSchemeFactory implements SchemeFactory {
      public judgeWaitForInsuranceByStudentId_resultTupleScheme getScheme() {
        return new judgeWaitForInsuranceByStudentId_resultTupleScheme();
      }
    }

    private static class judgeWaitForInsuranceByStudentId_resultTupleScheme extends TupleScheme<judgeWaitForInsuranceByStudentId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeWaitForInsuranceByStudentId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeWaitForInsuranceByStudentId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStudentsInfoByImId_args implements org.apache.thrift.TBase<retrieveStudentsInfoByImId_args, retrieveStudentsInfoByImId_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStudentsInfoByImId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStudentsInfoByImId_args");

    private static final org.apache.thrift.protocol.TField IM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("imIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStudentsInfoByImId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStudentsInfoByImId_argsTupleSchemeFactory());
    }

    public List<String> imIds; // required
    public List<Integer> userIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IM_IDS((short)1, "imIds"),
      USER_IDS((short)2, "userIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IM_IDS
            return IM_IDS;
          case 2: // USER_IDS
            return USER_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IM_IDS, new org.apache.thrift.meta_data.FieldMetaData("imIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStudentsInfoByImId_args.class, metaDataMap);
    }

    public retrieveStudentsInfoByImId_args() {
    }

    public retrieveStudentsInfoByImId_args(
      List<String> imIds,
      List<Integer> userIds)
    {
      this();
      this.imIds = imIds;
      this.userIds = userIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStudentsInfoByImId_args(retrieveStudentsInfoByImId_args other) {
      if (other.isSetImIds()) {
        List<String> __this__imIds = new ArrayList<String>(other.imIds);
        this.imIds = __this__imIds;
      }
      if (other.isSetUserIds()) {
        List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
        this.userIds = __this__userIds;
      }
    }

    public retrieveStudentsInfoByImId_args deepCopy() {
      return new retrieveStudentsInfoByImId_args(this);
    }

    @Override
    public void clear() {
      this.imIds = null;
      this.userIds = null;
    }

    public int getImIdsSize() {
      return (this.imIds == null) ? 0 : this.imIds.size();
    }

    public java.util.Iterator<String> getImIdsIterator() {
      return (this.imIds == null) ? null : this.imIds.iterator();
    }

    public void addToImIds(String elem) {
      if (this.imIds == null) {
        this.imIds = new ArrayList<String>();
      }
      this.imIds.add(elem);
    }

    public List<String> getImIds() {
      return this.imIds;
    }

    public retrieveStudentsInfoByImId_args setImIds(List<String> imIds) {
      this.imIds = imIds;
      return this;
    }

    public void unsetImIds() {
      this.imIds = null;
    }

    /** Returns true if field imIds is set (has been assigned a value) and false otherwise */
    public boolean isSetImIds() {
      return this.imIds != null;
    }

    public void setImIdsIsSet(boolean value) {
      if (!value) {
        this.imIds = null;
      }
    }

    public int getUserIdsSize() {
      return (this.userIds == null) ? 0 : this.userIds.size();
    }

    public java.util.Iterator<Integer> getUserIdsIterator() {
      return (this.userIds == null) ? null : this.userIds.iterator();
    }

    public void addToUserIds(int elem) {
      if (this.userIds == null) {
        this.userIds = new ArrayList<Integer>();
      }
      this.userIds.add(elem);
    }

    public List<Integer> getUserIds() {
      return this.userIds;
    }

    public retrieveStudentsInfoByImId_args setUserIds(List<Integer> userIds) {
      this.userIds = userIds;
      return this;
    }

    public void unsetUserIds() {
      this.userIds = null;
    }

    /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
    public boolean isSetUserIds() {
      return this.userIds != null;
    }

    public void setUserIdsIsSet(boolean value) {
      if (!value) {
        this.userIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IM_IDS:
        if (value == null) {
          unsetImIds();
        } else {
          setImIds((List<String>)value);
        }
        break;

      case USER_IDS:
        if (value == null) {
          unsetUserIds();
        } else {
          setUserIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IM_IDS:
        return getImIds();

      case USER_IDS:
        return getUserIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IM_IDS:
        return isSetImIds();
      case USER_IDS:
        return isSetUserIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStudentsInfoByImId_args)
        return this.equals((retrieveStudentsInfoByImId_args)that);
      return false;
    }

    public boolean equals(retrieveStudentsInfoByImId_args that) {
      if (that == null)
        return false;

      boolean this_present_imIds = true && this.isSetImIds();
      boolean that_present_imIds = true && that.isSetImIds();
      if (this_present_imIds || that_present_imIds) {
        if (!(this_present_imIds && that_present_imIds))
          return false;
        if (!this.imIds.equals(that.imIds))
          return false;
      }

      boolean this_present_userIds = true && this.isSetUserIds();
      boolean that_present_userIds = true && that.isSetUserIds();
      if (this_present_userIds || that_present_userIds) {
        if (!(this_present_userIds && that_present_userIds))
          return false;
        if (!this.userIds.equals(that.userIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_imIds = true && (isSetImIds());
      list.add(present_imIds);
      if (present_imIds)
        list.add(imIds);

      boolean present_userIds = true && (isSetUserIds());
      list.add(present_userIds);
      if (present_userIds)
        list.add(userIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStudentsInfoByImId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImIds()).compareTo(other.isSetImIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imIds, other.imIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStudentsInfoByImId_args(");
      boolean first = true;

      sb.append("imIds:");
      if (this.imIds == null) {
        sb.append("null");
      } else {
        sb.append(this.imIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userIds:");
      if (this.userIds == null) {
        sb.append("null");
      } else {
        sb.append(this.userIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStudentsInfoByImId_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStudentsInfoByImId_argsStandardScheme getScheme() {
        return new retrieveStudentsInfoByImId_argsStandardScheme();
      }
    }

    private static class retrieveStudentsInfoByImId_argsStandardScheme extends StandardScheme<retrieveStudentsInfoByImId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStudentsInfoByImId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IM_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.imIds = new ArrayList<String>(_list200.size);
                  String _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = iprot.readString();
                    struct.imIds.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setImIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list203 = iprot.readListBegin();
                  struct.userIds = new ArrayList<Integer>(_list203.size);
                  int _elem204;
                  for (int _i205 = 0; _i205 < _list203.size; ++_i205)
                  {
                    _elem204 = iprot.readI32();
                    struct.userIds.add(_elem204);
                  }
                  iprot.readListEnd();
                }
                struct.setUserIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStudentsInfoByImId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imIds != null) {
          oprot.writeFieldBegin(IM_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.imIds.size()));
            for (String _iter206 : struct.imIds)
            {
              oprot.writeString(_iter206);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userIds != null) {
          oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
            for (int _iter207 : struct.userIds)
            {
              oprot.writeI32(_iter207);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStudentsInfoByImId_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStudentsInfoByImId_argsTupleScheme getScheme() {
        return new retrieveStudentsInfoByImId_argsTupleScheme();
      }
    }

    private static class retrieveStudentsInfoByImId_argsTupleScheme extends TupleScheme<retrieveStudentsInfoByImId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsInfoByImId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImIds()) {
          optionals.set(0);
        }
        if (struct.isSetUserIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImIds()) {
          {
            oprot.writeI32(struct.imIds.size());
            for (String _iter208 : struct.imIds)
            {
              oprot.writeString(_iter208);
            }
          }
        }
        if (struct.isSetUserIds()) {
          {
            oprot.writeI32(struct.userIds.size());
            for (int _iter209 : struct.userIds)
            {
              oprot.writeI32(_iter209);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsInfoByImId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list210 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.imIds = new ArrayList<String>(_list210.size);
            String _elem211;
            for (int _i212 = 0; _i212 < _list210.size; ++_i212)
            {
              _elem211 = iprot.readString();
              struct.imIds.add(_elem211);
            }
          }
          struct.setImIdsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.userIds = new ArrayList<Integer>(_list213.size);
            int _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = iprot.readI32();
              struct.userIds.add(_elem214);
            }
          }
          struct.setUserIdsIsSet(true);
        }
      }
    }

  }

  public static class retrieveStudentsInfoByImId_result implements org.apache.thrift.TBase<retrieveStudentsInfoByImId_result, retrieveStudentsInfoByImId_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStudentsInfoByImId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStudentsInfoByImId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStudentsInfoByImId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStudentsInfoByImId_resultTupleSchemeFactory());
    }

    public List<Student> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStudentsInfoByImId_result.class, metaDataMap);
    }

    public retrieveStudentsInfoByImId_result() {
    }

    public retrieveStudentsInfoByImId_result(
      List<Student> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStudentsInfoByImId_result(retrieveStudentsInfoByImId_result other) {
      if (other.isSetSuccess()) {
        List<Student> __this__success = new ArrayList<Student>(other.success.size());
        for (Student other_element : other.success) {
          __this__success.add(new Student(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveStudentsInfoByImId_result deepCopy() {
      return new retrieveStudentsInfoByImId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Student> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Student elem) {
      if (this.success == null) {
        this.success = new ArrayList<Student>();
      }
      this.success.add(elem);
    }

    public List<Student> getSuccess() {
      return this.success;
    }

    public retrieveStudentsInfoByImId_result setSuccess(List<Student> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Student>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStudentsInfoByImId_result)
        return this.equals((retrieveStudentsInfoByImId_result)that);
      return false;
    }

    public boolean equals(retrieveStudentsInfoByImId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStudentsInfoByImId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStudentsInfoByImId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStudentsInfoByImId_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStudentsInfoByImId_resultStandardScheme getScheme() {
        return new retrieveStudentsInfoByImId_resultStandardScheme();
      }
    }

    private static class retrieveStudentsInfoByImId_resultStandardScheme extends StandardScheme<retrieveStudentsInfoByImId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStudentsInfoByImId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new ArrayList<Student>(_list216.size);
                  Student _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new Student();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStudentsInfoByImId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Student _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStudentsInfoByImId_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStudentsInfoByImId_resultTupleScheme getScheme() {
        return new retrieveStudentsInfoByImId_resultTupleScheme();
      }
    }

    private static class retrieveStudentsInfoByImId_resultTupleScheme extends TupleScheme<retrieveStudentsInfoByImId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsInfoByImId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Student _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStudentsInfoByImId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Student>(_list221.size);
            Student _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new Student();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveAllProvinces_args implements org.apache.thrift.TBase<retrieveAllProvinces_args, retrieveAllProvinces_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveAllProvinces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveAllProvinces_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveAllProvinces_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveAllProvinces_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveAllProvinces_args.class, metaDataMap);
    }

    public retrieveAllProvinces_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveAllProvinces_args(retrieveAllProvinces_args other) {
    }

    public retrieveAllProvinces_args deepCopy() {
      return new retrieveAllProvinces_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveAllProvinces_args)
        return this.equals((retrieveAllProvinces_args)that);
      return false;
    }

    public boolean equals(retrieveAllProvinces_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveAllProvinces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveAllProvinces_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveAllProvinces_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveAllProvinces_argsStandardScheme getScheme() {
        return new retrieveAllProvinces_argsStandardScheme();
      }
    }

    private static class retrieveAllProvinces_argsStandardScheme extends StandardScheme<retrieveAllProvinces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveAllProvinces_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveAllProvinces_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveAllProvinces_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveAllProvinces_argsTupleScheme getScheme() {
        return new retrieveAllProvinces_argsTupleScheme();
      }
    }

    private static class retrieveAllProvinces_argsTupleScheme extends TupleScheme<retrieveAllProvinces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveAllProvinces_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveAllProvinces_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class retrieveAllProvinces_result implements org.apache.thrift.TBase<retrieveAllProvinces_result, retrieveAllProvinces_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveAllProvinces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveAllProvinces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveAllProvinces_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveAllProvinces_resultTupleSchemeFactory());
    }

    public List<Province> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Province.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveAllProvinces_result.class, metaDataMap);
    }

    public retrieveAllProvinces_result() {
    }

    public retrieveAllProvinces_result(
      List<Province> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveAllProvinces_result(retrieveAllProvinces_result other) {
      if (other.isSetSuccess()) {
        List<Province> __this__success = new ArrayList<Province>(other.success.size());
        for (Province other_element : other.success) {
          __this__success.add(new Province(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveAllProvinces_result deepCopy() {
      return new retrieveAllProvinces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Province> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Province elem) {
      if (this.success == null) {
        this.success = new ArrayList<Province>();
      }
      this.success.add(elem);
    }

    public List<Province> getSuccess() {
      return this.success;
    }

    public retrieveAllProvinces_result setSuccess(List<Province> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Province>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveAllProvinces_result)
        return this.equals((retrieveAllProvinces_result)that);
      return false;
    }

    public boolean equals(retrieveAllProvinces_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveAllProvinces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveAllProvinces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveAllProvinces_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveAllProvinces_resultStandardScheme getScheme() {
        return new retrieveAllProvinces_resultStandardScheme();
      }
    }

    private static class retrieveAllProvinces_resultStandardScheme extends StandardScheme<retrieveAllProvinces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveAllProvinces_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.success = new ArrayList<Province>(_list224.size);
                  Province _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = new Province();
                    _elem225.read(iprot);
                    struct.success.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveAllProvinces_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Province _iter227 : struct.success)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveAllProvinces_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveAllProvinces_resultTupleScheme getScheme() {
        return new retrieveAllProvinces_resultTupleScheme();
      }
    }

    private static class retrieveAllProvinces_resultTupleScheme extends TupleScheme<retrieveAllProvinces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveAllProvinces_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Province _iter228 : struct.success)
            {
              _iter228.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveAllProvinces_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Province>(_list229.size);
            Province _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = new Province();
              _elem230.read(iprot);
              struct.success.add(_elem230);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrievePackagesByAccount_args implements org.apache.thrift.TBase<retrievePackagesByAccount_args, retrievePackagesByAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrievePackagesByAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrievePackagesByAccount_args");

    private static final org.apache.thrift.protocol.TField EMAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("emails", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrievePackagesByAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrievePackagesByAccount_argsTupleSchemeFactory());
    }

    public List<String> emails; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMAILS((short)1, "emails");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMAILS
            return EMAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMAILS, new org.apache.thrift.meta_data.FieldMetaData("emails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrievePackagesByAccount_args.class, metaDataMap);
    }

    public retrievePackagesByAccount_args() {
    }

    public retrievePackagesByAccount_args(
      List<String> emails)
    {
      this();
      this.emails = emails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrievePackagesByAccount_args(retrievePackagesByAccount_args other) {
      if (other.isSetEmails()) {
        List<String> __this__emails = new ArrayList<String>(other.emails);
        this.emails = __this__emails;
      }
    }

    public retrievePackagesByAccount_args deepCopy() {
      return new retrievePackagesByAccount_args(this);
    }

    @Override
    public void clear() {
      this.emails = null;
    }

    public int getEmailsSize() {
      return (this.emails == null) ? 0 : this.emails.size();
    }

    public java.util.Iterator<String> getEmailsIterator() {
      return (this.emails == null) ? null : this.emails.iterator();
    }

    public void addToEmails(String elem) {
      if (this.emails == null) {
        this.emails = new ArrayList<String>();
      }
      this.emails.add(elem);
    }

    public List<String> getEmails() {
      return this.emails;
    }

    public retrievePackagesByAccount_args setEmails(List<String> emails) {
      this.emails = emails;
      return this;
    }

    public void unsetEmails() {
      this.emails = null;
    }

    /** Returns true if field emails is set (has been assigned a value) and false otherwise */
    public boolean isSetEmails() {
      return this.emails != null;
    }

    public void setEmailsIsSet(boolean value) {
      if (!value) {
        this.emails = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMAILS:
        if (value == null) {
          unsetEmails();
        } else {
          setEmails((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMAILS:
        return getEmails();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMAILS:
        return isSetEmails();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrievePackagesByAccount_args)
        return this.equals((retrievePackagesByAccount_args)that);
      return false;
    }

    public boolean equals(retrievePackagesByAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_emails = true && this.isSetEmails();
      boolean that_present_emails = true && that.isSetEmails();
      if (this_present_emails || that_present_emails) {
        if (!(this_present_emails && that_present_emails))
          return false;
        if (!this.emails.equals(that.emails))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_emails = true && (isSetEmails());
      list.add(present_emails);
      if (present_emails)
        list.add(emails);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrievePackagesByAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmails()).compareTo(other.isSetEmails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emails, other.emails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrievePackagesByAccount_args(");
      boolean first = true;

      sb.append("emails:");
      if (this.emails == null) {
        sb.append("null");
      } else {
        sb.append(this.emails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrievePackagesByAccount_argsStandardSchemeFactory implements SchemeFactory {
      public retrievePackagesByAccount_argsStandardScheme getScheme() {
        return new retrievePackagesByAccount_argsStandardScheme();
      }
    }

    private static class retrievePackagesByAccount_argsStandardScheme extends StandardScheme<retrievePackagesByAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrievePackagesByAccount_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.emails = new ArrayList<String>(_list232.size);
                  String _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = iprot.readString();
                    struct.emails.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setEmailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrievePackagesByAccount_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emails != null) {
          oprot.writeFieldBegin(EMAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.emails.size()));
            for (String _iter235 : struct.emails)
            {
              oprot.writeString(_iter235);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrievePackagesByAccount_argsTupleSchemeFactory implements SchemeFactory {
      public retrievePackagesByAccount_argsTupleScheme getScheme() {
        return new retrievePackagesByAccount_argsTupleScheme();
      }
    }

    private static class retrievePackagesByAccount_argsTupleScheme extends TupleScheme<retrievePackagesByAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrievePackagesByAccount_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmails()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmails()) {
          {
            oprot.writeI32(struct.emails.size());
            for (String _iter236 : struct.emails)
            {
              oprot.writeString(_iter236);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrievePackagesByAccount_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.emails = new ArrayList<String>(_list237.size);
            String _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = iprot.readString();
              struct.emails.add(_elem238);
            }
          }
          struct.setEmailsIsSet(true);
        }
      }
    }

  }

  public static class retrievePackagesByAccount_result implements org.apache.thrift.TBase<retrievePackagesByAccount_result, retrievePackagesByAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrievePackagesByAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrievePackagesByAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrievePackagesByAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrievePackagesByAccount_resultTupleSchemeFactory());
    }

    public List<BaseIdNameDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseIdNameDto.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrievePackagesByAccount_result.class, metaDataMap);
    }

    public retrievePackagesByAccount_result() {
    }

    public retrievePackagesByAccount_result(
      List<BaseIdNameDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrievePackagesByAccount_result(retrievePackagesByAccount_result other) {
      if (other.isSetSuccess()) {
        List<BaseIdNameDto> __this__success = new ArrayList<BaseIdNameDto>(other.success.size());
        for (BaseIdNameDto other_element : other.success) {
          __this__success.add(new BaseIdNameDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrievePackagesByAccount_result deepCopy() {
      return new retrievePackagesByAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BaseIdNameDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BaseIdNameDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<BaseIdNameDto>();
      }
      this.success.add(elem);
    }

    public List<BaseIdNameDto> getSuccess() {
      return this.success;
    }

    public retrievePackagesByAccount_result setSuccess(List<BaseIdNameDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BaseIdNameDto>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrievePackagesByAccount_result)
        return this.equals((retrievePackagesByAccount_result)that);
      return false;
    }

    public boolean equals(retrievePackagesByAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrievePackagesByAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrievePackagesByAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrievePackagesByAccount_resultStandardSchemeFactory implements SchemeFactory {
      public retrievePackagesByAccount_resultStandardScheme getScheme() {
        return new retrievePackagesByAccount_resultStandardScheme();
      }
    }

    private static class retrievePackagesByAccount_resultStandardScheme extends StandardScheme<retrievePackagesByAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrievePackagesByAccount_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new ArrayList<BaseIdNameDto>(_list240.size);
                  BaseIdNameDto _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new BaseIdNameDto();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrievePackagesByAccount_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BaseIdNameDto _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrievePackagesByAccount_resultTupleSchemeFactory implements SchemeFactory {
      public retrievePackagesByAccount_resultTupleScheme getScheme() {
        return new retrievePackagesByAccount_resultTupleScheme();
      }
    }

    private static class retrievePackagesByAccount_resultTupleScheme extends TupleScheme<retrievePackagesByAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrievePackagesByAccount_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BaseIdNameDto _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrievePackagesByAccount_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BaseIdNameDto>(_list245.size);
            BaseIdNameDto _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new BaseIdNameDto();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class judgeNPSAndComplainByUserId_args implements org.apache.thrift.TBase<judgeNPSAndComplainByUserId_args, judgeNPSAndComplainByUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<judgeNPSAndComplainByUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeNPSAndComplainByUserId_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeNPSAndComplainByUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeNPSAndComplainByUserId_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeNPSAndComplainByUserId_args.class, metaDataMap);
    }

    public judgeNPSAndComplainByUserId_args() {
    }

    public judgeNPSAndComplainByUserId_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeNPSAndComplainByUserId_args(judgeNPSAndComplainByUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public judgeNPSAndComplainByUserId_args deepCopy() {
      return new judgeNPSAndComplainByUserId_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public judgeNPSAndComplainByUserId_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeNPSAndComplainByUserId_args)
        return this.equals((judgeNPSAndComplainByUserId_args)that);
      return false;
    }

    public boolean equals(judgeNPSAndComplainByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeNPSAndComplainByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeNPSAndComplainByUserId_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeNPSAndComplainByUserId_argsStandardSchemeFactory implements SchemeFactory {
      public judgeNPSAndComplainByUserId_argsStandardScheme getScheme() {
        return new judgeNPSAndComplainByUserId_argsStandardScheme();
      }
    }

    private static class judgeNPSAndComplainByUserId_argsStandardScheme extends StandardScheme<judgeNPSAndComplainByUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeNPSAndComplainByUserId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeNPSAndComplainByUserId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeNPSAndComplainByUserId_argsTupleSchemeFactory implements SchemeFactory {
      public judgeNPSAndComplainByUserId_argsTupleScheme getScheme() {
        return new judgeNPSAndComplainByUserId_argsTupleScheme();
      }
    }

    private static class judgeNPSAndComplainByUserId_argsTupleScheme extends TupleScheme<judgeNPSAndComplainByUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeNPSAndComplainByUserId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeNPSAndComplainByUserId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class judgeNPSAndComplainByUserId_result implements org.apache.thrift.TBase<judgeNPSAndComplainByUserId_result, judgeNPSAndComplainByUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<judgeNPSAndComplainByUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeNPSAndComplainByUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeNPSAndComplainByUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeNPSAndComplainByUserId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeNPSAndComplainByUserId_result.class, metaDataMap);
    }

    public judgeNPSAndComplainByUserId_result() {
    }

    public judgeNPSAndComplainByUserId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeNPSAndComplainByUserId_result(judgeNPSAndComplainByUserId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public judgeNPSAndComplainByUserId_result deepCopy() {
      return new judgeNPSAndComplainByUserId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public judgeNPSAndComplainByUserId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeNPSAndComplainByUserId_result)
        return this.equals((judgeNPSAndComplainByUserId_result)that);
      return false;
    }

    public boolean equals(judgeNPSAndComplainByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeNPSAndComplainByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeNPSAndComplainByUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeNPSAndComplainByUserId_resultStandardSchemeFactory implements SchemeFactory {
      public judgeNPSAndComplainByUserId_resultStandardScheme getScheme() {
        return new judgeNPSAndComplainByUserId_resultStandardScheme();
      }
    }

    private static class judgeNPSAndComplainByUserId_resultStandardScheme extends StandardScheme<judgeNPSAndComplainByUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeNPSAndComplainByUserId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeNPSAndComplainByUserId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeNPSAndComplainByUserId_resultTupleSchemeFactory implements SchemeFactory {
      public judgeNPSAndComplainByUserId_resultTupleScheme getScheme() {
        return new judgeNPSAndComplainByUserId_resultTupleScheme();
      }
    }

    private static class judgeNPSAndComplainByUserId_resultTupleScheme extends TupleScheme<judgeNPSAndComplainByUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeNPSAndComplainByUserId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeNPSAndComplainByUserId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class judgeInstructorRelationWithUserId_args implements org.apache.thrift.TBase<judgeInstructorRelationWithUserId_args, judgeInstructorRelationWithUserId_args._Fields>, java.io.Serializable, Cloneable, Comparable<judgeInstructorRelationWithUserId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeInstructorRelationWithUserId_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TEACHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeInstructorRelationWithUserId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeInstructorRelationWithUserId_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int teacherId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      TEACHER_ID((short)2, "teacherId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // TEACHER_ID
            return TEACHER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __TEACHERID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEACHER_ID, new org.apache.thrift.meta_data.FieldMetaData("teacherId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeInstructorRelationWithUserId_args.class, metaDataMap);
    }

    public judgeInstructorRelationWithUserId_args() {
    }

    public judgeInstructorRelationWithUserId_args(
      int userId,
      int teacherId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeInstructorRelationWithUserId_args(judgeInstructorRelationWithUserId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.teacherId = other.teacherId;
    }

    public judgeInstructorRelationWithUserId_args deepCopy() {
      return new judgeInstructorRelationWithUserId_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setTeacherIdIsSet(false);
      this.teacherId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public judgeInstructorRelationWithUserId_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getTeacherId() {
      return this.teacherId;
    }

    public judgeInstructorRelationWithUserId_args setTeacherId(int teacherId) {
      this.teacherId = teacherId;
      setTeacherIdIsSet(true);
      return this;
    }

    public void unsetTeacherId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    /** Returns true if field teacherId is set (has been assigned a value) and false otherwise */
    public boolean isSetTeacherId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEACHERID_ISSET_ID);
    }

    public void setTeacherIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEACHERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case TEACHER_ID:
        if (value == null) {
          unsetTeacherId();
        } else {
          setTeacherId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case TEACHER_ID:
        return getTeacherId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case TEACHER_ID:
        return isSetTeacherId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeInstructorRelationWithUserId_args)
        return this.equals((judgeInstructorRelationWithUserId_args)that);
      return false;
    }

    public boolean equals(judgeInstructorRelationWithUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_teacherId = true;
      boolean that_present_teacherId = true;
      if (this_present_teacherId || that_present_teacherId) {
        if (!(this_present_teacherId && that_present_teacherId))
          return false;
        if (this.teacherId != that.teacherId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_teacherId = true;
      list.add(present_teacherId);
      if (present_teacherId)
        list.add(teacherId);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeInstructorRelationWithUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTeacherId()).compareTo(other.isSetTeacherId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeacherId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherId, other.teacherId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeInstructorRelationWithUserId_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("teacherId:");
      sb.append(this.teacherId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeInstructorRelationWithUserId_argsStandardSchemeFactory implements SchemeFactory {
      public judgeInstructorRelationWithUserId_argsStandardScheme getScheme() {
        return new judgeInstructorRelationWithUserId_argsStandardScheme();
      }
    }

    private static class judgeInstructorRelationWithUserId_argsStandardScheme extends StandardScheme<judgeInstructorRelationWithUserId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeInstructorRelationWithUserId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEACHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.teacherId = iprot.readI32();
                struct.setTeacherIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeInstructorRelationWithUserId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TEACHER_ID_FIELD_DESC);
        oprot.writeI32(struct.teacherId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeInstructorRelationWithUserId_argsTupleSchemeFactory implements SchemeFactory {
      public judgeInstructorRelationWithUserId_argsTupleScheme getScheme() {
        return new judgeInstructorRelationWithUserId_argsTupleScheme();
      }
    }

    private static class judgeInstructorRelationWithUserId_argsTupleScheme extends TupleScheme<judgeInstructorRelationWithUserId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeInstructorRelationWithUserId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetTeacherId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetTeacherId()) {
          oprot.writeI32(struct.teacherId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeInstructorRelationWithUserId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.teacherId = iprot.readI32();
          struct.setTeacherIdIsSet(true);
        }
      }
    }

  }

  public static class judgeInstructorRelationWithUserId_result implements org.apache.thrift.TBase<judgeInstructorRelationWithUserId_result, judgeInstructorRelationWithUserId_result._Fields>, java.io.Serializable, Cloneable, Comparable<judgeInstructorRelationWithUserId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("judgeInstructorRelationWithUserId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new judgeInstructorRelationWithUserId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new judgeInstructorRelationWithUserId_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(judgeInstructorRelationWithUserId_result.class, metaDataMap);
    }

    public judgeInstructorRelationWithUserId_result() {
    }

    public judgeInstructorRelationWithUserId_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public judgeInstructorRelationWithUserId_result(judgeInstructorRelationWithUserId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public judgeInstructorRelationWithUserId_result deepCopy() {
      return new judgeInstructorRelationWithUserId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public judgeInstructorRelationWithUserId_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof judgeInstructorRelationWithUserId_result)
        return this.equals((judgeInstructorRelationWithUserId_result)that);
      return false;
    }

    public boolean equals(judgeInstructorRelationWithUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(judgeInstructorRelationWithUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("judgeInstructorRelationWithUserId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class judgeInstructorRelationWithUserId_resultStandardSchemeFactory implements SchemeFactory {
      public judgeInstructorRelationWithUserId_resultStandardScheme getScheme() {
        return new judgeInstructorRelationWithUserId_resultStandardScheme();
      }
    }

    private static class judgeInstructorRelationWithUserId_resultStandardScheme extends StandardScheme<judgeInstructorRelationWithUserId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, judgeInstructorRelationWithUserId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, judgeInstructorRelationWithUserId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class judgeInstructorRelationWithUserId_resultTupleSchemeFactory implements SchemeFactory {
      public judgeInstructorRelationWithUserId_resultTupleScheme getScheme() {
        return new judgeInstructorRelationWithUserId_resultTupleScheme();
      }
    }

    private static class judgeInstructorRelationWithUserId_resultTupleScheme extends TupleScheme<judgeInstructorRelationWithUserId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, judgeInstructorRelationWithUserId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, judgeInstructorRelationWithUserId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserInfoById_args implements org.apache.thrift.TBase<getUserInfoById_args, getUserInfoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoById_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfoById_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoById_args.class, metaDataMap);
    }

    public getUserInfoById_args() {
    }

    public getUserInfoById_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoById_args(getUserInfoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getUserInfoById_args deepCopy() {
      return new getUserInfoById_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getUserInfoById_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoById_args)
        return this.equals((getUserInfoById_args)that);
      return false;
    }

    public boolean equals(getUserInfoById_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfoById_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoById_argsStandardSchemeFactory implements SchemeFactory {
      public getUserInfoById_argsStandardScheme getScheme() {
        return new getUserInfoById_argsStandardScheme();
      }
    }

    private static class getUserInfoById_argsStandardScheme extends StandardScheme<getUserInfoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoById_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoById_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoById_argsTupleSchemeFactory implements SchemeFactory {
      public getUserInfoById_argsTupleScheme getScheme() {
        return new getUserInfoById_argsTupleScheme();
      }
    }

    private static class getUserInfoById_argsTupleScheme extends TupleScheme<getUserInfoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getUserInfoById_result implements org.apache.thrift.TBase<getUserInfoById_result, getUserInfoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInfoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInfoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInfoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInfoById_resultTupleSchemeFactory());
    }

    public StuOrderInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuOrderInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInfoById_result.class, metaDataMap);
    }

    public getUserInfoById_result() {
    }

    public getUserInfoById_result(
      StuOrderInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInfoById_result(getUserInfoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new StuOrderInfo(other.success);
      }
    }

    public getUserInfoById_result deepCopy() {
      return new getUserInfoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StuOrderInfo getSuccess() {
      return this.success;
    }

    public getUserInfoById_result setSuccess(StuOrderInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StuOrderInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInfoById_result)
        return this.equals((getUserInfoById_result)that);
      return false;
    }

    public boolean equals(getUserInfoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserInfoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInfoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInfoById_resultStandardSchemeFactory implements SchemeFactory {
      public getUserInfoById_resultStandardScheme getScheme() {
        return new getUserInfoById_resultStandardScheme();
      }
    }

    private static class getUserInfoById_resultStandardScheme extends StandardScheme<getUserInfoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInfoById_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StuOrderInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInfoById_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInfoById_resultTupleSchemeFactory implements SchemeFactory {
      public getUserInfoById_resultTupleScheme getScheme() {
        return new getUserInfoById_resultTupleScheme();
      }
    }

    private static class getUserInfoById_resultTupleScheme extends TupleScheme<getUserInfoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInfoById_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StuOrderInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEvaluateCountByStuIds_args implements org.apache.thrift.TBase<getEvaluateCountByStuIds_args, getEvaluateCountByStuIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEvaluateCountByStuIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvaluateCountByStuIds_args");

    private static final org.apache.thrift.protocol.TField STU_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stuIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvaluateCountByStuIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvaluateCountByStuIds_argsTupleSchemeFactory());
    }

    public List<Integer> stuIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_IDS((short)1, "stuIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_IDS
            return STU_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_IDS, new org.apache.thrift.meta_data.FieldMetaData("stuIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvaluateCountByStuIds_args.class, metaDataMap);
    }

    public getEvaluateCountByStuIds_args() {
    }

    public getEvaluateCountByStuIds_args(
      List<Integer> stuIds)
    {
      this();
      this.stuIds = stuIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvaluateCountByStuIds_args(getEvaluateCountByStuIds_args other) {
      if (other.isSetStuIds()) {
        List<Integer> __this__stuIds = new ArrayList<Integer>(other.stuIds);
        this.stuIds = __this__stuIds;
      }
    }

    public getEvaluateCountByStuIds_args deepCopy() {
      return new getEvaluateCountByStuIds_args(this);
    }

    @Override
    public void clear() {
      this.stuIds = null;
    }

    public int getStuIdsSize() {
      return (this.stuIds == null) ? 0 : this.stuIds.size();
    }

    public java.util.Iterator<Integer> getStuIdsIterator() {
      return (this.stuIds == null) ? null : this.stuIds.iterator();
    }

    public void addToStuIds(int elem) {
      if (this.stuIds == null) {
        this.stuIds = new ArrayList<Integer>();
      }
      this.stuIds.add(elem);
    }

    public List<Integer> getStuIds() {
      return this.stuIds;
    }

    public getEvaluateCountByStuIds_args setStuIds(List<Integer> stuIds) {
      this.stuIds = stuIds;
      return this;
    }

    public void unsetStuIds() {
      this.stuIds = null;
    }

    /** Returns true if field stuIds is set (has been assigned a value) and false otherwise */
    public boolean isSetStuIds() {
      return this.stuIds != null;
    }

    public void setStuIdsIsSet(boolean value) {
      if (!value) {
        this.stuIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_IDS:
        if (value == null) {
          unsetStuIds();
        } else {
          setStuIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_IDS:
        return getStuIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_IDS:
        return isSetStuIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvaluateCountByStuIds_args)
        return this.equals((getEvaluateCountByStuIds_args)that);
      return false;
    }

    public boolean equals(getEvaluateCountByStuIds_args that) {
      if (that == null)
        return false;

      boolean this_present_stuIds = true && this.isSetStuIds();
      boolean that_present_stuIds = true && that.isSetStuIds();
      if (this_present_stuIds || that_present_stuIds) {
        if (!(this_present_stuIds && that_present_stuIds))
          return false;
        if (!this.stuIds.equals(that.stuIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuIds = true && (isSetStuIds());
      list.add(present_stuIds);
      if (present_stuIds)
        list.add(stuIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEvaluateCountByStuIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuIds()).compareTo(other.isSetStuIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuIds, other.stuIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvaluateCountByStuIds_args(");
      boolean first = true;

      sb.append("stuIds:");
      if (this.stuIds == null) {
        sb.append("null");
      } else {
        sb.append(this.stuIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvaluateCountByStuIds_argsStandardSchemeFactory implements SchemeFactory {
      public getEvaluateCountByStuIds_argsStandardScheme getScheme() {
        return new getEvaluateCountByStuIds_argsStandardScheme();
      }
    }

    private static class getEvaluateCountByStuIds_argsStandardScheme extends StandardScheme<getEvaluateCountByStuIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvaluateCountByStuIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.stuIds = new ArrayList<Integer>(_list248.size);
                  int _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = iprot.readI32();
                    struct.stuIds.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setStuIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvaluateCountByStuIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stuIds != null) {
          oprot.writeFieldBegin(STU_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.stuIds.size()));
            for (int _iter251 : struct.stuIds)
            {
              oprot.writeI32(_iter251);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvaluateCountByStuIds_argsTupleSchemeFactory implements SchemeFactory {
      public getEvaluateCountByStuIds_argsTupleScheme getScheme() {
        return new getEvaluateCountByStuIds_argsTupleScheme();
      }
    }

    private static class getEvaluateCountByStuIds_argsTupleScheme extends TupleScheme<getEvaluateCountByStuIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvaluateCountByStuIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuIds()) {
          {
            oprot.writeI32(struct.stuIds.size());
            for (int _iter252 : struct.stuIds)
            {
              oprot.writeI32(_iter252);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvaluateCountByStuIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.stuIds = new ArrayList<Integer>(_list253.size);
            int _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = iprot.readI32();
              struct.stuIds.add(_elem254);
            }
          }
          struct.setStuIdsIsSet(true);
        }
      }
    }

  }

  public static class getEvaluateCountByStuIds_result implements org.apache.thrift.TBase<getEvaluateCountByStuIds_result, getEvaluateCountByStuIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEvaluateCountByStuIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvaluateCountByStuIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvaluateCountByStuIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvaluateCountByStuIds_resultTupleSchemeFactory());
    }

    public List<StuEvaluateCount> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuEvaluateCount.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvaluateCountByStuIds_result.class, metaDataMap);
    }

    public getEvaluateCountByStuIds_result() {
    }

    public getEvaluateCountByStuIds_result(
      List<StuEvaluateCount> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvaluateCountByStuIds_result(getEvaluateCountByStuIds_result other) {
      if (other.isSetSuccess()) {
        List<StuEvaluateCount> __this__success = new ArrayList<StuEvaluateCount>(other.success.size());
        for (StuEvaluateCount other_element : other.success) {
          __this__success.add(new StuEvaluateCount(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEvaluateCountByStuIds_result deepCopy() {
      return new getEvaluateCountByStuIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<StuEvaluateCount> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(StuEvaluateCount elem) {
      if (this.success == null) {
        this.success = new ArrayList<StuEvaluateCount>();
      }
      this.success.add(elem);
    }

    public List<StuEvaluateCount> getSuccess() {
      return this.success;
    }

    public getEvaluateCountByStuIds_result setSuccess(List<StuEvaluateCount> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<StuEvaluateCount>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvaluateCountByStuIds_result)
        return this.equals((getEvaluateCountByStuIds_result)that);
      return false;
    }

    public boolean equals(getEvaluateCountByStuIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEvaluateCountByStuIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvaluateCountByStuIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvaluateCountByStuIds_resultStandardSchemeFactory implements SchemeFactory {
      public getEvaluateCountByStuIds_resultStandardScheme getScheme() {
        return new getEvaluateCountByStuIds_resultStandardScheme();
      }
    }

    private static class getEvaluateCountByStuIds_resultStandardScheme extends StandardScheme<getEvaluateCountByStuIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvaluateCountByStuIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new ArrayList<StuEvaluateCount>(_list256.size);
                  StuEvaluateCount _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new StuEvaluateCount();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvaluateCountByStuIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (StuEvaluateCount _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvaluateCountByStuIds_resultTupleSchemeFactory implements SchemeFactory {
      public getEvaluateCountByStuIds_resultTupleScheme getScheme() {
        return new getEvaluateCountByStuIds_resultTupleScheme();
      }
    }

    private static class getEvaluateCountByStuIds_resultTupleScheme extends TupleScheme<getEvaluateCountByStuIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvaluateCountByStuIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (StuEvaluateCount _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvaluateCountByStuIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<StuEvaluateCount>(_list261.size);
            StuEvaluateCount _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new StuEvaluateCount();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNPSCountByStuIds_args implements org.apache.thrift.TBase<getNPSCountByStuIds_args, getNPSCountByStuIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNPSCountByStuIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNPSCountByStuIds_args");

    private static final org.apache.thrift.protocol.TField STU_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stuIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNPSCountByStuIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNPSCountByStuIds_argsTupleSchemeFactory());
    }

    public List<Integer> stuIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_IDS((short)1, "stuIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_IDS
            return STU_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_IDS, new org.apache.thrift.meta_data.FieldMetaData("stuIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNPSCountByStuIds_args.class, metaDataMap);
    }

    public getNPSCountByStuIds_args() {
    }

    public getNPSCountByStuIds_args(
      List<Integer> stuIds)
    {
      this();
      this.stuIds = stuIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNPSCountByStuIds_args(getNPSCountByStuIds_args other) {
      if (other.isSetStuIds()) {
        List<Integer> __this__stuIds = new ArrayList<Integer>(other.stuIds);
        this.stuIds = __this__stuIds;
      }
    }

    public getNPSCountByStuIds_args deepCopy() {
      return new getNPSCountByStuIds_args(this);
    }

    @Override
    public void clear() {
      this.stuIds = null;
    }

    public int getStuIdsSize() {
      return (this.stuIds == null) ? 0 : this.stuIds.size();
    }

    public java.util.Iterator<Integer> getStuIdsIterator() {
      return (this.stuIds == null) ? null : this.stuIds.iterator();
    }

    public void addToStuIds(int elem) {
      if (this.stuIds == null) {
        this.stuIds = new ArrayList<Integer>();
      }
      this.stuIds.add(elem);
    }

    public List<Integer> getStuIds() {
      return this.stuIds;
    }

    public getNPSCountByStuIds_args setStuIds(List<Integer> stuIds) {
      this.stuIds = stuIds;
      return this;
    }

    public void unsetStuIds() {
      this.stuIds = null;
    }

    /** Returns true if field stuIds is set (has been assigned a value) and false otherwise */
    public boolean isSetStuIds() {
      return this.stuIds != null;
    }

    public void setStuIdsIsSet(boolean value) {
      if (!value) {
        this.stuIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_IDS:
        if (value == null) {
          unsetStuIds();
        } else {
          setStuIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_IDS:
        return getStuIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_IDS:
        return isSetStuIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNPSCountByStuIds_args)
        return this.equals((getNPSCountByStuIds_args)that);
      return false;
    }

    public boolean equals(getNPSCountByStuIds_args that) {
      if (that == null)
        return false;

      boolean this_present_stuIds = true && this.isSetStuIds();
      boolean that_present_stuIds = true && that.isSetStuIds();
      if (this_present_stuIds || that_present_stuIds) {
        if (!(this_present_stuIds && that_present_stuIds))
          return false;
        if (!this.stuIds.equals(that.stuIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuIds = true && (isSetStuIds());
      list.add(present_stuIds);
      if (present_stuIds)
        list.add(stuIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNPSCountByStuIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuIds()).compareTo(other.isSetStuIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuIds, other.stuIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNPSCountByStuIds_args(");
      boolean first = true;

      sb.append("stuIds:");
      if (this.stuIds == null) {
        sb.append("null");
      } else {
        sb.append(this.stuIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNPSCountByStuIds_argsStandardSchemeFactory implements SchemeFactory {
      public getNPSCountByStuIds_argsStandardScheme getScheme() {
        return new getNPSCountByStuIds_argsStandardScheme();
      }
    }

    private static class getNPSCountByStuIds_argsStandardScheme extends StandardScheme<getNPSCountByStuIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNPSCountByStuIds_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.stuIds = new ArrayList<Integer>(_list264.size);
                  int _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = iprot.readI32();
                    struct.stuIds.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setStuIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNPSCountByStuIds_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stuIds != null) {
          oprot.writeFieldBegin(STU_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.stuIds.size()));
            for (int _iter267 : struct.stuIds)
            {
              oprot.writeI32(_iter267);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNPSCountByStuIds_argsTupleSchemeFactory implements SchemeFactory {
      public getNPSCountByStuIds_argsTupleScheme getScheme() {
        return new getNPSCountByStuIds_argsTupleScheme();
      }
    }

    private static class getNPSCountByStuIds_argsTupleScheme extends TupleScheme<getNPSCountByStuIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNPSCountByStuIds_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuIds()) {
          {
            oprot.writeI32(struct.stuIds.size());
            for (int _iter268 : struct.stuIds)
            {
              oprot.writeI32(_iter268);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNPSCountByStuIds_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.stuIds = new ArrayList<Integer>(_list269.size);
            int _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = iprot.readI32();
              struct.stuIds.add(_elem270);
            }
          }
          struct.setStuIdsIsSet(true);
        }
      }
    }

  }

  public static class getNPSCountByStuIds_result implements org.apache.thrift.TBase<getNPSCountByStuIds_result, getNPSCountByStuIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNPSCountByStuIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNPSCountByStuIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNPSCountByStuIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNPSCountByStuIds_resultTupleSchemeFactory());
    }

    public List<StuNPSCount> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StuNPSCount.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNPSCountByStuIds_result.class, metaDataMap);
    }

    public getNPSCountByStuIds_result() {
    }

    public getNPSCountByStuIds_result(
      List<StuNPSCount> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNPSCountByStuIds_result(getNPSCountByStuIds_result other) {
      if (other.isSetSuccess()) {
        List<StuNPSCount> __this__success = new ArrayList<StuNPSCount>(other.success.size());
        for (StuNPSCount other_element : other.success) {
          __this__success.add(new StuNPSCount(other_element));
        }
        this.success = __this__success;
      }
    }

    public getNPSCountByStuIds_result deepCopy() {
      return new getNPSCountByStuIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<StuNPSCount> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(StuNPSCount elem) {
      if (this.success == null) {
        this.success = new ArrayList<StuNPSCount>();
      }
      this.success.add(elem);
    }

    public List<StuNPSCount> getSuccess() {
      return this.success;
    }

    public getNPSCountByStuIds_result setSuccess(List<StuNPSCount> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<StuNPSCount>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNPSCountByStuIds_result)
        return this.equals((getNPSCountByStuIds_result)that);
      return false;
    }

    public boolean equals(getNPSCountByStuIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNPSCountByStuIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNPSCountByStuIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNPSCountByStuIds_resultStandardSchemeFactory implements SchemeFactory {
      public getNPSCountByStuIds_resultStandardScheme getScheme() {
        return new getNPSCountByStuIds_resultStandardScheme();
      }
    }

    private static class getNPSCountByStuIds_resultStandardScheme extends StandardScheme<getNPSCountByStuIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNPSCountByStuIds_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.success = new ArrayList<StuNPSCount>(_list272.size);
                  StuNPSCount _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new StuNPSCount();
                    _elem273.read(iprot);
                    struct.success.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNPSCountByStuIds_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (StuNPSCount _iter275 : struct.success)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNPSCountByStuIds_resultTupleSchemeFactory implements SchemeFactory {
      public getNPSCountByStuIds_resultTupleScheme getScheme() {
        return new getNPSCountByStuIds_resultTupleScheme();
      }
    }

    private static class getNPSCountByStuIds_resultTupleScheme extends TupleScheme<getNPSCountByStuIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNPSCountByStuIds_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (StuNPSCount _iter276 : struct.success)
            {
              _iter276.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNPSCountByStuIds_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<StuNPSCount>(_list277.size);
            StuNPSCount _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new StuNPSCount();
              _elem278.read(iprot);
              struct.success.add(_elem278);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByDetailId_args implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByDetailId_args, retrieveStuOrdServiceTeamByDetailId_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByDetailId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByDetailId_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByDetailId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByDetailId_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByDetailId_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByDetailId_args() {
    }

    public retrieveStuOrdServiceTeamByDetailId_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByDetailId_args(retrieveStuOrdServiceTeamByDetailId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public retrieveStuOrdServiceTeamByDetailId_args deepCopy() {
      return new retrieveStuOrdServiceTeamByDetailId_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public retrieveStuOrdServiceTeamByDetailId_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByDetailId_args)
        return this.equals((retrieveStuOrdServiceTeamByDetailId_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByDetailId_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByDetailId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByDetailId_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByDetailId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByDetailId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByDetailId_result implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByDetailId_result, retrieveStuOrdServiceTeamByDetailId_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByDetailId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByDetailId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByDetailId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByDetailId_resultTupleSchemeFactory());
    }

    public OrdServiceTeam success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdServiceTeam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByDetailId_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByDetailId_result() {
    }

    public retrieveStuOrdServiceTeamByDetailId_result(
      OrdServiceTeam success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByDetailId_result(retrieveStuOrdServiceTeamByDetailId_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrdServiceTeam(other.success);
      }
    }

    public retrieveStuOrdServiceTeamByDetailId_result deepCopy() {
      return new retrieveStuOrdServiceTeamByDetailId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OrdServiceTeam getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceTeamByDetailId_result setSuccess(OrdServiceTeam success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrdServiceTeam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByDetailId_result)
        return this.equals((retrieveStuOrdServiceTeamByDetailId_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByDetailId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByDetailId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByDetailId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByDetailId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrdServiceTeam();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByDetailId_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByDetailId_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByDetailId_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByDetailId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByDetailId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OrdServiceTeam();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherByDetailId_args implements org.apache.thrift.TBase<retrieveTeacherByDetailId_args, retrieveTeacherByDetailId_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherByDetailId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherByDetailId_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherByDetailId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherByDetailId_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherByDetailId_args.class, metaDataMap);
    }

    public retrieveTeacherByDetailId_args() {
    }

    public retrieveTeacherByDetailId_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherByDetailId_args(retrieveTeacherByDetailId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public retrieveTeacherByDetailId_args deepCopy() {
      return new retrieveTeacherByDetailId_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public retrieveTeacherByDetailId_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherByDetailId_args)
        return this.equals((retrieveTeacherByDetailId_args)that);
      return false;
    }

    public boolean equals(retrieveTeacherByDetailId_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherByDetailId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherByDetailId_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherByDetailId_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherByDetailId_argsStandardScheme getScheme() {
        return new retrieveTeacherByDetailId_argsStandardScheme();
      }
    }

    private static class retrieveTeacherByDetailId_argsStandardScheme extends StandardScheme<retrieveTeacherByDetailId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherByDetailId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherByDetailId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherByDetailId_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherByDetailId_argsTupleScheme getScheme() {
        return new retrieveTeacherByDetailId_argsTupleScheme();
      }
    }

    private static class retrieveTeacherByDetailId_argsTupleScheme extends TupleScheme<retrieveTeacherByDetailId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherByDetailId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherByDetailId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class retrieveTeacherByDetailId_result implements org.apache.thrift.TBase<retrieveTeacherByDetailId_result, retrieveTeacherByDetailId_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveTeacherByDetailId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveTeacherByDetailId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveTeacherByDetailId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveTeacherByDetailId_resultTupleSchemeFactory());
    }

    public Teacher success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Teacher.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveTeacherByDetailId_result.class, metaDataMap);
    }

    public retrieveTeacherByDetailId_result() {
    }

    public retrieveTeacherByDetailId_result(
      Teacher success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveTeacherByDetailId_result(retrieveTeacherByDetailId_result other) {
      if (other.isSetSuccess()) {
        this.success = new Teacher(other.success);
      }
    }

    public retrieveTeacherByDetailId_result deepCopy() {
      return new retrieveTeacherByDetailId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Teacher getSuccess() {
      return this.success;
    }

    public retrieveTeacherByDetailId_result setSuccess(Teacher success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Teacher)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveTeacherByDetailId_result)
        return this.equals((retrieveTeacherByDetailId_result)that);
      return false;
    }

    public boolean equals(retrieveTeacherByDetailId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveTeacherByDetailId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveTeacherByDetailId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveTeacherByDetailId_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveTeacherByDetailId_resultStandardScheme getScheme() {
        return new retrieveTeacherByDetailId_resultStandardScheme();
      }
    }

    private static class retrieveTeacherByDetailId_resultStandardScheme extends StandardScheme<retrieveTeacherByDetailId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveTeacherByDetailId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Teacher();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveTeacherByDetailId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveTeacherByDetailId_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveTeacherByDetailId_resultTupleScheme getScheme() {
        return new retrieveTeacherByDetailId_resultTupleScheme();
      }
    }

    private static class retrieveTeacherByDetailId_resultTupleScheme extends TupleScheme<retrieveTeacherByDetailId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherByDetailId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveTeacherByDetailId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Teacher();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByStuMobileAndName_args implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByStuMobileAndName_args, retrieveStuOrdServiceTeamByStuMobileAndName_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByStuMobileAndName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByStuMobileAndName_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleSchemeFactory());
    }

    public String mobile; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByStuMobileAndName_args.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args() {
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args(
      String mobile,
      String name)
    {
      this();
      this.mobile = mobile;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByStuMobileAndName_args(retrieveStuOrdServiceTeamByStuMobileAndName_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args deepCopy() {
      return new retrieveStuOrdServiceTeamByStuMobileAndName_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
      this.name = null;
    }

    public String getMobile() {
      return this.mobile;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByStuMobileAndName_args)
        return this.equals((retrieveStuOrdServiceTeamByStuMobileAndName_args)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByStuMobileAndName_args that) {
      if (that == null)
        return false;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByStuMobileAndName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByStuMobileAndName_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByStuMobileAndName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_argsTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByStuMobileAndName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class retrieveStuOrdServiceTeamByStuMobileAndName_result implements org.apache.thrift.TBase<retrieveStuOrdServiceTeamByStuMobileAndName_result, retrieveStuOrdServiceTeamByStuMobileAndName_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveStuOrdServiceTeamByStuMobileAndName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveStuOrdServiceTeamByStuMobileAndName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleSchemeFactory());
    }

    public List<OrdServiceTeam> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdServiceTeam.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveStuOrdServiceTeamByStuMobileAndName_result.class, metaDataMap);
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result() {
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result(
      List<OrdServiceTeam> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveStuOrdServiceTeamByStuMobileAndName_result(retrieveStuOrdServiceTeamByStuMobileAndName_result other) {
      if (other.isSetSuccess()) {
        List<OrdServiceTeam> __this__success = new ArrayList<OrdServiceTeam>(other.success.size());
        for (OrdServiceTeam other_element : other.success) {
          __this__success.add(new OrdServiceTeam(other_element));
        }
        this.success = __this__success;
      }
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result deepCopy() {
      return new retrieveStuOrdServiceTeamByStuMobileAndName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrdServiceTeam> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrdServiceTeam elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrdServiceTeam>();
      }
      this.success.add(elem);
    }

    public List<OrdServiceTeam> getSuccess() {
      return this.success;
    }

    public retrieveStuOrdServiceTeamByStuMobileAndName_result setSuccess(List<OrdServiceTeam> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrdServiceTeam>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveStuOrdServiceTeamByStuMobileAndName_result)
        return this.equals((retrieveStuOrdServiceTeamByStuMobileAndName_result)that);
      return false;
    }

    public boolean equals(retrieveStuOrdServiceTeamByStuMobileAndName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveStuOrdServiceTeamByStuMobileAndName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveStuOrdServiceTeamByStuMobileAndName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultStandardScheme extends StandardScheme<retrieveStuOrdServiceTeamByStuMobileAndName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.success = new ArrayList<OrdServiceTeam>(_list280.size);
                  OrdServiceTeam _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = new OrdServiceTeam();
                    _elem281.read(iprot);
                    struct.success.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrdServiceTeam _iter283 : struct.success)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme getScheme() {
        return new retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme();
      }
    }

    private static class retrieveStuOrdServiceTeamByStuMobileAndName_resultTupleScheme extends TupleScheme<retrieveStuOrdServiceTeamByStuMobileAndName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrdServiceTeam _iter284 : struct.success)
            {
              _iter284.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveStuOrdServiceTeamByStuMobileAndName_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrdServiceTeam>(_list285.size);
            OrdServiceTeam _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = new OrdServiceTeam();
              _elem286.read(iprot);
              struct.success.add(_elem286);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentTermSubjectByStuId_args implements org.apache.thrift.TBase<getCurrentTermSubjectByStuId_args, getCurrentTermSubjectByStuId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTermSubjectByStuId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTermSubjectByStuId_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentTermSubjectByStuId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentTermSubjectByStuId_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTermSubjectByStuId_args.class, metaDataMap);
    }

    public getCurrentTermSubjectByStuId_args() {
    }

    public getCurrentTermSubjectByStuId_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTermSubjectByStuId_args(getCurrentTermSubjectByStuId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getCurrentTermSubjectByStuId_args deepCopy() {
      return new getCurrentTermSubjectByStuId_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getCurrentTermSubjectByStuId_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTermSubjectByStuId_args)
        return this.equals((getCurrentTermSubjectByStuId_args)that);
      return false;
    }

    public boolean equals(getCurrentTermSubjectByStuId_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentTermSubjectByStuId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentTermSubjectByStuId_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTermSubjectByStuId_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_argsStandardScheme getScheme() {
        return new getCurrentTermSubjectByStuId_argsStandardScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_argsStandardScheme extends StandardScheme<getCurrentTermSubjectByStuId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTermSubjectByStuId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTermSubjectByStuId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTermSubjectByStuId_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_argsTupleScheme getScheme() {
        return new getCurrentTermSubjectByStuId_argsTupleScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_argsTupleScheme extends TupleScheme<getCurrentTermSubjectByStuId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getCurrentTermSubjectByStuId_result implements org.apache.thrift.TBase<getCurrentTermSubjectByStuId_result, getCurrentTermSubjectByStuId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentTermSubjectByStuId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentTermSubjectByStuId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentTermSubjectByStuId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentTermSubjectByStuId_resultTupleSchemeFactory());
    }

    public List<OrdDetailTermSubject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrdDetailTermSubject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentTermSubjectByStuId_result.class, metaDataMap);
    }

    public getCurrentTermSubjectByStuId_result() {
    }

    public getCurrentTermSubjectByStuId_result(
      List<OrdDetailTermSubject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentTermSubjectByStuId_result(getCurrentTermSubjectByStuId_result other) {
      if (other.isSetSuccess()) {
        List<OrdDetailTermSubject> __this__success = new ArrayList<OrdDetailTermSubject>(other.success.size());
        for (OrdDetailTermSubject other_element : other.success) {
          __this__success.add(new OrdDetailTermSubject(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCurrentTermSubjectByStuId_result deepCopy() {
      return new getCurrentTermSubjectByStuId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OrdDetailTermSubject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OrdDetailTermSubject elem) {
      if (this.success == null) {
        this.success = new ArrayList<OrdDetailTermSubject>();
      }
      this.success.add(elem);
    }

    public List<OrdDetailTermSubject> getSuccess() {
      return this.success;
    }

    public getCurrentTermSubjectByStuId_result setSuccess(List<OrdDetailTermSubject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OrdDetailTermSubject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentTermSubjectByStuId_result)
        return this.equals((getCurrentTermSubjectByStuId_result)that);
      return false;
    }

    public boolean equals(getCurrentTermSubjectByStuId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentTermSubjectByStuId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentTermSubjectByStuId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentTermSubjectByStuId_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_resultStandardScheme getScheme() {
        return new getCurrentTermSubjectByStuId_resultStandardScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_resultStandardScheme extends StandardScheme<getCurrentTermSubjectByStuId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentTermSubjectByStuId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                  struct.success = new ArrayList<OrdDetailTermSubject>(_list288.size);
                  OrdDetailTermSubject _elem289;
                  for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                  {
                    _elem289 = new OrdDetailTermSubject();
                    _elem289.read(iprot);
                    struct.success.add(_elem289);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentTermSubjectByStuId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OrdDetailTermSubject _iter291 : struct.success)
            {
              _iter291.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentTermSubjectByStuId_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentTermSubjectByStuId_resultTupleScheme getScheme() {
        return new getCurrentTermSubjectByStuId_resultTupleScheme();
      }
    }

    private static class getCurrentTermSubjectByStuId_resultTupleScheme extends TupleScheme<getCurrentTermSubjectByStuId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OrdDetailTermSubject _iter292 : struct.success)
            {
              _iter292.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentTermSubjectByStuId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OrdDetailTermSubject>(_list293.size);
            OrdDetailTermSubject _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = new OrdDetailTermSubject();
              _elem294.read(iprot);
              struct.success.add(_elem294);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllTermSubjectByDetailId_args implements org.apache.thrift.TBase<getAllTermSubjectByDetailId_args, getAllTermSubjectByDetailId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTermSubjectByDetailId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTermSubjectByDetailId_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTermSubjectByDetailId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTermSubjectByDetailId_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTermSubjectByDetailId_args.class, metaDataMap);
    }

    public getAllTermSubjectByDetailId_args() {
    }

    public getAllTermSubjectByDetailId_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTermSubjectByDetailId_args(getAllTermSubjectByDetailId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public getAllTermSubjectByDetailId_args deepCopy() {
      return new getAllTermSubjectByDetailId_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public getAllTermSubjectByDetailId_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTermSubjectByDetailId_args)
        return this.equals((getAllTermSubjectByDetailId_args)that);
      return false;
    }

    public boolean equals(getAllTermSubjectByDetailId_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTermSubjectByDetailId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTermSubjectByDetailId_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTermSubjectByDetailId_argsStandardSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_argsStandardScheme getScheme() {
        return new getAllTermSubjectByDetailId_argsStandardScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_argsStandardScheme extends StandardScheme<getAllTermSubjectByDetailId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTermSubjectByDetailId_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTermSubjectByDetailId_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTermSubjectByDetailId_argsTupleSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_argsTupleScheme getScheme() {
        return new getAllTermSubjectByDetailId_argsTupleScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_argsTupleScheme extends TupleScheme<getAllTermSubjectByDetailId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class getAllTermSubjectByDetailId_result implements org.apache.thrift.TBase<getAllTermSubjectByDetailId_result, getAllTermSubjectByDetailId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTermSubjectByDetailId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTermSubjectByDetailId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllTermSubjectByDetailId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllTermSubjectByDetailId_resultTupleSchemeFactory());
    }

    public List<termSubject> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, termSubject.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTermSubjectByDetailId_result.class, metaDataMap);
    }

    public getAllTermSubjectByDetailId_result() {
    }

    public getAllTermSubjectByDetailId_result(
      List<termSubject> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTermSubjectByDetailId_result(getAllTermSubjectByDetailId_result other) {
      if (other.isSetSuccess()) {
        List<termSubject> __this__success = new ArrayList<termSubject>(other.success.size());
        for (termSubject other_element : other.success) {
          __this__success.add(new termSubject(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllTermSubjectByDetailId_result deepCopy() {
      return new getAllTermSubjectByDetailId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<termSubject> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(termSubject elem) {
      if (this.success == null) {
        this.success = new ArrayList<termSubject>();
      }
      this.success.add(elem);
    }

    public List<termSubject> getSuccess() {
      return this.success;
    }

    public getAllTermSubjectByDetailId_result setSuccess(List<termSubject> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<termSubject>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTermSubjectByDetailId_result)
        return this.equals((getAllTermSubjectByDetailId_result)that);
      return false;
    }

    public boolean equals(getAllTermSubjectByDetailId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllTermSubjectByDetailId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllTermSubjectByDetailId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTermSubjectByDetailId_resultStandardSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_resultStandardScheme getScheme() {
        return new getAllTermSubjectByDetailId_resultStandardScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_resultStandardScheme extends StandardScheme<getAllTermSubjectByDetailId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTermSubjectByDetailId_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.success = new ArrayList<termSubject>(_list296.size);
                  termSubject _elem297;
                  for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                  {
                    _elem297 = new termSubject();
                    _elem297.read(iprot);
                    struct.success.add(_elem297);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTermSubjectByDetailId_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (termSubject _iter299 : struct.success)
            {
              _iter299.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTermSubjectByDetailId_resultTupleSchemeFactory implements SchemeFactory {
      public getAllTermSubjectByDetailId_resultTupleScheme getScheme() {
        return new getAllTermSubjectByDetailId_resultTupleScheme();
      }
    }

    private static class getAllTermSubjectByDetailId_resultTupleScheme extends TupleScheme<getAllTermSubjectByDetailId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (termSubject _iter300 : struct.success)
            {
              _iter300.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTermSubjectByDetailId_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<termSubject>(_list301.size);
            termSubject _elem302;
            for (int _i303 = 0; _i303 < _list301.size; ++_i303)
            {
              _elem302 = new termSubject();
              _elem302.read(iprot);
              struct.success.add(_elem302);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStuIntelligentExerciseSubject_args implements org.apache.thrift.TBase<getStuIntelligentExerciseSubject_args, getStuIntelligentExerciseSubject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStuIntelligentExerciseSubject_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuIntelligentExerciseSubject_args");

    private static final org.apache.thrift.protocol.TField STU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stuId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuIntelligentExerciseSubject_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuIntelligentExerciseSubject_argsTupleSchemeFactory());
    }

    public int stuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STU_ID((short)1, "stuId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STU_ID
            return STU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STU_ID, new org.apache.thrift.meta_data.FieldMetaData("stuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuIntelligentExerciseSubject_args.class, metaDataMap);
    }

    public getStuIntelligentExerciseSubject_args() {
    }

    public getStuIntelligentExerciseSubject_args(
      int stuId)
    {
      this();
      this.stuId = stuId;
      setStuIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuIntelligentExerciseSubject_args(getStuIntelligentExerciseSubject_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.stuId = other.stuId;
    }

    public getStuIntelligentExerciseSubject_args deepCopy() {
      return new getStuIntelligentExerciseSubject_args(this);
    }

    @Override
    public void clear() {
      setStuIdIsSet(false);
      this.stuId = 0;
    }

    public int getStuId() {
      return this.stuId;
    }

    public getStuIntelligentExerciseSubject_args setStuId(int stuId) {
      this.stuId = stuId;
      setStuIdIsSet(true);
      return this;
    }

    public void unsetStuId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    /** Returns true if field stuId is set (has been assigned a value) and false otherwise */
    public boolean isSetStuId() {
      return EncodingUtils.testBit(__isset_bitfield, __STUID_ISSET_ID);
    }

    public void setStuIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STUID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STU_ID:
        if (value == null) {
          unsetStuId();
        } else {
          setStuId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STU_ID:
        return getStuId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STU_ID:
        return isSetStuId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuIntelligentExerciseSubject_args)
        return this.equals((getStuIntelligentExerciseSubject_args)that);
      return false;
    }

    public boolean equals(getStuIntelligentExerciseSubject_args that) {
      if (that == null)
        return false;

      boolean this_present_stuId = true;
      boolean that_present_stuId = true;
      if (this_present_stuId || that_present_stuId) {
        if (!(this_present_stuId && that_present_stuId))
          return false;
        if (this.stuId != that.stuId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stuId = true;
      list.add(present_stuId);
      if (present_stuId)
        list.add(stuId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuIntelligentExerciseSubject_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStuId()).compareTo(other.isSetStuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stuId, other.stuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuIntelligentExerciseSubject_args(");
      boolean first = true;

      sb.append("stuId:");
      sb.append(this.stuId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuIntelligentExerciseSubject_argsStandardSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_argsStandardScheme getScheme() {
        return new getStuIntelligentExerciseSubject_argsStandardScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_argsStandardScheme extends StandardScheme<getStuIntelligentExerciseSubject_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuIntelligentExerciseSubject_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.stuId = iprot.readI32();
                struct.setStuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuIntelligentExerciseSubject_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STU_ID_FIELD_DESC);
        oprot.writeI32(struct.stuId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuIntelligentExerciseSubject_argsTupleSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_argsTupleScheme getScheme() {
        return new getStuIntelligentExerciseSubject_argsTupleScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_argsTupleScheme extends TupleScheme<getStuIntelligentExerciseSubject_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStuId()) {
          oprot.writeI32(struct.stuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stuId = iprot.readI32();
          struct.setStuIdIsSet(true);
        }
      }
    }

  }

  public static class getStuIntelligentExerciseSubject_result implements org.apache.thrift.TBase<getStuIntelligentExerciseSubject_result, getStuIntelligentExerciseSubject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStuIntelligentExerciseSubject_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStuIntelligentExerciseSubject_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStuIntelligentExerciseSubject_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStuIntelligentExerciseSubject_resultTupleSchemeFactory());
    }

    public IntelligentExerciseSubject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IntelligentExerciseSubject.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStuIntelligentExerciseSubject_result.class, metaDataMap);
    }

    public getStuIntelligentExerciseSubject_result() {
    }

    public getStuIntelligentExerciseSubject_result(
      IntelligentExerciseSubject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStuIntelligentExerciseSubject_result(getStuIntelligentExerciseSubject_result other) {
      if (other.isSetSuccess()) {
        this.success = new IntelligentExerciseSubject(other.success);
      }
    }

    public getStuIntelligentExerciseSubject_result deepCopy() {
      return new getStuIntelligentExerciseSubject_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IntelligentExerciseSubject getSuccess() {
      return this.success;
    }

    public getStuIntelligentExerciseSubject_result setSuccess(IntelligentExerciseSubject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IntelligentExerciseSubject)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStuIntelligentExerciseSubject_result)
        return this.equals((getStuIntelligentExerciseSubject_result)that);
      return false;
    }

    public boolean equals(getStuIntelligentExerciseSubject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStuIntelligentExerciseSubject_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStuIntelligentExerciseSubject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStuIntelligentExerciseSubject_resultStandardSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_resultStandardScheme getScheme() {
        return new getStuIntelligentExerciseSubject_resultStandardScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_resultStandardScheme extends StandardScheme<getStuIntelligentExerciseSubject_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStuIntelligentExerciseSubject_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IntelligentExerciseSubject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStuIntelligentExerciseSubject_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStuIntelligentExerciseSubject_resultTupleSchemeFactory implements SchemeFactory {
      public getStuIntelligentExerciseSubject_resultTupleScheme getScheme() {
        return new getStuIntelligentExerciseSubject_resultTupleScheme();
      }
    }

    private static class getStuIntelligentExerciseSubject_resultTupleScheme extends TupleScheme<getStuIntelligentExerciseSubject_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStuIntelligentExerciseSubject_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IntelligentExerciseSubject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSubjectHasKnowledgeTree_args implements org.apache.thrift.TBase<getSubjectHasKnowledgeTree_args, getSubjectHasKnowledgeTree_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubjectHasKnowledgeTree_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubjectHasKnowledgeTree_args");

    private static final org.apache.thrift.protocol.TField DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubjectHasKnowledgeTree_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubjectHasKnowledgeTree_argsTupleSchemeFactory());
    }

    public int detailId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DETAIL_ID((short)1, "detailId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DETAIL_ID
            return DETAIL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DETAILID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("detailId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubjectHasKnowledgeTree_args.class, metaDataMap);
    }

    public getSubjectHasKnowledgeTree_args() {
    }

    public getSubjectHasKnowledgeTree_args(
      int detailId)
    {
      this();
      this.detailId = detailId;
      setDetailIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubjectHasKnowledgeTree_args(getSubjectHasKnowledgeTree_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.detailId = other.detailId;
    }

    public getSubjectHasKnowledgeTree_args deepCopy() {
      return new getSubjectHasKnowledgeTree_args(this);
    }

    @Override
    public void clear() {
      setDetailIdIsSet(false);
      this.detailId = 0;
    }

    public int getDetailId() {
      return this.detailId;
    }

    public getSubjectHasKnowledgeTree_args setDetailId(int detailId) {
      this.detailId = detailId;
      setDetailIdIsSet(true);
      return this;
    }

    public void unsetDetailId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    /** Returns true if field detailId is set (has been assigned a value) and false otherwise */
    public boolean isSetDetailId() {
      return EncodingUtils.testBit(__isset_bitfield, __DETAILID_ISSET_ID);
    }

    public void setDetailIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DETAIL_ID:
        if (value == null) {
          unsetDetailId();
        } else {
          setDetailId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DETAIL_ID:
        return getDetailId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DETAIL_ID:
        return isSetDetailId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubjectHasKnowledgeTree_args)
        return this.equals((getSubjectHasKnowledgeTree_args)that);
      return false;
    }

    public boolean equals(getSubjectHasKnowledgeTree_args that) {
      if (that == null)
        return false;

      boolean this_present_detailId = true;
      boolean that_present_detailId = true;
      if (this_present_detailId || that_present_detailId) {
        if (!(this_present_detailId && that_present_detailId))
          return false;
        if (this.detailId != that.detailId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_detailId = true;
      list.add(present_detailId);
      if (present_detailId)
        list.add(detailId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubjectHasKnowledgeTree_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDetailId()).compareTo(other.isSetDetailId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDetailId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailId, other.detailId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubjectHasKnowledgeTree_args(");
      boolean first = true;

      sb.append("detailId:");
      sb.append(this.detailId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubjectHasKnowledgeTree_argsStandardSchemeFactory implements SchemeFactory {
      public getSubjectHasKnowledgeTree_argsStandardScheme getScheme() {
        return new getSubjectHasKnowledgeTree_argsStandardScheme();
      }
    }

    private static class getSubjectHasKnowledgeTree_argsStandardScheme extends StandardScheme<getSubjectHasKnowledgeTree_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubjectHasKnowledgeTree_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DETAIL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.detailId = iprot.readI32();
                struct.setDetailIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubjectHasKnowledgeTree_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DETAIL_ID_FIELD_DESC);
        oprot.writeI32(struct.detailId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubjectHasKnowledgeTree_argsTupleSchemeFactory implements SchemeFactory {
      public getSubjectHasKnowledgeTree_argsTupleScheme getScheme() {
        return new getSubjectHasKnowledgeTree_argsTupleScheme();
      }
    }

    private static class getSubjectHasKnowledgeTree_argsTupleScheme extends TupleScheme<getSubjectHasKnowledgeTree_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubjectHasKnowledgeTree_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDetailId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDetailId()) {
          oprot.writeI32(struct.detailId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubjectHasKnowledgeTree_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.detailId = iprot.readI32();
          struct.setDetailIdIsSet(true);
        }
      }
    }

  }

  public static class getSubjectHasKnowledgeTree_result implements org.apache.thrift.TBase<getSubjectHasKnowledgeTree_result, getSubjectHasKnowledgeTree_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubjectHasKnowledgeTree_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubjectHasKnowledgeTree_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubjectHasKnowledgeTree_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubjectHasKnowledgeTree_resultTupleSchemeFactory());
    }

    public SubjectKnowledgeTreeDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SubjectKnowledgeTreeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubjectHasKnowledgeTree_result.class, metaDataMap);
    }

    public getSubjectHasKnowledgeTree_result() {
    }

    public getSubjectHasKnowledgeTree_result(
      SubjectKnowledgeTreeDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubjectHasKnowledgeTree_result(getSubjectHasKnowledgeTree_result other) {
      if (other.isSetSuccess()) {
        this.success = new SubjectKnowledgeTreeDTO(other.success);
      }
    }

    public getSubjectHasKnowledgeTree_result deepCopy() {
      return new getSubjectHasKnowledgeTree_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SubjectKnowledgeTreeDTO getSuccess() {
      return this.success;
    }

    public getSubjectHasKnowledgeTree_result setSuccess(SubjectKnowledgeTreeDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SubjectKnowledgeTreeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubjectHasKnowledgeTree_result)
        return this.equals((getSubjectHasKnowledgeTree_result)that);
      return false;
    }

    public boolean equals(getSubjectHasKnowledgeTree_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubjectHasKnowledgeTree_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubjectHasKnowledgeTree_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubjectHasKnowledgeTree_resultStandardSchemeFactory implements SchemeFactory {
      public getSubjectHasKnowledgeTree_resultStandardScheme getScheme() {
        return new getSubjectHasKnowledgeTree_resultStandardScheme();
      }
    }

    private static class getSubjectHasKnowledgeTree_resultStandardScheme extends StandardScheme<getSubjectHasKnowledgeTree_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubjectHasKnowledgeTree_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SubjectKnowledgeTreeDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubjectHasKnowledgeTree_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubjectHasKnowledgeTree_resultTupleSchemeFactory implements SchemeFactory {
      public getSubjectHasKnowledgeTree_resultTupleScheme getScheme() {
        return new getSubjectHasKnowledgeTree_resultTupleScheme();
      }
    }

    private static class getSubjectHasKnowledgeTree_resultTupleScheme extends TupleScheme<getSubjectHasKnowledgeTree_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubjectHasKnowledgeTree_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubjectHasKnowledgeTree_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SubjectKnowledgeTreeDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
