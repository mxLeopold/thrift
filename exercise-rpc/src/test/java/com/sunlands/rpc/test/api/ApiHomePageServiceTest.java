package com.sunlands.rpc.test.api;

import com.sunlands.rpc.api.biz.service.UserRecordStatisticsService;
import com.sunlands.rpc.api.homepage.handler.ApiHomePageServiceHandler;
import com.sunlands.rpc.api.homepage.service.ApiHomePageService;
import com.sunlands.rpc.api.homepage.service.DailyIntelligentExerciseDTO;
import com.sunlands.rpc.common.Constant;
import com.sunlands.rpc.common.DateTimeUtil;
import com.sunlands.rpc.web.statistics.service.WebStatisticsService;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.transport.THttpClient;
import org.apache.thrift.transport.TTransport;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.*;

/**
 * <p>Title:</p>
 * <p>Description:</p>
 *
 * @author <a href="mailto:yinhang89@sunlands.com">尹行</a>
 * @date 2018年03月16日
 * @since v1.0
 */
@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
public class ApiHomePageServiceTest {

    @Autowired
    protected TProtocolFactory protocolFactory;

    @LocalServerPort
    protected int port;

    protected ApiHomePageService.Client client;

    @Autowired
    private ApiHomePageServiceHandler handler;

    @Before
    public void setUp() throws Exception {
        TTransport transport = new THttpClient("http://localhost:" + port + "/api/homePage");
        TProtocol protocol = protocolFactory.getProtocol(transport);
        client = new ApiHomePageService.Client(protocol);
    }
    @Test
    public void testGroupMember() throws Exception {

//        List<Member> members = client.getGroupMemberListByPerson(0, "wangzhuzhu");
//        Assert.assertEquals(2,members.size());
    }

    @Test
    public void testIsDailyIntelligentExerciseDone() throws TException {
        DateTime before = DateTime.now();
        DailyIntelligentExerciseDTO dailyIntelligentExerciseDone = client.isDailyIntelligentExerciseDone(1611874);
        System.out.println(dailyIntelligentExerciseDone.done + "|" + dailyIntelligentExerciseDone.hasTiku);
        DateTime end = DateTime.now();
        printTimeSpend(before, end, 1);
    }

    @Test
    public void testGetSubmitQuestionCount() throws TException {
//        List<Integer> orderDetailIds = Arrays.asList(27930,346799,659615,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,705981,707519,1456903,1462291,1480160,1480160,1488841,1518324,1518324,1518324,1518324,1518324,1518324,1518324,1518862,1518862,1518862,1518862,1518862,1518862,1518862,1518862,1522988,1523012,1523506,1523549,1523549,1523595,1523658,1523667,1523667,1523667,1523667,1523725,1573514,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573531,1573532,1573532,1573532,1573539,1573551,1573551,1573580,1573580,1573647,1573648,1573648,1573649,1573649,1573651,1573651,1573669,1573669,1573669,1573669,1573669,1573710,1602509,1602509,1602511,1602511,1602511,1602511,1602511,1602511,1602511,1602511,1602511,1602530,1602546,1602553,1602556,1602601,1602602,1602604,1602606,1602608,1602610,1602611,1602612,1602613,1602613,1602643,1602643,1602643,1602643,1602643,1602643,1602643,1602643,1602643,1602668,1602681,1602681,1602681,1602681,1602681,1602681,1602691,1602710,1602710,1602710,1602738,1602738,1602810,1602810,1602861,1602862,1602863,1602910,1602910,1602910,1602910,1602910,1602910,1602910,1602931,1602999,1603057,1603152,1603163,1603163,1603163,1603163,1603163,1603180,1603186,1603215,1603216,1603219,1603248,1603275,1603319,1603319,1603319,1603334,1603344,1607329,1607333,1607334,1607395,1607479,1607507,1607533,1607542,1607545,1607558,1607562,1607575,1607584,1607586,1607587,1607588,1607589,1607591,1607592,1607619,1607620,1607625,1607627,1607629,1607632,1607645,1607732,1607853,1607853,1607853,1607853,1607853,1607853,1607853,1607855,1607855,1607855,1607855,1607855,1607856,1607856,1607856,1607856,1607856,1607856,1607856,1607856,1607856,1607861,1607861,1607861,1607896,1607896,1607900,1607929,1607929,1607955,1607999,1607999,1607999,1608024,1608024,1608025,1608032,1608032,1608032,1608032,1608034,1608034,1608034,1608036,1608036,1608036,1608036,1608036,1608049,1608049,1608049,1608057,1608059,1608059,1608061,1608062,1608063,1608067,1608068,1608079,1608079,1608079,1608079,1608087,1608087,1608087,1608095,1608095,1608095,1608096,1608096,1608096,1608096,1608096,1608096,1608098,1608098,1608100,1608100,1608128,1608132,1608136,1608152,1608152,1608274,1608308,1608311,1608315,1608318,1608324,1608341,1608362,1608391,1608397,1608575,1608576,1608665,1608666,1608667,1608667,1608671,1608773,1608773,1608773,1608778,1608778,1608778,1608778,1608778,1608778,1608778,1608778,1608778,1608778,1608778,1608796,1608798,1608875,1608903,1608920,1608924,1608924,1608924,1608956,1608970,1609510,1609918,1610030,1610030,1610030,1610047,1610047,1610048,1610048,1610053,1610053,1610053,1610053,1610053,1610092,1610093,1610093,1610096,1610108,1610108,1610108,1611503,1611503,1611503,1611503,1611515,1611515,1611647,1611657,1611681,1611681,1611681,1611746,1611746,1611754,1611754,1611754,1611758,1611777,1611777,1611777,1611817,1611817,1611817,1611829,1611841,1611850,1611850,1611850,1611850,1611856,1611856,1611856,1611856,1611856,1611870,1611870,1611870,1611980,1611992,1611994,1611995,1611995,1611995,1611995,1611996,1611996,1611996,1611998,1611998,1611998,1611998,1611998,1611998,1611998,1612010,1612069,1612127,1612131,1612164,1612164,1612705,3175304);
//        List<Integer> stuIds = Arrays.asList
//        int size = orderDetailIds.size();
//        DateTime before = DateTime.now();
//        for (int i = 0; i < size; i++) {
//            Integer orderDetailId = orderDetailIds.get(i);
//            Integer studentId = stuIds.get(i);
//            int count = client.getSubmitQuestionCount(orderDetailId, studentId);
//            if (count != 0) {
//                System.out.println(orderDetailId + " | " + studentId);
//            }
//        }
//        DateTime end = DateTime.now();
//        printTimeSpend(before, end, size);
        int count = client.getSubmitQuestionCount(3064934, 1693997);
        System.out.println(count);
    }

    private void printTimeSpend(DateTime before, DateTime end, int size) {
        int millis = end.millisOfDay().get() - before.millisOfDay().get();
        System.out.println("总耗时: " + millis + "ms");
        System.out.println("平均耗时: " + (millis / size) + "." + (millis % size) + "ms");
    }
}
